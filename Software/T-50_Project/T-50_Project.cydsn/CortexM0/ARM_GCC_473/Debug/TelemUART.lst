ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"TelemUART.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	TelemUART_initVar
  18              		.bss
  19              		.type	TelemUART_initVar, %object
  20              		.size	TelemUART_initVar, 1
  21              	TelemUART_initVar:
  22 0000 00       		.space	1
  23              		.section	.text.TelemUART_Start,"ax",%progbits
  24              		.align	2
  25              		.global	TelemUART_Start
  26              		.code	16
  27              		.thumb_func
  28              		.type	TelemUART_Start, %function
  29              	TelemUART_Start:
  30              	.LFB0:
  31              		.file 1 ".\\Generated_Source\\PSoC4\\TelemUART.c"
   1:.\Generated_Source\PSoC4/TelemUART.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/TelemUART.c **** * File Name: TelemUART.c
   3:.\Generated_Source\PSoC4/TelemUART.c **** * Version 2.30
   4:.\Generated_Source\PSoC4/TelemUART.c **** *
   5:.\Generated_Source\PSoC4/TelemUART.c **** * Description:
   6:.\Generated_Source\PSoC4/TelemUART.c **** *  This file provides all API functionality of the UART component
   7:.\Generated_Source\PSoC4/TelemUART.c **** *
   8:.\Generated_Source\PSoC4/TelemUART.c **** * Note:
   9:.\Generated_Source\PSoC4/TelemUART.c **** *
  10:.\Generated_Source\PSoC4/TelemUART.c **** ********************************************************************************
  11:.\Generated_Source\PSoC4/TelemUART.c **** * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  12:.\Generated_Source\PSoC4/TelemUART.c **** * You may use this file only in accordance with the license, terms, conditions,
  13:.\Generated_Source\PSoC4/TelemUART.c **** * disclaimers, and limitations in the end user license agreement accompanying
  14:.\Generated_Source\PSoC4/TelemUART.c **** * the software package with which this file was provided.
  15:.\Generated_Source\PSoC4/TelemUART.c **** *******************************************************************************/
  16:.\Generated_Source\PSoC4/TelemUART.c **** 
  17:.\Generated_Source\PSoC4/TelemUART.c **** #include "TelemUART.h"
  18:.\Generated_Source\PSoC4/TelemUART.c **** #include "CyLib.h"
  19:.\Generated_Source\PSoC4/TelemUART.c **** #if(TelemUART_INTERNAL_CLOCK_USED)
  20:.\Generated_Source\PSoC4/TelemUART.c ****     #include "TelemUART_IntClock.h"
  21:.\Generated_Source\PSoC4/TelemUART.c **** #endif /* End TelemUART_INTERNAL_CLOCK_USED */
  22:.\Generated_Source\PSoC4/TelemUART.c **** 
  23:.\Generated_Source\PSoC4/TelemUART.c **** 
  24:.\Generated_Source\PSoC4/TelemUART.c **** /***************************************
  25:.\Generated_Source\PSoC4/TelemUART.c **** * Global data allocation
  26:.\Generated_Source\PSoC4/TelemUART.c **** ***************************************/
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 2


  27:.\Generated_Source\PSoC4/TelemUART.c **** 
  28:.\Generated_Source\PSoC4/TelemUART.c **** uint8 TelemUART_initVar = 0u;
  29:.\Generated_Source\PSoC4/TelemUART.c **** #if( TelemUART_TX_ENABLED && (TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH))
  30:.\Generated_Source\PSoC4/TelemUART.c ****     volatile uint8 TelemUART_txBuffer[TelemUART_TXBUFFERSIZE];
  31:.\Generated_Source\PSoC4/TelemUART.c ****     volatile uint8 TelemUART_txBufferRead = 0u;
  32:.\Generated_Source\PSoC4/TelemUART.c ****     uint8 TelemUART_txBufferWrite = 0u;
  33:.\Generated_Source\PSoC4/TelemUART.c **** #endif /* End TelemUART_TX_ENABLED */
  34:.\Generated_Source\PSoC4/TelemUART.c **** #if( ( TelemUART_RX_ENABLED || TelemUART_HD_ENABLED ) && \
  35:.\Generated_Source\PSoC4/TelemUART.c ****      (TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH) )
  36:.\Generated_Source\PSoC4/TelemUART.c ****     volatile uint8 TelemUART_rxBuffer[TelemUART_RXBUFFERSIZE];
  37:.\Generated_Source\PSoC4/TelemUART.c ****     volatile uint8 TelemUART_rxBufferRead = 0u;
  38:.\Generated_Source\PSoC4/TelemUART.c ****     volatile uint8 TelemUART_rxBufferWrite = 0u;
  39:.\Generated_Source\PSoC4/TelemUART.c ****     volatile uint8 TelemUART_rxBufferLoopDetect = 0u;
  40:.\Generated_Source\PSoC4/TelemUART.c ****     volatile uint8 TelemUART_rxBufferOverflow = 0u;
  41:.\Generated_Source\PSoC4/TelemUART.c ****     #if (TelemUART_RXHW_ADDRESS_ENABLED)
  42:.\Generated_Source\PSoC4/TelemUART.c ****         volatile uint8 TelemUART_rxAddressMode = TelemUART_RXADDRESSMODE;
  43:.\Generated_Source\PSoC4/TelemUART.c ****         volatile uint8 TelemUART_rxAddressDetected = 0u;
  44:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* End EnableHWAddress */
  45:.\Generated_Source\PSoC4/TelemUART.c **** #endif /* End TelemUART_RX_ENABLED */
  46:.\Generated_Source\PSoC4/TelemUART.c **** 
  47:.\Generated_Source\PSoC4/TelemUART.c **** 
  48:.\Generated_Source\PSoC4/TelemUART.c **** /*******************************************************************************
  49:.\Generated_Source\PSoC4/TelemUART.c **** * Function Name: TelemUART_Start
  50:.\Generated_Source\PSoC4/TelemUART.c **** ********************************************************************************
  51:.\Generated_Source\PSoC4/TelemUART.c **** *
  52:.\Generated_Source\PSoC4/TelemUART.c **** * Summary:
  53:.\Generated_Source\PSoC4/TelemUART.c **** *  Initialize and Enable the UART component.
  54:.\Generated_Source\PSoC4/TelemUART.c **** *  Enable the clock input to enable operation.
  55:.\Generated_Source\PSoC4/TelemUART.c **** *
  56:.\Generated_Source\PSoC4/TelemUART.c **** * Parameters:
  57:.\Generated_Source\PSoC4/TelemUART.c **** *  None.
  58:.\Generated_Source\PSoC4/TelemUART.c **** *
  59:.\Generated_Source\PSoC4/TelemUART.c **** * Return:
  60:.\Generated_Source\PSoC4/TelemUART.c **** *  None.
  61:.\Generated_Source\PSoC4/TelemUART.c **** *
  62:.\Generated_Source\PSoC4/TelemUART.c **** * Global variables:
  63:.\Generated_Source\PSoC4/TelemUART.c **** *  The TelemUART_intiVar variable is used to indicate initial
  64:.\Generated_Source\PSoC4/TelemUART.c **** *  configuration of this component. The variable is initialized to zero (0u)
  65:.\Generated_Source\PSoC4/TelemUART.c **** *  and set to one (1u) the first time UART_Start() is called. This allows for
  66:.\Generated_Source\PSoC4/TelemUART.c **** *  component initialization without re-initialization in all subsequent calls
  67:.\Generated_Source\PSoC4/TelemUART.c **** *  to the TelemUART_Start() routine.
  68:.\Generated_Source\PSoC4/TelemUART.c **** *
  69:.\Generated_Source\PSoC4/TelemUART.c **** * Reentrant:
  70:.\Generated_Source\PSoC4/TelemUART.c **** *  No.
  71:.\Generated_Source\PSoC4/TelemUART.c **** *
  72:.\Generated_Source\PSoC4/TelemUART.c **** *******************************************************************************/
  73:.\Generated_Source\PSoC4/TelemUART.c **** void TelemUART_Start(void) 
  74:.\Generated_Source\PSoC4/TelemUART.c **** {
  32              		.loc 1 74 0
  33              		.cfi_startproc
  34 0000 80B5     		push	{r7, lr}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 8
  37              		.cfi_offset 7, -8
  38              		.cfi_offset 14, -4
  39 0002 00AF     		add	r7, sp, #0
  40              	.LCFI1:
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 3


  41              		.cfi_def_cfa_register 7
  75:.\Generated_Source\PSoC4/TelemUART.c ****     /* If not Initialized then initialize all required hardware and software */
  76:.\Generated_Source\PSoC4/TelemUART.c ****     if(TelemUART_initVar == 0u)
  42              		.loc 1 76 0
  43 0004 064B     		ldr	r3, .L3
  44 0006 1B78     		ldrb	r3, [r3]
  45 0008 002B     		cmp	r3, #0
  46 000a 04D1     		bne	.L2
  77:.\Generated_Source\PSoC4/TelemUART.c ****     {
  78:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_Init();
  47              		.loc 1 78 0
  48 000c FFF7FEFF 		bl	TelemUART_Init
  79:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_initVar = 1u;
  49              		.loc 1 79 0
  50 0010 034B     		ldr	r3, .L3
  51 0012 0122     		mov	r2, #1
  52 0014 1A70     		strb	r2, [r3]
  53              	.L2:
  80:.\Generated_Source\PSoC4/TelemUART.c ****     }
  81:.\Generated_Source\PSoC4/TelemUART.c ****     TelemUART_Enable();
  54              		.loc 1 81 0
  55 0016 FFF7FEFF 		bl	TelemUART_Enable
  82:.\Generated_Source\PSoC4/TelemUART.c **** }
  56              		.loc 1 82 0
  57 001a BD46     		mov	sp, r7
  58              		@ sp needed for prologue
  59 001c 80BD     		pop	{r7, pc}
  60              	.L4:
  61 001e C046     		.align	2
  62              	.L3:
  63 0020 00000000 		.word	TelemUART_initVar
  64              		.cfi_endproc
  65              	.LFE0:
  66              		.size	TelemUART_Start, .-TelemUART_Start
  67              		.section	.text.TelemUART_Init,"ax",%progbits
  68              		.align	2
  69              		.global	TelemUART_Init
  70              		.code	16
  71              		.thumb_func
  72              		.type	TelemUART_Init, %function
  73              	TelemUART_Init:
  74              	.LFB1:
  83:.\Generated_Source\PSoC4/TelemUART.c **** 
  84:.\Generated_Source\PSoC4/TelemUART.c **** 
  85:.\Generated_Source\PSoC4/TelemUART.c **** /*******************************************************************************
  86:.\Generated_Source\PSoC4/TelemUART.c **** * Function Name: TelemUART_Init
  87:.\Generated_Source\PSoC4/TelemUART.c **** ********************************************************************************
  88:.\Generated_Source\PSoC4/TelemUART.c **** *
  89:.\Generated_Source\PSoC4/TelemUART.c **** * Summary:
  90:.\Generated_Source\PSoC4/TelemUART.c **** *  Initialize component's parameters to the parameters set by user in the
  91:.\Generated_Source\PSoC4/TelemUART.c **** *  customizer of the component placed onto schematic. Usually called in
  92:.\Generated_Source\PSoC4/TelemUART.c **** *  TelemUART_Start().
  93:.\Generated_Source\PSoC4/TelemUART.c **** *
  94:.\Generated_Source\PSoC4/TelemUART.c **** * Parameters:
  95:.\Generated_Source\PSoC4/TelemUART.c **** *  None.
  96:.\Generated_Source\PSoC4/TelemUART.c **** *
  97:.\Generated_Source\PSoC4/TelemUART.c **** * Return:
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 4


  98:.\Generated_Source\PSoC4/TelemUART.c **** *  None.
  99:.\Generated_Source\PSoC4/TelemUART.c **** *
 100:.\Generated_Source\PSoC4/TelemUART.c **** *******************************************************************************/
 101:.\Generated_Source\PSoC4/TelemUART.c **** void TelemUART_Init(void) 
 102:.\Generated_Source\PSoC4/TelemUART.c **** {
  75              		.loc 1 102 0
  76              		.cfi_startproc
  77 0000 80B5     		push	{r7, lr}
  78              	.LCFI2:
  79              		.cfi_def_cfa_offset 8
  80              		.cfi_offset 7, -8
  81              		.cfi_offset 14, -4
  82 0002 00AF     		add	r7, sp, #0
  83              	.LCFI3:
  84              		.cfi_def_cfa_register 7
 103:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_RX_ENABLED || TelemUART_HD_ENABLED)
 104:.\Generated_Source\PSoC4/TelemUART.c **** 
 105:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_RX_INTERRUPT_ENABLED && (TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH))
 106:.\Generated_Source\PSoC4/TelemUART.c ****             /* Set the RX Interrupt. */
 107:.\Generated_Source\PSoC4/TelemUART.c ****             (void)CyIntSetVector(TelemUART_RX_VECT_NUM, &TelemUART_RXISR);
 108:.\Generated_Source\PSoC4/TelemUART.c ****             CyIntSetPriority(TelemUART_RX_VECT_NUM, TelemUART_RX_PRIOR_NUM);
 109:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_RX_INTERRUPT_ENABLED */
 110:.\Generated_Source\PSoC4/TelemUART.c **** 
 111:.\Generated_Source\PSoC4/TelemUART.c ****         #if (TelemUART_RXHW_ADDRESS_ENABLED)
 112:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_SetRxAddressMode(TelemUART_RXAddressMode);
 113:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_SetRxAddress1(TelemUART_RXHWADDRESS1);
 114:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_SetRxAddress2(TelemUART_RXHWADDRESS2);
 115:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_RXHW_ADDRESS_ENABLED */
 116:.\Generated_Source\PSoC4/TelemUART.c **** 
 117:.\Generated_Source\PSoC4/TelemUART.c ****         /* Init Count7 period */
 118:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_RXBITCTR_PERIOD_REG = TelemUART_RXBITCTR_INIT;
 119:.\Generated_Source\PSoC4/TelemUART.c ****         /* Configure the Initial RX interrupt mask */
 120:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_RXSTATUS_MASK_REG  = TelemUART_INIT_RX_INTERRUPTS_MASK;
 121:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* End TelemUART_RX_ENABLED || TelemUART_HD_ENABLED*/
 122:.\Generated_Source\PSoC4/TelemUART.c **** 
 123:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_TX_ENABLED)
 124:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_TX_INTERRUPT_ENABLED && (TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH))
 125:.\Generated_Source\PSoC4/TelemUART.c ****             /* Set the TX Interrupt. */
 126:.\Generated_Source\PSoC4/TelemUART.c ****             (void)CyIntSetVector(TelemUART_TX_VECT_NUM, &TelemUART_TXISR);
 127:.\Generated_Source\PSoC4/TelemUART.c ****             CyIntSetPriority(TelemUART_TX_VECT_NUM, TelemUART_TX_PRIOR_NUM);
 128:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_TX_INTERRUPT_ENABLED */
 129:.\Generated_Source\PSoC4/TelemUART.c **** 
 130:.\Generated_Source\PSoC4/TelemUART.c ****         /* Write Counter Value for TX Bit Clk Generator*/
 131:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_TXCLKGEN_DP)
 132:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_TXBITCLKGEN_CTR_REG = TelemUART_BIT_CENTER;
  85              		.loc 1 132 0
  86 0004 054B     		ldr	r3, .L6
  87 0006 0722     		mov	r2, #7
  88 0008 1A70     		strb	r2, [r3]
 133:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_TXBITCLKTX_COMPLETE_REG = (TelemUART_NUMBER_OF_DATA_BITS +
  89              		.loc 1 133 0
  90 000a 054B     		ldr	r3, .L6+4
  91 000c 4822     		mov	r2, #72
  92 000e 1A70     		strb	r2, [r3]
 134:.\Generated_Source\PSoC4/TelemUART.c ****                         TelemUART_NUMBER_OF_START_BIT) * TelemUART_OVER_SAMPLE_COUNT;
 135:.\Generated_Source\PSoC4/TelemUART.c ****         #else
 136:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_TXBITCTR_PERIOD_REG = ((TelemUART_NUMBER_OF_DATA_BITS +
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 5


 137:.\Generated_Source\PSoC4/TelemUART.c ****                         TelemUART_NUMBER_OF_START_BIT) * TelemUART_OVER_SAMPLE_8) - 1u;
 138:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_TXCLKGEN_DP */
 139:.\Generated_Source\PSoC4/TelemUART.c **** 
 140:.\Generated_Source\PSoC4/TelemUART.c ****         /* Configure the Initial TX interrupt mask */
 141:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_TX_INTERRUPT_ENABLED && (TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH))
 142:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_TXSTATUS_MASK_REG = TelemUART_TX_STS_FIFO_EMPTY;
 143:.\Generated_Source\PSoC4/TelemUART.c ****         #else
 144:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_TXSTATUS_MASK_REG = TelemUART_INIT_TX_INTERRUPTS_MASK;
  93              		.loc 1 144 0
  94 0010 044B     		ldr	r3, .L6+8
  95 0012 0022     		mov	r2, #0
  96 0014 1A70     		strb	r2, [r3]
 145:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /*End TelemUART_TX_INTERRUPT_ENABLED*/
 146:.\Generated_Source\PSoC4/TelemUART.c **** 
 147:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* End TelemUART_TX_ENABLED */
 148:.\Generated_Source\PSoC4/TelemUART.c **** 
 149:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_PARITY_TYPE_SW)  /* Write Parity to Control Register */
 150:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_WriteControlRegister( \
 151:.\Generated_Source\PSoC4/TelemUART.c ****             (TelemUART_ReadControlRegister() & (uint8)~TelemUART_CTRL_PARITY_TYPE_MASK) | \
 152:.\Generated_Source\PSoC4/TelemUART.c ****             (uint8)(TelemUART_PARITY_TYPE << TelemUART_CTRL_PARITY_TYPE0_SHIFT) );
 153:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* End TelemUART_PARITY_TYPE_SW */
 154:.\Generated_Source\PSoC4/TelemUART.c **** }
  97              		.loc 1 154 0
  98 0016 BD46     		mov	sp, r7
  99              		@ sp needed for prologue
 100 0018 80BD     		pop	{r7, pc}
 101              	.L7:
 102 001a C046     		.align	2
 103              	.L6:
 104 001c 22000F40 		.word	1074724898
 105 0020 32000F40 		.word	1074724914
 106 0024 83000F40 		.word	1074724995
 107              		.cfi_endproc
 108              	.LFE1:
 109              		.size	TelemUART_Init, .-TelemUART_Init
 110              		.section	.text.TelemUART_Enable,"ax",%progbits
 111              		.align	2
 112              		.global	TelemUART_Enable
 113              		.code	16
 114              		.thumb_func
 115              		.type	TelemUART_Enable, %function
 116              	TelemUART_Enable:
 117              	.LFB2:
 155:.\Generated_Source\PSoC4/TelemUART.c **** 
 156:.\Generated_Source\PSoC4/TelemUART.c **** 
 157:.\Generated_Source\PSoC4/TelemUART.c **** /*******************************************************************************
 158:.\Generated_Source\PSoC4/TelemUART.c **** * Function Name: TelemUART_Enable
 159:.\Generated_Source\PSoC4/TelemUART.c **** ********************************************************************************
 160:.\Generated_Source\PSoC4/TelemUART.c **** *
 161:.\Generated_Source\PSoC4/TelemUART.c **** * Summary:
 162:.\Generated_Source\PSoC4/TelemUART.c **** *  Enables the UART block operation
 163:.\Generated_Source\PSoC4/TelemUART.c **** *
 164:.\Generated_Source\PSoC4/TelemUART.c **** * Parameters:
 165:.\Generated_Source\PSoC4/TelemUART.c **** *  None.
 166:.\Generated_Source\PSoC4/TelemUART.c **** *
 167:.\Generated_Source\PSoC4/TelemUART.c **** * Return:
 168:.\Generated_Source\PSoC4/TelemUART.c **** *  None.
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 6


 169:.\Generated_Source\PSoC4/TelemUART.c **** *
 170:.\Generated_Source\PSoC4/TelemUART.c **** * Global Variables:
 171:.\Generated_Source\PSoC4/TelemUART.c **** *  TelemUART_rxAddressDetected - set to initial state (0).
 172:.\Generated_Source\PSoC4/TelemUART.c **** *
 173:.\Generated_Source\PSoC4/TelemUART.c **** *******************************************************************************/
 174:.\Generated_Source\PSoC4/TelemUART.c **** void TelemUART_Enable(void) 
 175:.\Generated_Source\PSoC4/TelemUART.c **** {
 118              		.loc 1 175 0
 119              		.cfi_startproc
 120 0000 90B5     		push	{r4, r7, lr}
 121              	.LCFI4:
 122              		.cfi_def_cfa_offset 12
 123              		.cfi_offset 4, -12
 124              		.cfi_offset 7, -8
 125              		.cfi_offset 14, -4
 126 0002 83B0     		sub	sp, sp, #12
 127              	.LCFI5:
 128              		.cfi_def_cfa_offset 24
 129 0004 00AF     		add	r7, sp, #0
 130              	.LCFI6:
 131              		.cfi_def_cfa_register 7
 176:.\Generated_Source\PSoC4/TelemUART.c ****     uint8 enableInterrupts;
 177:.\Generated_Source\PSoC4/TelemUART.c ****     enableInterrupts = CyEnterCriticalSection();
 132              		.loc 1 177 0
 133 0006 FC1D     		add	r4, r7, #7
 134 0008 FFF7FEFF 		bl	CyEnterCriticalSection
 135 000c 031C     		mov	r3, r0
 136 000e 2370     		strb	r3, [r4]
 178:.\Generated_Source\PSoC4/TelemUART.c **** 
 179:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_RX_ENABLED || TelemUART_HD_ENABLED)
 180:.\Generated_Source\PSoC4/TelemUART.c ****         /*RX Counter (Count7) Enable */
 181:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_RXBITCTR_CONTROL_REG |= TelemUART_CNTR_ENABLE;
 182:.\Generated_Source\PSoC4/TelemUART.c ****         /* Enable the RX Interrupt. */
 183:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_RXSTATUS_ACTL_REG  |= TelemUART_INT_ENABLE;
 184:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_RX_INTERRUPT_ENABLED && (TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH))
 185:.\Generated_Source\PSoC4/TelemUART.c ****             CyIntEnable(TelemUART_RX_VECT_NUM);
 186:.\Generated_Source\PSoC4/TelemUART.c ****             #if (TelemUART_RXHW_ADDRESS_ENABLED)
 187:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_rxAddressDetected = 0u;
 188:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_RXHW_ADDRESS_ENABLED */
 189:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_RX_INTERRUPT_ENABLED */
 190:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* End TelemUART_RX_ENABLED || TelemUART_HD_ENABLED*/
 191:.\Generated_Source\PSoC4/TelemUART.c **** 
 192:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_TX_ENABLED)
 193:.\Generated_Source\PSoC4/TelemUART.c ****         /*TX Counter (DP/Count7) Enable */
 194:.\Generated_Source\PSoC4/TelemUART.c ****         #if(!TelemUART_TXCLKGEN_DP)
 195:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_TXBITCTR_CONTROL_REG |= TelemUART_CNTR_ENABLE;
 196:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_TXCLKGEN_DP */
 197:.\Generated_Source\PSoC4/TelemUART.c ****         /* Enable the TX Interrupt. */
 198:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_TXSTATUS_ACTL_REG |= TelemUART_INT_ENABLE;
 137              		.loc 1 198 0
 138 0010 084B     		ldr	r3, .L9
 139 0012 084A     		ldr	r2, .L9
 140 0014 1278     		ldrb	r2, [r2]
 141 0016 D2B2     		uxtb	r2, r2
 142 0018 1021     		mov	r1, #16
 143 001a 0A43     		orr	r2, r1
 144 001c D2B2     		uxtb	r2, r2
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 7


 145 001e 1A70     		strb	r2, [r3]
 199:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_TX_INTERRUPT_ENABLED && (TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH))
 200:.\Generated_Source\PSoC4/TelemUART.c ****             CyIntEnable(TelemUART_TX_VECT_NUM);
 201:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_TX_INTERRUPT_ENABLED*/
 202:.\Generated_Source\PSoC4/TelemUART.c ****      #endif /* End TelemUART_TX_ENABLED */
 203:.\Generated_Source\PSoC4/TelemUART.c **** 
 204:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_INTERNAL_CLOCK_USED)
 205:.\Generated_Source\PSoC4/TelemUART.c ****         /* Enable the clock. */
 206:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_IntClock_Start();
 146              		.loc 1 206 0
 147 0020 FFF7FEFF 		bl	TelemUART_IntClock_Start
 207:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* End TelemUART_INTERNAL_CLOCK_USED */
 208:.\Generated_Source\PSoC4/TelemUART.c **** 
 209:.\Generated_Source\PSoC4/TelemUART.c ****     CyExitCriticalSection(enableInterrupts);
 148              		.loc 1 209 0
 149 0024 FB1D     		add	r3, r7, #7
 150 0026 1B78     		ldrb	r3, [r3]
 151 0028 181C     		mov	r0, r3
 152 002a FFF7FEFF 		bl	CyExitCriticalSection
 210:.\Generated_Source\PSoC4/TelemUART.c **** }
 153              		.loc 1 210 0
 154 002e BD46     		mov	sp, r7
 155 0030 03B0     		add	sp, sp, #12
 156              		@ sp needed for prologue
 157 0032 90BD     		pop	{r4, r7, pc}
 158              	.L10:
 159              		.align	2
 160              	.L9:
 161 0034 93000F40 		.word	1074725011
 162              		.cfi_endproc
 163              	.LFE2:
 164              		.size	TelemUART_Enable, .-TelemUART_Enable
 165              		.section	.text.TelemUART_Stop,"ax",%progbits
 166              		.align	2
 167              		.global	TelemUART_Stop
 168              		.code	16
 169              		.thumb_func
 170              		.type	TelemUART_Stop, %function
 171              	TelemUART_Stop:
 172              	.LFB3:
 211:.\Generated_Source\PSoC4/TelemUART.c **** 
 212:.\Generated_Source\PSoC4/TelemUART.c **** 
 213:.\Generated_Source\PSoC4/TelemUART.c **** /*******************************************************************************
 214:.\Generated_Source\PSoC4/TelemUART.c **** * Function Name: TelemUART_Stop
 215:.\Generated_Source\PSoC4/TelemUART.c **** ********************************************************************************
 216:.\Generated_Source\PSoC4/TelemUART.c **** *
 217:.\Generated_Source\PSoC4/TelemUART.c **** * Summary:
 218:.\Generated_Source\PSoC4/TelemUART.c **** *  Disable the UART component
 219:.\Generated_Source\PSoC4/TelemUART.c **** *
 220:.\Generated_Source\PSoC4/TelemUART.c **** * Parameters:
 221:.\Generated_Source\PSoC4/TelemUART.c **** *  None.
 222:.\Generated_Source\PSoC4/TelemUART.c **** *
 223:.\Generated_Source\PSoC4/TelemUART.c **** * Return:
 224:.\Generated_Source\PSoC4/TelemUART.c **** *  None.
 225:.\Generated_Source\PSoC4/TelemUART.c **** *
 226:.\Generated_Source\PSoC4/TelemUART.c **** *******************************************************************************/
 227:.\Generated_Source\PSoC4/TelemUART.c **** void TelemUART_Stop(void) 
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 8


 228:.\Generated_Source\PSoC4/TelemUART.c **** {
 173              		.loc 1 228 0
 174              		.cfi_startproc
 175 0000 90B5     		push	{r4, r7, lr}
 176              	.LCFI7:
 177              		.cfi_def_cfa_offset 12
 178              		.cfi_offset 4, -12
 179              		.cfi_offset 7, -8
 180              		.cfi_offset 14, -4
 181 0002 83B0     		sub	sp, sp, #12
 182              	.LCFI8:
 183              		.cfi_def_cfa_offset 24
 184 0004 00AF     		add	r7, sp, #0
 185              	.LCFI9:
 186              		.cfi_def_cfa_register 7
 229:.\Generated_Source\PSoC4/TelemUART.c ****     uint8 enableInterrupts;
 230:.\Generated_Source\PSoC4/TelemUART.c ****     enableInterrupts = CyEnterCriticalSection();
 187              		.loc 1 230 0
 188 0006 FC1D     		add	r4, r7, #7
 189 0008 FFF7FEFF 		bl	CyEnterCriticalSection
 190 000c 031C     		mov	r3, r0
 191 000e 2370     		strb	r3, [r4]
 231:.\Generated_Source\PSoC4/TelemUART.c **** 
 232:.\Generated_Source\PSoC4/TelemUART.c ****     /* Write Bit Counter Disable */
 233:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_RX_ENABLED || TelemUART_HD_ENABLED)
 234:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_RXBITCTR_CONTROL_REG &= (uint8)~TelemUART_CNTR_ENABLE;
 235:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* End TelemUART_RX_ENABLED */
 236:.\Generated_Source\PSoC4/TelemUART.c **** 
 237:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_TX_ENABLED)
 238:.\Generated_Source\PSoC4/TelemUART.c ****         #if(!TelemUART_TXCLKGEN_DP)
 239:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_TXBITCTR_CONTROL_REG &= (uint8)~TelemUART_CNTR_ENABLE;
 240:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_TXCLKGEN_DP */
 241:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* TelemUART_TX_ENABLED */
 242:.\Generated_Source\PSoC4/TelemUART.c **** 
 243:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_INTERNAL_CLOCK_USED)
 244:.\Generated_Source\PSoC4/TelemUART.c ****         /* Disable the clock. */
 245:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_IntClock_Stop();
 192              		.loc 1 245 0
 193 0010 FFF7FEFF 		bl	TelemUART_IntClock_Stop
 246:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* End TelemUART_INTERNAL_CLOCK_USED */
 247:.\Generated_Source\PSoC4/TelemUART.c **** 
 248:.\Generated_Source\PSoC4/TelemUART.c ****     /* Disable internal interrupt component */
 249:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_RX_ENABLED || TelemUART_HD_ENABLED)
 250:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_RXSTATUS_ACTL_REG  &= (uint8)~TelemUART_INT_ENABLE;
 251:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_RX_INTERRUPT_ENABLED && (TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH))
 252:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_DisableRxInt();
 253:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_RX_INTERRUPT_ENABLED */
 254:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* End TelemUART_RX_ENABLED */
 255:.\Generated_Source\PSoC4/TelemUART.c **** 
 256:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_TX_ENABLED)
 257:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_TXSTATUS_ACTL_REG &= (uint8)~TelemUART_INT_ENABLE;
 194              		.loc 1 257 0
 195 0014 074B     		ldr	r3, .L12
 196 0016 074A     		ldr	r2, .L12
 197 0018 1278     		ldrb	r2, [r2]
 198 001a D2B2     		uxtb	r2, r2
 199 001c 1021     		mov	r1, #16
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 9


 200 001e 8A43     		bic	r2, r1
 201 0020 D2B2     		uxtb	r2, r2
 202 0022 1A70     		strb	r2, [r3]
 258:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_TX_INTERRUPT_ENABLED && (TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH))
 259:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_DisableTxInt();
 260:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_TX_INTERRUPT_ENABLED */
 261:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* End TelemUART_TX_ENABLED */
 262:.\Generated_Source\PSoC4/TelemUART.c **** 
 263:.\Generated_Source\PSoC4/TelemUART.c ****     CyExitCriticalSection(enableInterrupts);
 203              		.loc 1 263 0
 204 0024 FB1D     		add	r3, r7, #7
 205 0026 1B78     		ldrb	r3, [r3]
 206 0028 181C     		mov	r0, r3
 207 002a FFF7FEFF 		bl	CyExitCriticalSection
 264:.\Generated_Source\PSoC4/TelemUART.c **** }
 208              		.loc 1 264 0
 209 002e BD46     		mov	sp, r7
 210 0030 03B0     		add	sp, sp, #12
 211              		@ sp needed for prologue
 212 0032 90BD     		pop	{r4, r7, pc}
 213              	.L13:
 214              		.align	2
 215              	.L12:
 216 0034 93000F40 		.word	1074725011
 217              		.cfi_endproc
 218              	.LFE3:
 219              		.size	TelemUART_Stop, .-TelemUART_Stop
 220              		.section	.text.TelemUART_ReadControlRegister,"ax",%progbits
 221              		.align	2
 222              		.global	TelemUART_ReadControlRegister
 223              		.code	16
 224              		.thumb_func
 225              		.type	TelemUART_ReadControlRegister, %function
 226              	TelemUART_ReadControlRegister:
 227              	.LFB4:
 265:.\Generated_Source\PSoC4/TelemUART.c **** 
 266:.\Generated_Source\PSoC4/TelemUART.c **** 
 267:.\Generated_Source\PSoC4/TelemUART.c **** /*******************************************************************************
 268:.\Generated_Source\PSoC4/TelemUART.c **** * Function Name: TelemUART_ReadControlRegister
 269:.\Generated_Source\PSoC4/TelemUART.c **** ********************************************************************************
 270:.\Generated_Source\PSoC4/TelemUART.c **** *
 271:.\Generated_Source\PSoC4/TelemUART.c **** * Summary:
 272:.\Generated_Source\PSoC4/TelemUART.c **** *  Read the current state of the control register
 273:.\Generated_Source\PSoC4/TelemUART.c **** *
 274:.\Generated_Source\PSoC4/TelemUART.c **** * Parameters:
 275:.\Generated_Source\PSoC4/TelemUART.c **** *  None.
 276:.\Generated_Source\PSoC4/TelemUART.c **** *
 277:.\Generated_Source\PSoC4/TelemUART.c **** * Return:
 278:.\Generated_Source\PSoC4/TelemUART.c **** *  Current state of the control register.
 279:.\Generated_Source\PSoC4/TelemUART.c **** *
 280:.\Generated_Source\PSoC4/TelemUART.c **** *******************************************************************************/
 281:.\Generated_Source\PSoC4/TelemUART.c **** uint8 TelemUART_ReadControlRegister(void) 
 282:.\Generated_Source\PSoC4/TelemUART.c **** {
 228              		.loc 1 282 0
 229              		.cfi_startproc
 230 0000 80B5     		push	{r7, lr}
 231              	.LCFI10:
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 10


 232              		.cfi_def_cfa_offset 8
 233              		.cfi_offset 7, -8
 234              		.cfi_offset 14, -4
 235 0002 00AF     		add	r7, sp, #0
 236              	.LCFI11:
 237              		.cfi_def_cfa_register 7
 283:.\Generated_Source\PSoC4/TelemUART.c ****     #if( TelemUART_CONTROL_REG_REMOVED )
 284:.\Generated_Source\PSoC4/TelemUART.c ****         return(0u);
 238              		.loc 1 284 0
 239 0004 0023     		mov	r3, #0
 285:.\Generated_Source\PSoC4/TelemUART.c ****     #else
 286:.\Generated_Source\PSoC4/TelemUART.c ****         return(TelemUART_CONTROL_REG);
 287:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* End TelemUART_CONTROL_REG_REMOVED */
 288:.\Generated_Source\PSoC4/TelemUART.c **** }
 240              		.loc 1 288 0
 241 0006 181C     		mov	r0, r3
 242 0008 BD46     		mov	sp, r7
 243              		@ sp needed for prologue
 244 000a 80BD     		pop	{r7, pc}
 245              		.cfi_endproc
 246              	.LFE4:
 247              		.size	TelemUART_ReadControlRegister, .-TelemUART_ReadControlRegister
 248              		.section	.text.TelemUART_WriteControlRegister,"ax",%progbits
 249              		.align	2
 250              		.global	TelemUART_WriteControlRegister
 251              		.code	16
 252              		.thumb_func
 253              		.type	TelemUART_WriteControlRegister, %function
 254              	TelemUART_WriteControlRegister:
 255              	.LFB5:
 289:.\Generated_Source\PSoC4/TelemUART.c **** 
 290:.\Generated_Source\PSoC4/TelemUART.c **** 
 291:.\Generated_Source\PSoC4/TelemUART.c **** /*******************************************************************************
 292:.\Generated_Source\PSoC4/TelemUART.c **** * Function Name: TelemUART_WriteControlRegister
 293:.\Generated_Source\PSoC4/TelemUART.c **** ********************************************************************************
 294:.\Generated_Source\PSoC4/TelemUART.c **** *
 295:.\Generated_Source\PSoC4/TelemUART.c **** * Summary:
 296:.\Generated_Source\PSoC4/TelemUART.c **** *  Writes an 8-bit value into the control register
 297:.\Generated_Source\PSoC4/TelemUART.c **** *
 298:.\Generated_Source\PSoC4/TelemUART.c **** * Parameters:
 299:.\Generated_Source\PSoC4/TelemUART.c **** *  control:  control register value
 300:.\Generated_Source\PSoC4/TelemUART.c **** *
 301:.\Generated_Source\PSoC4/TelemUART.c **** * Return:
 302:.\Generated_Source\PSoC4/TelemUART.c **** *  None.
 303:.\Generated_Source\PSoC4/TelemUART.c **** *
 304:.\Generated_Source\PSoC4/TelemUART.c **** *******************************************************************************/
 305:.\Generated_Source\PSoC4/TelemUART.c **** void  TelemUART_WriteControlRegister(uint8 control) 
 306:.\Generated_Source\PSoC4/TelemUART.c **** {
 256              		.loc 1 306 0
 257              		.cfi_startproc
 258 0000 80B5     		push	{r7, lr}
 259              	.LCFI12:
 260              		.cfi_def_cfa_offset 8
 261              		.cfi_offset 7, -8
 262              		.cfi_offset 14, -4
 263 0002 82B0     		sub	sp, sp, #8
 264              	.LCFI13:
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 11


 265              		.cfi_def_cfa_offset 16
 266 0004 00AF     		add	r7, sp, #0
 267              	.LCFI14:
 268              		.cfi_def_cfa_register 7
 269 0006 021C     		mov	r2, r0
 270 0008 FB1D     		add	r3, r7, #7
 271 000a 1A70     		strb	r2, [r3]
 307:.\Generated_Source\PSoC4/TelemUART.c ****     #if( TelemUART_CONTROL_REG_REMOVED )
 308:.\Generated_Source\PSoC4/TelemUART.c ****         if(control != 0u) { }      /* release compiler warning */
 309:.\Generated_Source\PSoC4/TelemUART.c ****     #else
 310:.\Generated_Source\PSoC4/TelemUART.c ****        TelemUART_CONTROL_REG = control;
 311:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* End TelemUART_CONTROL_REG_REMOVED */
 312:.\Generated_Source\PSoC4/TelemUART.c **** }
 272              		.loc 1 312 0
 273 000c BD46     		mov	sp, r7
 274 000e 02B0     		add	sp, sp, #8
 275              		@ sp needed for prologue
 276 0010 80BD     		pop	{r7, pc}
 277              		.cfi_endproc
 278              	.LFE5:
 279              		.size	TelemUART_WriteControlRegister, .-TelemUART_WriteControlRegister
 280 0012 C046     		.section	.text.TelemUART_SetTxInterruptMode,"ax",%progbits
 281              		.align	2
 282              		.global	TelemUART_SetTxInterruptMode
 283              		.code	16
 284              		.thumb_func
 285              		.type	TelemUART_SetTxInterruptMode, %function
 286              	TelemUART_SetTxInterruptMode:
 287              	.LFB6:
 313:.\Generated_Source\PSoC4/TelemUART.c **** 
 314:.\Generated_Source\PSoC4/TelemUART.c **** 
 315:.\Generated_Source\PSoC4/TelemUART.c **** #if(TelemUART_RX_ENABLED || TelemUART_HD_ENABLED)
 316:.\Generated_Source\PSoC4/TelemUART.c **** 
 317:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_RX_INTERRUPT_ENABLED)
 318:.\Generated_Source\PSoC4/TelemUART.c **** 
 319:.\Generated_Source\PSoC4/TelemUART.c ****         /*******************************************************************************
 320:.\Generated_Source\PSoC4/TelemUART.c ****         * Function Name: TelemUART_EnableRxInt
 321:.\Generated_Source\PSoC4/TelemUART.c ****         ********************************************************************************
 322:.\Generated_Source\PSoC4/TelemUART.c ****         *
 323:.\Generated_Source\PSoC4/TelemUART.c ****         * Summary:
 324:.\Generated_Source\PSoC4/TelemUART.c ****         *  Enable RX interrupt generation
 325:.\Generated_Source\PSoC4/TelemUART.c ****         *
 326:.\Generated_Source\PSoC4/TelemUART.c ****         * Parameters:
 327:.\Generated_Source\PSoC4/TelemUART.c ****         *  None.
 328:.\Generated_Source\PSoC4/TelemUART.c ****         *
 329:.\Generated_Source\PSoC4/TelemUART.c ****         * Return:
 330:.\Generated_Source\PSoC4/TelemUART.c ****         *  None.
 331:.\Generated_Source\PSoC4/TelemUART.c ****         *
 332:.\Generated_Source\PSoC4/TelemUART.c ****         * Theory:
 333:.\Generated_Source\PSoC4/TelemUART.c ****         *  Enable the interrupt output -or- the interrupt component itself
 334:.\Generated_Source\PSoC4/TelemUART.c ****         *
 335:.\Generated_Source\PSoC4/TelemUART.c ****         *******************************************************************************/
 336:.\Generated_Source\PSoC4/TelemUART.c ****         void TelemUART_EnableRxInt(void) 
 337:.\Generated_Source\PSoC4/TelemUART.c ****         {
 338:.\Generated_Source\PSoC4/TelemUART.c ****             CyIntEnable(TelemUART_RX_VECT_NUM);
 339:.\Generated_Source\PSoC4/TelemUART.c ****         }
 340:.\Generated_Source\PSoC4/TelemUART.c **** 
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 12


 341:.\Generated_Source\PSoC4/TelemUART.c **** 
 342:.\Generated_Source\PSoC4/TelemUART.c ****         /*******************************************************************************
 343:.\Generated_Source\PSoC4/TelemUART.c ****         * Function Name: TelemUART_DisableRxInt
 344:.\Generated_Source\PSoC4/TelemUART.c ****         ********************************************************************************
 345:.\Generated_Source\PSoC4/TelemUART.c ****         *
 346:.\Generated_Source\PSoC4/TelemUART.c ****         * Summary:
 347:.\Generated_Source\PSoC4/TelemUART.c ****         *  Disable RX interrupt generation
 348:.\Generated_Source\PSoC4/TelemUART.c ****         *
 349:.\Generated_Source\PSoC4/TelemUART.c ****         * Parameters:
 350:.\Generated_Source\PSoC4/TelemUART.c ****         *  None.
 351:.\Generated_Source\PSoC4/TelemUART.c ****         *
 352:.\Generated_Source\PSoC4/TelemUART.c ****         * Return:
 353:.\Generated_Source\PSoC4/TelemUART.c ****         *  None.
 354:.\Generated_Source\PSoC4/TelemUART.c ****         *
 355:.\Generated_Source\PSoC4/TelemUART.c ****         * Theory:
 356:.\Generated_Source\PSoC4/TelemUART.c ****         *  Disable the interrupt output -or- the interrupt component itself
 357:.\Generated_Source\PSoC4/TelemUART.c ****         *
 358:.\Generated_Source\PSoC4/TelemUART.c ****         *******************************************************************************/
 359:.\Generated_Source\PSoC4/TelemUART.c ****         void TelemUART_DisableRxInt(void) 
 360:.\Generated_Source\PSoC4/TelemUART.c ****         {
 361:.\Generated_Source\PSoC4/TelemUART.c ****             CyIntDisable(TelemUART_RX_VECT_NUM);
 362:.\Generated_Source\PSoC4/TelemUART.c ****         }
 363:.\Generated_Source\PSoC4/TelemUART.c **** 
 364:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* TelemUART_RX_INTERRUPT_ENABLED */
 365:.\Generated_Source\PSoC4/TelemUART.c **** 
 366:.\Generated_Source\PSoC4/TelemUART.c **** 
 367:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
 368:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_SetRxInterruptMode
 369:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
 370:.\Generated_Source\PSoC4/TelemUART.c ****     *
 371:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
 372:.\Generated_Source\PSoC4/TelemUART.c ****     *  Configure which status bits trigger an interrupt event
 373:.\Generated_Source\PSoC4/TelemUART.c ****     *
 374:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
 375:.\Generated_Source\PSoC4/TelemUART.c ****     *  IntSrc:  An or'd combination of the desired status bit masks (defined in
 376:.\Generated_Source\PSoC4/TelemUART.c ****     *           the header file)
 377:.\Generated_Source\PSoC4/TelemUART.c ****     *
 378:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
 379:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
 380:.\Generated_Source\PSoC4/TelemUART.c ****     *
 381:.\Generated_Source\PSoC4/TelemUART.c ****     * Theory:
 382:.\Generated_Source\PSoC4/TelemUART.c ****     *  Enables the output of specific status bits to the interrupt controller
 383:.\Generated_Source\PSoC4/TelemUART.c ****     *
 384:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
 385:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_SetRxInterruptMode(uint8 intSrc) 
 386:.\Generated_Source\PSoC4/TelemUART.c ****     {
 387:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_RXSTATUS_MASK_REG  = intSrc;
 388:.\Generated_Source\PSoC4/TelemUART.c ****     }
 389:.\Generated_Source\PSoC4/TelemUART.c **** 
 390:.\Generated_Source\PSoC4/TelemUART.c **** 
 391:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
 392:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_ReadRxData
 393:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
 394:.\Generated_Source\PSoC4/TelemUART.c ****     *
 395:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
 396:.\Generated_Source\PSoC4/TelemUART.c ****     *  Returns data in RX Data register without checking status register to
 397:.\Generated_Source\PSoC4/TelemUART.c ****     *  determine if data is valid
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 13


 398:.\Generated_Source\PSoC4/TelemUART.c ****     *
 399:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
 400:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
 401:.\Generated_Source\PSoC4/TelemUART.c ****     *
 402:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
 403:.\Generated_Source\PSoC4/TelemUART.c ****     *  Received data from RX register
 404:.\Generated_Source\PSoC4/TelemUART.c ****     *
 405:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
 406:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBuffer - RAM buffer pointer for save received data.
 407:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferWrite - cyclic index for write to rxBuffer,
 408:.\Generated_Source\PSoC4/TelemUART.c ****     *     checked to identify new data.
 409:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferRead - cyclic index for read from rxBuffer,
 410:.\Generated_Source\PSoC4/TelemUART.c ****     *     incremented after each byte has been read from buffer.
 411:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferLoopDetect - creared if loop condition was detected
 412:.\Generated_Source\PSoC4/TelemUART.c ****     *     in RX ISR.
 413:.\Generated_Source\PSoC4/TelemUART.c ****     *
 414:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
 415:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
 416:.\Generated_Source\PSoC4/TelemUART.c ****     *
 417:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
 418:.\Generated_Source\PSoC4/TelemUART.c ****     uint8 TelemUART_ReadRxData(void) 
 419:.\Generated_Source\PSoC4/TelemUART.c ****     {
 420:.\Generated_Source\PSoC4/TelemUART.c ****         uint8 rxData;
 421:.\Generated_Source\PSoC4/TelemUART.c **** 
 422:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH)
 423:.\Generated_Source\PSoC4/TelemUART.c ****             uint8 loc_rxBufferRead;
 424:.\Generated_Source\PSoC4/TelemUART.c ****             uint8 loc_rxBufferWrite;
 425:.\Generated_Source\PSoC4/TelemUART.c ****             /* Protect variables that could change on interrupt. */
 426:.\Generated_Source\PSoC4/TelemUART.c ****             /* Disable Rx interrupt. */
 427:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_RX_INTERRUPT_ENABLED)
 428:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_DisableRxInt();
 429:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* TelemUART_RX_INTERRUPT_ENABLED */
 430:.\Generated_Source\PSoC4/TelemUART.c ****             loc_rxBufferRead = TelemUART_rxBufferRead;
 431:.\Generated_Source\PSoC4/TelemUART.c ****             loc_rxBufferWrite = TelemUART_rxBufferWrite;
 432:.\Generated_Source\PSoC4/TelemUART.c **** 
 433:.\Generated_Source\PSoC4/TelemUART.c ****             if( (TelemUART_rxBufferLoopDetect != 0u) || (loc_rxBufferRead != loc_rxBufferWrite) )
 434:.\Generated_Source\PSoC4/TelemUART.c ****             {
 435:.\Generated_Source\PSoC4/TelemUART.c ****                 rxData = TelemUART_rxBuffer[loc_rxBufferRead];
 436:.\Generated_Source\PSoC4/TelemUART.c ****                 loc_rxBufferRead++;
 437:.\Generated_Source\PSoC4/TelemUART.c **** 
 438:.\Generated_Source\PSoC4/TelemUART.c ****                 if(loc_rxBufferRead >= TelemUART_RXBUFFERSIZE)
 439:.\Generated_Source\PSoC4/TelemUART.c ****                 {
 440:.\Generated_Source\PSoC4/TelemUART.c ****                     loc_rxBufferRead = 0u;
 441:.\Generated_Source\PSoC4/TelemUART.c ****                 }
 442:.\Generated_Source\PSoC4/TelemUART.c ****                 /* Update the real pointer */
 443:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_rxBufferRead = loc_rxBufferRead;
 444:.\Generated_Source\PSoC4/TelemUART.c **** 
 445:.\Generated_Source\PSoC4/TelemUART.c ****                 if(TelemUART_rxBufferLoopDetect != 0u )
 446:.\Generated_Source\PSoC4/TelemUART.c ****                 {
 447:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_rxBufferLoopDetect = 0u;
 448:.\Generated_Source\PSoC4/TelemUART.c ****                     #if( (TelemUART_RX_INTERRUPT_ENABLED) && (TelemUART_FLOW_CONTROL != 0u) && \
 449:.\Generated_Source\PSoC4/TelemUART.c ****                          (TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH) )
 450:.\Generated_Source\PSoC4/TelemUART.c ****                         /* When Hardware Flow Control selected - return RX mask */
 451:.\Generated_Source\PSoC4/TelemUART.c ****                         #if( TelemUART_HD_ENABLED )
 452:.\Generated_Source\PSoC4/TelemUART.c ****                             if((TelemUART_CONTROL_REG & TelemUART_CTRL_HD_SEND) == 0u)
 453:.\Generated_Source\PSoC4/TelemUART.c ****                             {   /* In Half duplex mode return RX mask only in RX
 454:.\Generated_Source\PSoC4/TelemUART.c ****                                 *  configuration set, otherwise
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 14


 455:.\Generated_Source\PSoC4/TelemUART.c ****                                 *  mask will be returned in LoadRxConfig() API.
 456:.\Generated_Source\PSoC4/TelemUART.c ****                                 */
 457:.\Generated_Source\PSoC4/TelemUART.c ****                                 TelemUART_RXSTATUS_MASK_REG  |= TelemUART_RX_STS_FIFO_NOTEMPTY;
 458:.\Generated_Source\PSoC4/TelemUART.c ****                             }
 459:.\Generated_Source\PSoC4/TelemUART.c ****                         #else
 460:.\Generated_Source\PSoC4/TelemUART.c ****                             TelemUART_RXSTATUS_MASK_REG  |= TelemUART_RX_STS_FIFO_NOTEMPTY;
 461:.\Generated_Source\PSoC4/TelemUART.c ****                         #endif /* end TelemUART_HD_ENABLED */
 462:.\Generated_Source\PSoC4/TelemUART.c ****                     #endif /* TelemUART_RX_INTERRUPT_ENABLED and Hardware flow control*/
 463:.\Generated_Source\PSoC4/TelemUART.c ****                 }
 464:.\Generated_Source\PSoC4/TelemUART.c ****             }
 465:.\Generated_Source\PSoC4/TelemUART.c ****             else
 466:.\Generated_Source\PSoC4/TelemUART.c ****             {   /* Needs to check status for RX_STS_FIFO_NOTEMPTY bit*/
 467:.\Generated_Source\PSoC4/TelemUART.c ****                 rxData = TelemUART_RXDATA_REG;
 468:.\Generated_Source\PSoC4/TelemUART.c ****             }
 469:.\Generated_Source\PSoC4/TelemUART.c **** 
 470:.\Generated_Source\PSoC4/TelemUART.c ****             /* Enable Rx interrupt. */
 471:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_RX_INTERRUPT_ENABLED)
 472:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_EnableRxInt();
 473:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_RX_INTERRUPT_ENABLED */
 474:.\Generated_Source\PSoC4/TelemUART.c **** 
 475:.\Generated_Source\PSoC4/TelemUART.c ****         #else /* TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH */
 476:.\Generated_Source\PSoC4/TelemUART.c **** 
 477:.\Generated_Source\PSoC4/TelemUART.c ****             /* Needs to check status for RX_STS_FIFO_NOTEMPTY bit*/
 478:.\Generated_Source\PSoC4/TelemUART.c ****             rxData = TelemUART_RXDATA_REG;
 479:.\Generated_Source\PSoC4/TelemUART.c **** 
 480:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH */
 481:.\Generated_Source\PSoC4/TelemUART.c **** 
 482:.\Generated_Source\PSoC4/TelemUART.c ****         return(rxData);
 483:.\Generated_Source\PSoC4/TelemUART.c ****     }
 484:.\Generated_Source\PSoC4/TelemUART.c **** 
 485:.\Generated_Source\PSoC4/TelemUART.c **** 
 486:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
 487:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_ReadRxStatus
 488:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
 489:.\Generated_Source\PSoC4/TelemUART.c ****     *
 490:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
 491:.\Generated_Source\PSoC4/TelemUART.c ****     *  Read the current state of the status register
 492:.\Generated_Source\PSoC4/TelemUART.c ****     *  And detect software buffer overflow.
 493:.\Generated_Source\PSoC4/TelemUART.c ****     *
 494:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
 495:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
 496:.\Generated_Source\PSoC4/TelemUART.c ****     *
 497:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
 498:.\Generated_Source\PSoC4/TelemUART.c ****     *  Current state of the status register.
 499:.\Generated_Source\PSoC4/TelemUART.c ****     *
 500:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
 501:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferOverflow - used to indicate overload condition.
 502:.\Generated_Source\PSoC4/TelemUART.c ****     *   It set to one in RX interrupt when there isn?t free space in
 503:.\Generated_Source\PSoC4/TelemUART.c ****     *   TelemUART_rxBufferRead to write new data. This condition returned
 504:.\Generated_Source\PSoC4/TelemUART.c ****     *   and cleared to zero by this API as an
 505:.\Generated_Source\PSoC4/TelemUART.c ****     *   TelemUART_RX_STS_SOFT_BUFF_OVER bit along with RX Status register
 506:.\Generated_Source\PSoC4/TelemUART.c ****     *   bits.
 507:.\Generated_Source\PSoC4/TelemUART.c ****     *
 508:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
 509:.\Generated_Source\PSoC4/TelemUART.c ****     uint8 TelemUART_ReadRxStatus(void) 
 510:.\Generated_Source\PSoC4/TelemUART.c ****     {
 511:.\Generated_Source\PSoC4/TelemUART.c ****         uint8 status;
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 15


 512:.\Generated_Source\PSoC4/TelemUART.c **** 
 513:.\Generated_Source\PSoC4/TelemUART.c ****         status = TelemUART_RXSTATUS_REG & TelemUART_RX_HW_MASK;
 514:.\Generated_Source\PSoC4/TelemUART.c **** 
 515:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH)
 516:.\Generated_Source\PSoC4/TelemUART.c ****             if( TelemUART_rxBufferOverflow != 0u )
 517:.\Generated_Source\PSoC4/TelemUART.c ****             {
 518:.\Generated_Source\PSoC4/TelemUART.c ****                 status |= TelemUART_RX_STS_SOFT_BUFF_OVER;
 519:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_rxBufferOverflow = 0u;
 520:.\Generated_Source\PSoC4/TelemUART.c ****             }
 521:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* TelemUART_RXBUFFERSIZE */
 522:.\Generated_Source\PSoC4/TelemUART.c **** 
 523:.\Generated_Source\PSoC4/TelemUART.c ****         return(status);
 524:.\Generated_Source\PSoC4/TelemUART.c ****     }
 525:.\Generated_Source\PSoC4/TelemUART.c **** 
 526:.\Generated_Source\PSoC4/TelemUART.c **** 
 527:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
 528:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_GetChar
 529:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
 530:.\Generated_Source\PSoC4/TelemUART.c ****     *
 531:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
 532:.\Generated_Source\PSoC4/TelemUART.c ****     *  Reads UART RX buffer immediately, if data is not available or an error
 533:.\Generated_Source\PSoC4/TelemUART.c ****     *  condition exists, zero is returned; otherwise, character is read and
 534:.\Generated_Source\PSoC4/TelemUART.c ****     *  returned.
 535:.\Generated_Source\PSoC4/TelemUART.c ****     *
 536:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
 537:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
 538:.\Generated_Source\PSoC4/TelemUART.c ****     *
 539:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
 540:.\Generated_Source\PSoC4/TelemUART.c ****     *  Character read from UART RX buffer. ASCII characters from 1 to 255 are valid.
 541:.\Generated_Source\PSoC4/TelemUART.c ****     *  A returned zero signifies an error condition or no data available.
 542:.\Generated_Source\PSoC4/TelemUART.c ****     *
 543:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
 544:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBuffer - RAM buffer pointer for save received data.
 545:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferWrite - cyclic index for write to rxBuffer,
 546:.\Generated_Source\PSoC4/TelemUART.c ****     *     checked to identify new data.
 547:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferRead - cyclic index for read from rxBuffer,
 548:.\Generated_Source\PSoC4/TelemUART.c ****     *     incremented after each byte has been read from buffer.
 549:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferLoopDetect - creared if loop condition was detected
 550:.\Generated_Source\PSoC4/TelemUART.c ****     *     in RX ISR.
 551:.\Generated_Source\PSoC4/TelemUART.c ****     *
 552:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
 553:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
 554:.\Generated_Source\PSoC4/TelemUART.c ****     *
 555:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
 556:.\Generated_Source\PSoC4/TelemUART.c ****     uint8 TelemUART_GetChar(void) 
 557:.\Generated_Source\PSoC4/TelemUART.c ****     {
 558:.\Generated_Source\PSoC4/TelemUART.c ****         uint8 rxData = 0u;
 559:.\Generated_Source\PSoC4/TelemUART.c ****         uint8 rxStatus;
 560:.\Generated_Source\PSoC4/TelemUART.c **** 
 561:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH)
 562:.\Generated_Source\PSoC4/TelemUART.c ****             uint8 loc_rxBufferRead;
 563:.\Generated_Source\PSoC4/TelemUART.c ****             uint8 loc_rxBufferWrite;
 564:.\Generated_Source\PSoC4/TelemUART.c ****             /* Protect variables that could change on interrupt. */
 565:.\Generated_Source\PSoC4/TelemUART.c ****             /* Disable Rx interrupt. */
 566:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_RX_INTERRUPT_ENABLED)
 567:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_DisableRxInt();
 568:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* TelemUART_RX_INTERRUPT_ENABLED */
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 16


 569:.\Generated_Source\PSoC4/TelemUART.c ****             loc_rxBufferRead = TelemUART_rxBufferRead;
 570:.\Generated_Source\PSoC4/TelemUART.c ****             loc_rxBufferWrite = TelemUART_rxBufferWrite;
 571:.\Generated_Source\PSoC4/TelemUART.c **** 
 572:.\Generated_Source\PSoC4/TelemUART.c ****             if( (TelemUART_rxBufferLoopDetect != 0u) || (loc_rxBufferRead != loc_rxBufferWrite) )
 573:.\Generated_Source\PSoC4/TelemUART.c ****             {
 574:.\Generated_Source\PSoC4/TelemUART.c ****                 rxData = TelemUART_rxBuffer[loc_rxBufferRead];
 575:.\Generated_Source\PSoC4/TelemUART.c ****                 loc_rxBufferRead++;
 576:.\Generated_Source\PSoC4/TelemUART.c ****                 if(loc_rxBufferRead >= TelemUART_RXBUFFERSIZE)
 577:.\Generated_Source\PSoC4/TelemUART.c ****                 {
 578:.\Generated_Source\PSoC4/TelemUART.c ****                     loc_rxBufferRead = 0u;
 579:.\Generated_Source\PSoC4/TelemUART.c ****                 }
 580:.\Generated_Source\PSoC4/TelemUART.c ****                 /* Update the real pointer */
 581:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_rxBufferRead = loc_rxBufferRead;
 582:.\Generated_Source\PSoC4/TelemUART.c **** 
 583:.\Generated_Source\PSoC4/TelemUART.c ****                 if(TelemUART_rxBufferLoopDetect > 0u )
 584:.\Generated_Source\PSoC4/TelemUART.c ****                 {
 585:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_rxBufferLoopDetect = 0u;
 586:.\Generated_Source\PSoC4/TelemUART.c ****                     #if( (TelemUART_RX_INTERRUPT_ENABLED) && (TelemUART_FLOW_CONTROL != 0u) )
 587:.\Generated_Source\PSoC4/TelemUART.c ****                         /* When Hardware Flow Control selected - return RX mask */
 588:.\Generated_Source\PSoC4/TelemUART.c ****                         #if( TelemUART_HD_ENABLED )
 589:.\Generated_Source\PSoC4/TelemUART.c ****                             if((TelemUART_CONTROL_REG & TelemUART_CTRL_HD_SEND) == 0u)
 590:.\Generated_Source\PSoC4/TelemUART.c ****                             {   /* In Half duplex mode return RX mask only if
 591:.\Generated_Source\PSoC4/TelemUART.c ****                                 *  RX configuration set, otherwise
 592:.\Generated_Source\PSoC4/TelemUART.c ****                                 *  mask will be returned in LoadRxConfig() API.
 593:.\Generated_Source\PSoC4/TelemUART.c ****                                 */
 594:.\Generated_Source\PSoC4/TelemUART.c ****                                 TelemUART_RXSTATUS_MASK_REG  |= TelemUART_RX_STS_FIFO_NOTEMPTY;
 595:.\Generated_Source\PSoC4/TelemUART.c ****                             }
 596:.\Generated_Source\PSoC4/TelemUART.c ****                         #else
 597:.\Generated_Source\PSoC4/TelemUART.c ****                             TelemUART_RXSTATUS_MASK_REG  |= TelemUART_RX_STS_FIFO_NOTEMPTY;
 598:.\Generated_Source\PSoC4/TelemUART.c ****                         #endif /* end TelemUART_HD_ENABLED */
 599:.\Generated_Source\PSoC4/TelemUART.c ****                     #endif /* TelemUART_RX_INTERRUPT_ENABLED and Hardware flow control*/
 600:.\Generated_Source\PSoC4/TelemUART.c ****                 }
 601:.\Generated_Source\PSoC4/TelemUART.c **** 
 602:.\Generated_Source\PSoC4/TelemUART.c ****             }
 603:.\Generated_Source\PSoC4/TelemUART.c ****             else
 604:.\Generated_Source\PSoC4/TelemUART.c ****             {   rxStatus = TelemUART_RXSTATUS_REG;
 605:.\Generated_Source\PSoC4/TelemUART.c ****                 if((rxStatus & TelemUART_RX_STS_FIFO_NOTEMPTY) != 0u)
 606:.\Generated_Source\PSoC4/TelemUART.c ****                 {   /* Read received data from FIFO*/
 607:.\Generated_Source\PSoC4/TelemUART.c ****                     rxData = TelemUART_RXDATA_REG;
 608:.\Generated_Source\PSoC4/TelemUART.c ****                     /*Check status on error*/
 609:.\Generated_Source\PSoC4/TelemUART.c ****                     if((rxStatus & (TelemUART_RX_STS_BREAK | TelemUART_RX_STS_PAR_ERROR |
 610:.\Generated_Source\PSoC4/TelemUART.c ****                                    TelemUART_RX_STS_STOP_ERROR | TelemUART_RX_STS_OVERRUN)) != 0u)
 611:.\Generated_Source\PSoC4/TelemUART.c ****                     {
 612:.\Generated_Source\PSoC4/TelemUART.c ****                         rxData = 0u;
 613:.\Generated_Source\PSoC4/TelemUART.c ****                     }
 614:.\Generated_Source\PSoC4/TelemUART.c ****                 }
 615:.\Generated_Source\PSoC4/TelemUART.c ****             }
 616:.\Generated_Source\PSoC4/TelemUART.c **** 
 617:.\Generated_Source\PSoC4/TelemUART.c ****             /* Enable Rx interrupt. */
 618:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_RX_INTERRUPT_ENABLED)
 619:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_EnableRxInt();
 620:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* TelemUART_RX_INTERRUPT_ENABLED */
 621:.\Generated_Source\PSoC4/TelemUART.c **** 
 622:.\Generated_Source\PSoC4/TelemUART.c ****         #else /* TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH */
 623:.\Generated_Source\PSoC4/TelemUART.c **** 
 624:.\Generated_Source\PSoC4/TelemUART.c ****             rxStatus =TelemUART_RXSTATUS_REG;
 625:.\Generated_Source\PSoC4/TelemUART.c ****             if((rxStatus & TelemUART_RX_STS_FIFO_NOTEMPTY) != 0u)
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 17


 626:.\Generated_Source\PSoC4/TelemUART.c ****             {   /* Read received data from FIFO*/
 627:.\Generated_Source\PSoC4/TelemUART.c ****                 rxData = TelemUART_RXDATA_REG;
 628:.\Generated_Source\PSoC4/TelemUART.c ****                 /*Check status on error*/
 629:.\Generated_Source\PSoC4/TelemUART.c ****                 if((rxStatus & (TelemUART_RX_STS_BREAK | TelemUART_RX_STS_PAR_ERROR |
 630:.\Generated_Source\PSoC4/TelemUART.c ****                                TelemUART_RX_STS_STOP_ERROR | TelemUART_RX_STS_OVERRUN)) != 0u)
 631:.\Generated_Source\PSoC4/TelemUART.c ****                 {
 632:.\Generated_Source\PSoC4/TelemUART.c ****                     rxData = 0u;
 633:.\Generated_Source\PSoC4/TelemUART.c ****                 }
 634:.\Generated_Source\PSoC4/TelemUART.c ****             }
 635:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH */
 636:.\Generated_Source\PSoC4/TelemUART.c **** 
 637:.\Generated_Source\PSoC4/TelemUART.c ****         return(rxData);
 638:.\Generated_Source\PSoC4/TelemUART.c ****     }
 639:.\Generated_Source\PSoC4/TelemUART.c **** 
 640:.\Generated_Source\PSoC4/TelemUART.c **** 
 641:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
 642:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_GetByte
 643:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
 644:.\Generated_Source\PSoC4/TelemUART.c ****     *
 645:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
 646:.\Generated_Source\PSoC4/TelemUART.c ****     *  Grab the next available byte of data from the recieve FIFO
 647:.\Generated_Source\PSoC4/TelemUART.c ****     *
 648:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
 649:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
 650:.\Generated_Source\PSoC4/TelemUART.c ****     *
 651:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
 652:.\Generated_Source\PSoC4/TelemUART.c ****     *  MSB contains Status Register and LSB contains UART RX data
 653:.\Generated_Source\PSoC4/TelemUART.c ****     *
 654:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
 655:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
 656:.\Generated_Source\PSoC4/TelemUART.c ****     *
 657:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
 658:.\Generated_Source\PSoC4/TelemUART.c ****     uint16 TelemUART_GetByte(void) 
 659:.\Generated_Source\PSoC4/TelemUART.c ****     {
 660:.\Generated_Source\PSoC4/TelemUART.c ****         return ( ((uint16)TelemUART_ReadRxStatus() << 8u) | TelemUART_ReadRxData() );
 661:.\Generated_Source\PSoC4/TelemUART.c ****     }
 662:.\Generated_Source\PSoC4/TelemUART.c **** 
 663:.\Generated_Source\PSoC4/TelemUART.c **** 
 664:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
 665:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_GetRxBufferSize
 666:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
 667:.\Generated_Source\PSoC4/TelemUART.c ****     *
 668:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
 669:.\Generated_Source\PSoC4/TelemUART.c ****     *  Determine the amount of bytes left in the RX buffer and return the count in
 670:.\Generated_Source\PSoC4/TelemUART.c ****     *  bytes
 671:.\Generated_Source\PSoC4/TelemUART.c ****     *
 672:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
 673:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
 674:.\Generated_Source\PSoC4/TelemUART.c ****     *
 675:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
 676:.\Generated_Source\PSoC4/TelemUART.c ****     *  uint8: Integer count of the number of bytes left
 677:.\Generated_Source\PSoC4/TelemUART.c ****     *  in the RX buffer
 678:.\Generated_Source\PSoC4/TelemUART.c ****     *
 679:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
 680:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferWrite - used to calculate left bytes.
 681:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferRead - used to calculate left bytes.
 682:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferLoopDetect - checked to decide left bytes amount.
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 18


 683:.\Generated_Source\PSoC4/TelemUART.c ****     *
 684:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
 685:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
 686:.\Generated_Source\PSoC4/TelemUART.c ****     *
 687:.\Generated_Source\PSoC4/TelemUART.c ****     * Theory:
 688:.\Generated_Source\PSoC4/TelemUART.c ****     *  Allows the user to find out how full the RX Buffer is.
 689:.\Generated_Source\PSoC4/TelemUART.c ****     *
 690:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
 691:.\Generated_Source\PSoC4/TelemUART.c ****     uint8 TelemUART_GetRxBufferSize(void)
 692:.\Generated_Source\PSoC4/TelemUART.c ****                                                             
 693:.\Generated_Source\PSoC4/TelemUART.c ****     {
 694:.\Generated_Source\PSoC4/TelemUART.c ****         uint8 size;
 695:.\Generated_Source\PSoC4/TelemUART.c **** 
 696:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH)
 697:.\Generated_Source\PSoC4/TelemUART.c **** 
 698:.\Generated_Source\PSoC4/TelemUART.c ****             /* Disable Rx interrupt. */
 699:.\Generated_Source\PSoC4/TelemUART.c ****             /* Protect variables that could change on interrupt. */
 700:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_RX_INTERRUPT_ENABLED)
 701:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_DisableRxInt();
 702:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* TelemUART_RX_INTERRUPT_ENABLED */
 703:.\Generated_Source\PSoC4/TelemUART.c **** 
 704:.\Generated_Source\PSoC4/TelemUART.c ****             if(TelemUART_rxBufferRead == TelemUART_rxBufferWrite)
 705:.\Generated_Source\PSoC4/TelemUART.c ****             {
 706:.\Generated_Source\PSoC4/TelemUART.c ****                 if(TelemUART_rxBufferLoopDetect > 0u)
 707:.\Generated_Source\PSoC4/TelemUART.c ****                 {
 708:.\Generated_Source\PSoC4/TelemUART.c ****                     size = TelemUART_RXBUFFERSIZE;
 709:.\Generated_Source\PSoC4/TelemUART.c ****                 }
 710:.\Generated_Source\PSoC4/TelemUART.c ****                 else
 711:.\Generated_Source\PSoC4/TelemUART.c ****                 {
 712:.\Generated_Source\PSoC4/TelemUART.c ****                     size = 0u;
 713:.\Generated_Source\PSoC4/TelemUART.c ****                 }
 714:.\Generated_Source\PSoC4/TelemUART.c ****             }
 715:.\Generated_Source\PSoC4/TelemUART.c ****             else if(TelemUART_rxBufferRead < TelemUART_rxBufferWrite)
 716:.\Generated_Source\PSoC4/TelemUART.c ****             {
 717:.\Generated_Source\PSoC4/TelemUART.c ****                 size = (TelemUART_rxBufferWrite - TelemUART_rxBufferRead);
 718:.\Generated_Source\PSoC4/TelemUART.c ****             }
 719:.\Generated_Source\PSoC4/TelemUART.c ****             else
 720:.\Generated_Source\PSoC4/TelemUART.c ****             {
 721:.\Generated_Source\PSoC4/TelemUART.c ****                 size = (TelemUART_RXBUFFERSIZE - TelemUART_rxBufferRead) + TelemUART_rxBufferWrite;
 722:.\Generated_Source\PSoC4/TelemUART.c ****             }
 723:.\Generated_Source\PSoC4/TelemUART.c **** 
 724:.\Generated_Source\PSoC4/TelemUART.c ****             /* Enable Rx interrupt. */
 725:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_RX_INTERRUPT_ENABLED)
 726:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_EnableRxInt();
 727:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_RX_INTERRUPT_ENABLED */
 728:.\Generated_Source\PSoC4/TelemUART.c **** 
 729:.\Generated_Source\PSoC4/TelemUART.c ****         #else /* TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH */
 730:.\Generated_Source\PSoC4/TelemUART.c **** 
 731:.\Generated_Source\PSoC4/TelemUART.c ****             /* We can only know if there is data in the fifo. */
 732:.\Generated_Source\PSoC4/TelemUART.c ****             size = ((TelemUART_RXSTATUS_REG & TelemUART_RX_STS_FIFO_NOTEMPTY) != 0u) ? 1u : 0u;
 733:.\Generated_Source\PSoC4/TelemUART.c **** 
 734:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH */
 735:.\Generated_Source\PSoC4/TelemUART.c **** 
 736:.\Generated_Source\PSoC4/TelemUART.c ****         return(size);
 737:.\Generated_Source\PSoC4/TelemUART.c ****     }
 738:.\Generated_Source\PSoC4/TelemUART.c **** 
 739:.\Generated_Source\PSoC4/TelemUART.c **** 
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 19


 740:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
 741:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_ClearRxBuffer
 742:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
 743:.\Generated_Source\PSoC4/TelemUART.c ****     *
 744:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
 745:.\Generated_Source\PSoC4/TelemUART.c ****     *  Clears the RX RAM buffer by setting the read and write pointers both to zero.
 746:.\Generated_Source\PSoC4/TelemUART.c ****     *  Clears hardware RX FIFO.
 747:.\Generated_Source\PSoC4/TelemUART.c ****     *
 748:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
 749:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
 750:.\Generated_Source\PSoC4/TelemUART.c ****     *
 751:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
 752:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
 753:.\Generated_Source\PSoC4/TelemUART.c ****     *
 754:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
 755:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferWrite - cleared to zero.
 756:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferRead - cleared to zero.
 757:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferLoopDetect - cleared to zero.
 758:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferOverflow - cleared to zero.
 759:.\Generated_Source\PSoC4/TelemUART.c ****     *
 760:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
 761:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
 762:.\Generated_Source\PSoC4/TelemUART.c ****     *
 763:.\Generated_Source\PSoC4/TelemUART.c ****     * Theory:
 764:.\Generated_Source\PSoC4/TelemUART.c ****     *  Setting the pointers to zero makes the system believe there is no data to
 765:.\Generated_Source\PSoC4/TelemUART.c ****     *  read and writing will resume at address 0 overwriting any data that may
 766:.\Generated_Source\PSoC4/TelemUART.c ****     *  have remained in the RAM.
 767:.\Generated_Source\PSoC4/TelemUART.c ****     *
 768:.\Generated_Source\PSoC4/TelemUART.c ****     * Side Effects:
 769:.\Generated_Source\PSoC4/TelemUART.c ****     *  Any received data not read from the RAM or FIFO buffer will be lost.
 770:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
 771:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_ClearRxBuffer(void) 
 772:.\Generated_Source\PSoC4/TelemUART.c ****     {
 773:.\Generated_Source\PSoC4/TelemUART.c ****         uint8 enableInterrupts;
 774:.\Generated_Source\PSoC4/TelemUART.c **** 
 775:.\Generated_Source\PSoC4/TelemUART.c ****         /* clear the HW FIFO */
 776:.\Generated_Source\PSoC4/TelemUART.c ****         /* Enter critical section */
 777:.\Generated_Source\PSoC4/TelemUART.c ****         enableInterrupts = CyEnterCriticalSection();
 778:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_RXDATA_AUX_CTL_REG |=  TelemUART_RX_FIFO_CLR;
 779:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_RXDATA_AUX_CTL_REG &= (uint8)~TelemUART_RX_FIFO_CLR;
 780:.\Generated_Source\PSoC4/TelemUART.c ****         /* Exit critical section */
 781:.\Generated_Source\PSoC4/TelemUART.c ****         CyExitCriticalSection(enableInterrupts);
 782:.\Generated_Source\PSoC4/TelemUART.c **** 
 783:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH)
 784:.\Generated_Source\PSoC4/TelemUART.c ****             /* Disable Rx interrupt. */
 785:.\Generated_Source\PSoC4/TelemUART.c ****             /* Protect variables that could change on interrupt. */
 786:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_RX_INTERRUPT_ENABLED)
 787:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_DisableRxInt();
 788:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_RX_INTERRUPT_ENABLED */
 789:.\Generated_Source\PSoC4/TelemUART.c **** 
 790:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_rxBufferRead = 0u;
 791:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_rxBufferWrite = 0u;
 792:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_rxBufferLoopDetect = 0u;
 793:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_rxBufferOverflow = 0u;
 794:.\Generated_Source\PSoC4/TelemUART.c **** 
 795:.\Generated_Source\PSoC4/TelemUART.c ****             /* Enable Rx interrupt. */
 796:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_RX_INTERRUPT_ENABLED)
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 20


 797:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_EnableRxInt();
 798:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_RX_INTERRUPT_ENABLED */
 799:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH */
 800:.\Generated_Source\PSoC4/TelemUART.c **** 
 801:.\Generated_Source\PSoC4/TelemUART.c ****     }
 802:.\Generated_Source\PSoC4/TelemUART.c **** 
 803:.\Generated_Source\PSoC4/TelemUART.c **** 
 804:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
 805:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_SetRxAddressMode
 806:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
 807:.\Generated_Source\PSoC4/TelemUART.c ****     *
 808:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
 809:.\Generated_Source\PSoC4/TelemUART.c ****     *  Set the receive addressing mode
 810:.\Generated_Source\PSoC4/TelemUART.c ****     *
 811:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
 812:.\Generated_Source\PSoC4/TelemUART.c ****     *  addressMode: Enumerated value indicating the mode of RX addressing
 813:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART__B_UART__AM_SW_BYTE_BYTE -  Software Byte-by-Byte address
 814:.\Generated_Source\PSoC4/TelemUART.c ****     *                                               detection
 815:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART__B_UART__AM_SW_DETECT_TO_BUFFER - Software Detect to Buffer
 816:.\Generated_Source\PSoC4/TelemUART.c ****     *                                               address detection
 817:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART__B_UART__AM_HW_BYTE_BY_BYTE - Hardware Byte-by-Byte address
 818:.\Generated_Source\PSoC4/TelemUART.c ****     *                                               detection
 819:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART__B_UART__AM_HW_DETECT_TO_BUFFER - Hardware Detect to Buffer
 820:.\Generated_Source\PSoC4/TelemUART.c ****     *                                               address detection
 821:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART__B_UART__AM_NONE - No address detection
 822:.\Generated_Source\PSoC4/TelemUART.c ****     *
 823:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
 824:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
 825:.\Generated_Source\PSoC4/TelemUART.c ****     *
 826:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
 827:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxAddressMode - the parameter stored in this variable for
 828:.\Generated_Source\PSoC4/TelemUART.c ****     *   the farther usage in RX ISR.
 829:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxAddressDetected - set to initial state (0).
 830:.\Generated_Source\PSoC4/TelemUART.c ****     *
 831:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
 832:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_SetRxAddressMode(uint8 addressMode)
 833:.\Generated_Source\PSoC4/TelemUART.c ****                                                         
 834:.\Generated_Source\PSoC4/TelemUART.c ****     {
 835:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_RXHW_ADDRESS_ENABLED)
 836:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_CONTROL_REG_REMOVED)
 837:.\Generated_Source\PSoC4/TelemUART.c ****                 if(addressMode != 0u) { }     /* release compiler warning */
 838:.\Generated_Source\PSoC4/TelemUART.c ****             #else /* TelemUART_CONTROL_REG_REMOVED */
 839:.\Generated_Source\PSoC4/TelemUART.c ****                 uint8 tmpCtrl;
 840:.\Generated_Source\PSoC4/TelemUART.c ****                 tmpCtrl = TelemUART_CONTROL_REG & (uint8)~TelemUART_CTRL_RXADDR_MODE_MASK;
 841:.\Generated_Source\PSoC4/TelemUART.c ****                 tmpCtrl |= (uint8)(addressMode << TelemUART_CTRL_RXADDR_MODE0_SHIFT);
 842:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_CONTROL_REG = tmpCtrl;
 843:.\Generated_Source\PSoC4/TelemUART.c ****                 #if(TelemUART_RX_INTERRUPT_ENABLED && \
 844:.\Generated_Source\PSoC4/TelemUART.c ****                    (TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH) )
 845:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_rxAddressMode = addressMode;
 846:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_rxAddressDetected = 0u;
 847:.\Generated_Source\PSoC4/TelemUART.c ****                 #endif /* End TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH*/
 848:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_CONTROL_REG_REMOVED */
 849:.\Generated_Source\PSoC4/TelemUART.c ****         #else /* TelemUART_RXHW_ADDRESS_ENABLED */
 850:.\Generated_Source\PSoC4/TelemUART.c ****             if(addressMode != 0u) { }     /* release compiler warning */
 851:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_RXHW_ADDRESS_ENABLED */
 852:.\Generated_Source\PSoC4/TelemUART.c ****     }
 853:.\Generated_Source\PSoC4/TelemUART.c **** 
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 21


 854:.\Generated_Source\PSoC4/TelemUART.c **** 
 855:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
 856:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_SetRxAddress1
 857:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
 858:.\Generated_Source\PSoC4/TelemUART.c ****     *
 859:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
 860:.\Generated_Source\PSoC4/TelemUART.c ****     *  Set the first hardware address compare value
 861:.\Generated_Source\PSoC4/TelemUART.c ****     *
 862:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
 863:.\Generated_Source\PSoC4/TelemUART.c ****     *  address
 864:.\Generated_Source\PSoC4/TelemUART.c ****     *
 865:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
 866:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
 867:.\Generated_Source\PSoC4/TelemUART.c ****     *
 868:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
 869:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_SetRxAddress1(uint8 address) 
 870:.\Generated_Source\PSoC4/TelemUART.c **** 
 871:.\Generated_Source\PSoC4/TelemUART.c ****     {
 872:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_RXADDRESS1_REG = address;
 873:.\Generated_Source\PSoC4/TelemUART.c ****     }
 874:.\Generated_Source\PSoC4/TelemUART.c **** 
 875:.\Generated_Source\PSoC4/TelemUART.c **** 
 876:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
 877:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_SetRxAddress2
 878:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
 879:.\Generated_Source\PSoC4/TelemUART.c ****     *
 880:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
 881:.\Generated_Source\PSoC4/TelemUART.c ****     *  Set the second hardware address compare value
 882:.\Generated_Source\PSoC4/TelemUART.c ****     *
 883:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
 884:.\Generated_Source\PSoC4/TelemUART.c ****     *  address
 885:.\Generated_Source\PSoC4/TelemUART.c ****     *
 886:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
 887:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
 888:.\Generated_Source\PSoC4/TelemUART.c ****     *
 889:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
 890:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_SetRxAddress2(uint8 address) 
 891:.\Generated_Source\PSoC4/TelemUART.c ****     {
 892:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_RXADDRESS2_REG = address;
 893:.\Generated_Source\PSoC4/TelemUART.c ****     }
 894:.\Generated_Source\PSoC4/TelemUART.c **** 
 895:.\Generated_Source\PSoC4/TelemUART.c **** #endif  /* TelemUART_RX_ENABLED || TelemUART_HD_ENABLED*/
 896:.\Generated_Source\PSoC4/TelemUART.c **** 
 897:.\Generated_Source\PSoC4/TelemUART.c **** 
 898:.\Generated_Source\PSoC4/TelemUART.c **** #if( (TelemUART_TX_ENABLED) || (TelemUART_HD_ENABLED) )
 899:.\Generated_Source\PSoC4/TelemUART.c **** 
 900:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_TX_INTERRUPT_ENABLED)
 901:.\Generated_Source\PSoC4/TelemUART.c **** 
 902:.\Generated_Source\PSoC4/TelemUART.c ****         /*******************************************************************************
 903:.\Generated_Source\PSoC4/TelemUART.c ****         * Function Name: TelemUART_EnableTxInt
 904:.\Generated_Source\PSoC4/TelemUART.c ****         ********************************************************************************
 905:.\Generated_Source\PSoC4/TelemUART.c ****         *
 906:.\Generated_Source\PSoC4/TelemUART.c ****         * Summary:
 907:.\Generated_Source\PSoC4/TelemUART.c ****         *  Enable TX interrupt generation
 908:.\Generated_Source\PSoC4/TelemUART.c ****         *
 909:.\Generated_Source\PSoC4/TelemUART.c ****         * Parameters:
 910:.\Generated_Source\PSoC4/TelemUART.c ****         *  None.
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 22


 911:.\Generated_Source\PSoC4/TelemUART.c ****         *
 912:.\Generated_Source\PSoC4/TelemUART.c ****         * Return:
 913:.\Generated_Source\PSoC4/TelemUART.c ****         *  None.
 914:.\Generated_Source\PSoC4/TelemUART.c ****         *
 915:.\Generated_Source\PSoC4/TelemUART.c ****         * Theory:
 916:.\Generated_Source\PSoC4/TelemUART.c ****         *  Enable the interrupt output -or- the interrupt component itself
 917:.\Generated_Source\PSoC4/TelemUART.c ****         *
 918:.\Generated_Source\PSoC4/TelemUART.c ****         *******************************************************************************/
 919:.\Generated_Source\PSoC4/TelemUART.c ****         void TelemUART_EnableTxInt(void) 
 920:.\Generated_Source\PSoC4/TelemUART.c ****         {
 921:.\Generated_Source\PSoC4/TelemUART.c ****             CyIntEnable(TelemUART_TX_VECT_NUM);
 922:.\Generated_Source\PSoC4/TelemUART.c ****         }
 923:.\Generated_Source\PSoC4/TelemUART.c **** 
 924:.\Generated_Source\PSoC4/TelemUART.c **** 
 925:.\Generated_Source\PSoC4/TelemUART.c ****         /*******************************************************************************
 926:.\Generated_Source\PSoC4/TelemUART.c ****         * Function Name: TelemUART_DisableTxInt
 927:.\Generated_Source\PSoC4/TelemUART.c ****         ********************************************************************************
 928:.\Generated_Source\PSoC4/TelemUART.c ****         *
 929:.\Generated_Source\PSoC4/TelemUART.c ****         * Summary:
 930:.\Generated_Source\PSoC4/TelemUART.c ****         *  Disable TX interrupt generation
 931:.\Generated_Source\PSoC4/TelemUART.c ****         *
 932:.\Generated_Source\PSoC4/TelemUART.c ****         * Parameters:
 933:.\Generated_Source\PSoC4/TelemUART.c ****         *  None.
 934:.\Generated_Source\PSoC4/TelemUART.c ****         *
 935:.\Generated_Source\PSoC4/TelemUART.c ****         * Return:
 936:.\Generated_Source\PSoC4/TelemUART.c ****         *  None.
 937:.\Generated_Source\PSoC4/TelemUART.c ****         *
 938:.\Generated_Source\PSoC4/TelemUART.c ****         * Theory:
 939:.\Generated_Source\PSoC4/TelemUART.c ****         *  Disable the interrupt output -or- the interrupt component itself
 940:.\Generated_Source\PSoC4/TelemUART.c ****         *
 941:.\Generated_Source\PSoC4/TelemUART.c ****         *******************************************************************************/
 942:.\Generated_Source\PSoC4/TelemUART.c ****         void TelemUART_DisableTxInt(void) 
 943:.\Generated_Source\PSoC4/TelemUART.c ****         {
 944:.\Generated_Source\PSoC4/TelemUART.c ****             CyIntDisable(TelemUART_TX_VECT_NUM);
 945:.\Generated_Source\PSoC4/TelemUART.c ****         }
 946:.\Generated_Source\PSoC4/TelemUART.c **** 
 947:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* TelemUART_TX_INTERRUPT_ENABLED */
 948:.\Generated_Source\PSoC4/TelemUART.c **** 
 949:.\Generated_Source\PSoC4/TelemUART.c **** 
 950:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
 951:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_SetTxInterruptMode
 952:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
 953:.\Generated_Source\PSoC4/TelemUART.c ****     *
 954:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
 955:.\Generated_Source\PSoC4/TelemUART.c ****     *  Configure which status bits trigger an interrupt event
 956:.\Generated_Source\PSoC4/TelemUART.c ****     *
 957:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
 958:.\Generated_Source\PSoC4/TelemUART.c ****     *  intSrc: An or'd combination of the desired status bit masks (defined in
 959:.\Generated_Source\PSoC4/TelemUART.c ****     *          the header file)
 960:.\Generated_Source\PSoC4/TelemUART.c ****     *
 961:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
 962:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
 963:.\Generated_Source\PSoC4/TelemUART.c ****     *
 964:.\Generated_Source\PSoC4/TelemUART.c ****     * Theory:
 965:.\Generated_Source\PSoC4/TelemUART.c ****     *  Enables the output of specific status bits to the interrupt controller
 966:.\Generated_Source\PSoC4/TelemUART.c ****     *
 967:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 23


 968:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_SetTxInterruptMode(uint8 intSrc) 
 969:.\Generated_Source\PSoC4/TelemUART.c ****     {
 288              		.loc 1 969 0
 289              		.cfi_startproc
 290 0000 80B5     		push	{r7, lr}
 291              	.LCFI15:
 292              		.cfi_def_cfa_offset 8
 293              		.cfi_offset 7, -8
 294              		.cfi_offset 14, -4
 295 0002 82B0     		sub	sp, sp, #8
 296              	.LCFI16:
 297              		.cfi_def_cfa_offset 16
 298 0004 00AF     		add	r7, sp, #0
 299              	.LCFI17:
 300              		.cfi_def_cfa_register 7
 301 0006 021C     		mov	r2, r0
 302 0008 FB1D     		add	r3, r7, #7
 303 000a 1A70     		strb	r2, [r3]
 970:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_TXSTATUS_MASK_REG = intSrc;
 304              		.loc 1 970 0
 305 000c 034B     		ldr	r3, .L18
 306 000e FA1D     		add	r2, r7, #7
 307 0010 1278     		ldrb	r2, [r2]
 308 0012 1A70     		strb	r2, [r3]
 971:.\Generated_Source\PSoC4/TelemUART.c ****     }
 309              		.loc 1 971 0
 310 0014 BD46     		mov	sp, r7
 311 0016 02B0     		add	sp, sp, #8
 312              		@ sp needed for prologue
 313 0018 80BD     		pop	{r7, pc}
 314              	.L19:
 315 001a C046     		.align	2
 316              	.L18:
 317 001c 83000F40 		.word	1074724995
 318              		.cfi_endproc
 319              	.LFE6:
 320              		.size	TelemUART_SetTxInterruptMode, .-TelemUART_SetTxInterruptMode
 321              		.section	.text.TelemUART_WriteTxData,"ax",%progbits
 322              		.align	2
 323              		.global	TelemUART_WriteTxData
 324              		.code	16
 325              		.thumb_func
 326              		.type	TelemUART_WriteTxData, %function
 327              	TelemUART_WriteTxData:
 328              	.LFB7:
 972:.\Generated_Source\PSoC4/TelemUART.c **** 
 973:.\Generated_Source\PSoC4/TelemUART.c **** 
 974:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
 975:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_WriteTxData
 976:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
 977:.\Generated_Source\PSoC4/TelemUART.c ****     *
 978:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
 979:.\Generated_Source\PSoC4/TelemUART.c ****     *  Write a byte of data to the Transmit FIFO or TX buffer to be sent when the
 980:.\Generated_Source\PSoC4/TelemUART.c ****     *  bus is available. WriteTxData sends a byte without checking for buffer room
 981:.\Generated_Source\PSoC4/TelemUART.c ****     *  or status. It is up to the user to separately check status.
 982:.\Generated_Source\PSoC4/TelemUART.c ****     *
 983:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 24


 984:.\Generated_Source\PSoC4/TelemUART.c ****     *  TXDataByte: byte of data to place in the transmit FIFO
 985:.\Generated_Source\PSoC4/TelemUART.c ****     *
 986:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
 987:.\Generated_Source\PSoC4/TelemUART.c ****     * void
 988:.\Generated_Source\PSoC4/TelemUART.c ****     *
 989:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
 990:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_txBuffer - RAM buffer pointer for save data for transmission
 991:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_txBufferWrite - cyclic index for write to txBuffer,
 992:.\Generated_Source\PSoC4/TelemUART.c ****     *    incremented after each byte saved to buffer.
 993:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_txBufferRead - cyclic index for read from txBuffer,
 994:.\Generated_Source\PSoC4/TelemUART.c ****     *    checked to identify the condition to write to FIFO directly or to TX buffer
 995:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_initVar - checked to identify that the component has been
 996:.\Generated_Source\PSoC4/TelemUART.c ****     *    initialized.
 997:.\Generated_Source\PSoC4/TelemUART.c ****     *
 998:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
 999:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
1000:.\Generated_Source\PSoC4/TelemUART.c ****     *
1001:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
1002:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_WriteTxData(uint8 txDataByte) 
1003:.\Generated_Source\PSoC4/TelemUART.c ****     {
 329              		.loc 1 1003 0
 330              		.cfi_startproc
 331 0000 80B5     		push	{r7, lr}
 332              	.LCFI18:
 333              		.cfi_def_cfa_offset 8
 334              		.cfi_offset 7, -8
 335              		.cfi_offset 14, -4
 336 0002 82B0     		sub	sp, sp, #8
 337              	.LCFI19:
 338              		.cfi_def_cfa_offset 16
 339 0004 00AF     		add	r7, sp, #0
 340              	.LCFI20:
 341              		.cfi_def_cfa_register 7
 342 0006 021C     		mov	r2, r0
 343 0008 FB1D     		add	r3, r7, #7
 344 000a 1A70     		strb	r2, [r3]
1004:.\Generated_Source\PSoC4/TelemUART.c ****         /* If not Initialized then skip this function*/
1005:.\Generated_Source\PSoC4/TelemUART.c ****         if(TelemUART_initVar != 0u)
 345              		.loc 1 1005 0
 346 000c 054B     		ldr	r3, .L22
 347 000e 1B78     		ldrb	r3, [r3]
 348 0010 002B     		cmp	r3, #0
 349 0012 03D0     		beq	.L20
1006:.\Generated_Source\PSoC4/TelemUART.c ****         {
1007:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH)
1008:.\Generated_Source\PSoC4/TelemUART.c **** 
1009:.\Generated_Source\PSoC4/TelemUART.c ****                 /* Disable Tx interrupt. */
1010:.\Generated_Source\PSoC4/TelemUART.c ****                 /* Protect variables that could change on interrupt. */
1011:.\Generated_Source\PSoC4/TelemUART.c ****                 #if(TelemUART_TX_INTERRUPT_ENABLED)
1012:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_DisableTxInt();
1013:.\Generated_Source\PSoC4/TelemUART.c ****                 #endif /* End TelemUART_TX_INTERRUPT_ENABLED */
1014:.\Generated_Source\PSoC4/TelemUART.c **** 
1015:.\Generated_Source\PSoC4/TelemUART.c ****                 if( (TelemUART_txBufferRead == TelemUART_txBufferWrite) &&
1016:.\Generated_Source\PSoC4/TelemUART.c ****                     ((TelemUART_TXSTATUS_REG & TelemUART_TX_STS_FIFO_FULL) == 0u) )
1017:.\Generated_Source\PSoC4/TelemUART.c ****                 {
1018:.\Generated_Source\PSoC4/TelemUART.c ****                     /* Add directly to the FIFO. */
1019:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_TXDATA_REG = txDataByte;
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 25


1020:.\Generated_Source\PSoC4/TelemUART.c ****                 }
1021:.\Generated_Source\PSoC4/TelemUART.c ****                 else
1022:.\Generated_Source\PSoC4/TelemUART.c ****                 {
1023:.\Generated_Source\PSoC4/TelemUART.c ****                     if(TelemUART_txBufferWrite >= TelemUART_TXBUFFERSIZE)
1024:.\Generated_Source\PSoC4/TelemUART.c ****                     {
1025:.\Generated_Source\PSoC4/TelemUART.c ****                         TelemUART_txBufferWrite = 0u;
1026:.\Generated_Source\PSoC4/TelemUART.c ****                     }
1027:.\Generated_Source\PSoC4/TelemUART.c **** 
1028:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_txBuffer[TelemUART_txBufferWrite] = txDataByte;
1029:.\Generated_Source\PSoC4/TelemUART.c **** 
1030:.\Generated_Source\PSoC4/TelemUART.c ****                     /* Add to the software buffer. */
1031:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_txBufferWrite++;
1032:.\Generated_Source\PSoC4/TelemUART.c **** 
1033:.\Generated_Source\PSoC4/TelemUART.c ****                 }
1034:.\Generated_Source\PSoC4/TelemUART.c **** 
1035:.\Generated_Source\PSoC4/TelemUART.c ****                 /* Enable Tx interrupt. */
1036:.\Generated_Source\PSoC4/TelemUART.c ****                 #if(TelemUART_TX_INTERRUPT_ENABLED)
1037:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_EnableTxInt();
1038:.\Generated_Source\PSoC4/TelemUART.c ****                 #endif /* End TelemUART_TX_INTERRUPT_ENABLED */
1039:.\Generated_Source\PSoC4/TelemUART.c **** 
1040:.\Generated_Source\PSoC4/TelemUART.c ****             #else /* TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH */
1041:.\Generated_Source\PSoC4/TelemUART.c **** 
1042:.\Generated_Source\PSoC4/TelemUART.c ****                 /* Add directly to the FIFO. */
1043:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_TXDATA_REG = txDataByte;
 350              		.loc 1 1043 0
 351 0014 044B     		ldr	r3, .L22+4
 352 0016 FA1D     		add	r2, r7, #7
 353 0018 1278     		ldrb	r2, [r2]
 354 001a 1A70     		strb	r2, [r3]
 355              	.L20:
1044:.\Generated_Source\PSoC4/TelemUART.c **** 
1045:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH */
1046:.\Generated_Source\PSoC4/TelemUART.c ****         }
1047:.\Generated_Source\PSoC4/TelemUART.c ****     }
 356              		.loc 1 1047 0
 357 001c BD46     		mov	sp, r7
 358 001e 02B0     		add	sp, sp, #8
 359              		@ sp needed for prologue
 360 0020 80BD     		pop	{r7, pc}
 361              	.L23:
 362 0022 C046     		.align	2
 363              	.L22:
 364 0024 00000000 		.word	TelemUART_initVar
 365 0028 43000F40 		.word	1074724931
 366              		.cfi_endproc
 367              	.LFE7:
 368              		.size	TelemUART_WriteTxData, .-TelemUART_WriteTxData
 369              		.section	.text.TelemUART_ReadTxStatus,"ax",%progbits
 370              		.align	2
 371              		.global	TelemUART_ReadTxStatus
 372              		.code	16
 373              		.thumb_func
 374              		.type	TelemUART_ReadTxStatus, %function
 375              	TelemUART_ReadTxStatus:
 376              	.LFB8:
1048:.\Generated_Source\PSoC4/TelemUART.c **** 
1049:.\Generated_Source\PSoC4/TelemUART.c **** 
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 26


1050:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
1051:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_ReadTxStatus
1052:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
1053:.\Generated_Source\PSoC4/TelemUART.c ****     *
1054:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
1055:.\Generated_Source\PSoC4/TelemUART.c ****     *  Read the status register for the component
1056:.\Generated_Source\PSoC4/TelemUART.c ****     *
1057:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
1058:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
1059:.\Generated_Source\PSoC4/TelemUART.c ****     *
1060:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
1061:.\Generated_Source\PSoC4/TelemUART.c ****     *  Contents of the status register
1062:.\Generated_Source\PSoC4/TelemUART.c ****     *
1063:.\Generated_Source\PSoC4/TelemUART.c ****     * Theory:
1064:.\Generated_Source\PSoC4/TelemUART.c ****     *  This function reads the status register which is clear on read. It is up to
1065:.\Generated_Source\PSoC4/TelemUART.c ****     *  the user to handle all bits in this return value accordingly, even if the bit
1066:.\Generated_Source\PSoC4/TelemUART.c ****     *  was not enabled as an interrupt source the event happened and must be handled
1067:.\Generated_Source\PSoC4/TelemUART.c ****     *  accordingly.
1068:.\Generated_Source\PSoC4/TelemUART.c ****     *
1069:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
1070:.\Generated_Source\PSoC4/TelemUART.c ****     uint8 TelemUART_ReadTxStatus(void) 
1071:.\Generated_Source\PSoC4/TelemUART.c ****     {
 377              		.loc 1 1071 0
 378              		.cfi_startproc
 379 0000 80B5     		push	{r7, lr}
 380              	.LCFI21:
 381              		.cfi_def_cfa_offset 8
 382              		.cfi_offset 7, -8
 383              		.cfi_offset 14, -4
 384 0002 00AF     		add	r7, sp, #0
 385              	.LCFI22:
 386              		.cfi_def_cfa_register 7
1072:.\Generated_Source\PSoC4/TelemUART.c ****         return(TelemUART_TXSTATUS_REG);
 387              		.loc 1 1072 0
 388 0004 024B     		ldr	r3, .L26
 389 0006 1B78     		ldrb	r3, [r3]
 390 0008 DBB2     		uxtb	r3, r3
1073:.\Generated_Source\PSoC4/TelemUART.c ****     }
 391              		.loc 1 1073 0
 392 000a 181C     		mov	r0, r3
 393 000c BD46     		mov	sp, r7
 394              		@ sp needed for prologue
 395 000e 80BD     		pop	{r7, pc}
 396              	.L27:
 397              		.align	2
 398              	.L26:
 399 0010 63000F40 		.word	1074724963
 400              		.cfi_endproc
 401              	.LFE8:
 402              		.size	TelemUART_ReadTxStatus, .-TelemUART_ReadTxStatus
 403              		.section	.text.TelemUART_PutChar,"ax",%progbits
 404              		.align	2
 405              		.global	TelemUART_PutChar
 406              		.code	16
 407              		.thumb_func
 408              		.type	TelemUART_PutChar, %function
 409              	TelemUART_PutChar:
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 27


 410              	.LFB9:
1074:.\Generated_Source\PSoC4/TelemUART.c **** 
1075:.\Generated_Source\PSoC4/TelemUART.c **** 
1076:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
1077:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_PutChar
1078:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
1079:.\Generated_Source\PSoC4/TelemUART.c ****     *
1080:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
1081:.\Generated_Source\PSoC4/TelemUART.c ****     *  Wait to send byte until TX register or buffer has room.
1082:.\Generated_Source\PSoC4/TelemUART.c ****     *
1083:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
1084:.\Generated_Source\PSoC4/TelemUART.c ****     *  txDataByte: The 8-bit data value to send across the UART.
1085:.\Generated_Source\PSoC4/TelemUART.c ****     *
1086:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
1087:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
1088:.\Generated_Source\PSoC4/TelemUART.c ****     *
1089:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
1090:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_txBuffer - RAM buffer pointer for save data for transmission
1091:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_txBufferWrite - cyclic index for write to txBuffer,
1092:.\Generated_Source\PSoC4/TelemUART.c ****     *     checked to identify free space in txBuffer and incremented after each byte
1093:.\Generated_Source\PSoC4/TelemUART.c ****     *     saved to buffer.
1094:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_txBufferRead - cyclic index for read from txBuffer,
1095:.\Generated_Source\PSoC4/TelemUART.c ****     *     checked to identify free space in txBuffer.
1096:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_initVar - checked to identify that the component has been
1097:.\Generated_Source\PSoC4/TelemUART.c ****     *     initialized.
1098:.\Generated_Source\PSoC4/TelemUART.c ****     *
1099:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
1100:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
1101:.\Generated_Source\PSoC4/TelemUART.c ****     *
1102:.\Generated_Source\PSoC4/TelemUART.c ****     * Theory:
1103:.\Generated_Source\PSoC4/TelemUART.c ****     *  Allows the user to transmit any byte of data in a single transfer
1104:.\Generated_Source\PSoC4/TelemUART.c ****     *
1105:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
1106:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_PutChar(uint8 txDataByte) 
1107:.\Generated_Source\PSoC4/TelemUART.c ****     {
 411              		.loc 1 1107 0
 412              		.cfi_startproc
 413 0000 80B5     		push	{r7, lr}
 414              	.LCFI23:
 415              		.cfi_def_cfa_offset 8
 416              		.cfi_offset 7, -8
 417              		.cfi_offset 14, -4
 418 0002 82B0     		sub	sp, sp, #8
 419              	.LCFI24:
 420              		.cfi_def_cfa_offset 16
 421 0004 00AF     		add	r7, sp, #0
 422              	.LCFI25:
 423              		.cfi_def_cfa_register 7
 424 0006 021C     		mov	r2, r0
 425 0008 FB1D     		add	r3, r7, #7
 426 000a 1A70     		strb	r2, [r3]
1108:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH)
1109:.\Generated_Source\PSoC4/TelemUART.c ****                 /* The temporary output pointer is used since it takes two instructions
1110:.\Generated_Source\PSoC4/TelemUART.c ****                 *  to increment with a wrap, and we can't risk doing that with the real
1111:.\Generated_Source\PSoC4/TelemUART.c ****                 *  pointer and getting an interrupt in between instructions.
1112:.\Generated_Source\PSoC4/TelemUART.c ****                 */
1113:.\Generated_Source\PSoC4/TelemUART.c ****                 uint8 loc_txBufferWrite;
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 28


1114:.\Generated_Source\PSoC4/TelemUART.c ****                 uint8 loc_txBufferRead;
1115:.\Generated_Source\PSoC4/TelemUART.c **** 
1116:.\Generated_Source\PSoC4/TelemUART.c ****                 do{
1117:.\Generated_Source\PSoC4/TelemUART.c ****                     /* Block if software buffer is full, so we don't overwrite. */
1118:.\Generated_Source\PSoC4/TelemUART.c ****                     #if ((TelemUART_TXBUFFERSIZE > TelemUART_MAX_BYTE_VALUE) && (CY_PSOC3))
1119:.\Generated_Source\PSoC4/TelemUART.c ****                         /* Disable TX interrupt to protect variables that could change on interrupt
1120:.\Generated_Source\PSoC4/TelemUART.c ****                         CyIntDisable(TelemUART_TX_VECT_NUM);
1121:.\Generated_Source\PSoC4/TelemUART.c ****                     #endif /* End TXBUFFERSIZE > 255 */
1122:.\Generated_Source\PSoC4/TelemUART.c ****                     loc_txBufferWrite = TelemUART_txBufferWrite;
1123:.\Generated_Source\PSoC4/TelemUART.c ****                     loc_txBufferRead = TelemUART_txBufferRead;
1124:.\Generated_Source\PSoC4/TelemUART.c ****                     #if ((TelemUART_TXBUFFERSIZE > TelemUART_MAX_BYTE_VALUE) && (CY_PSOC3))
1125:.\Generated_Source\PSoC4/TelemUART.c ****                         /* Enable interrupt to continue transmission */
1126:.\Generated_Source\PSoC4/TelemUART.c ****                         CyIntEnable(TelemUART_TX_VECT_NUM);
1127:.\Generated_Source\PSoC4/TelemUART.c ****                     #endif /* End TXBUFFERSIZE > 255 */
1128:.\Generated_Source\PSoC4/TelemUART.c ****                 }while( (loc_txBufferWrite < loc_txBufferRead) ? (loc_txBufferWrite == (loc_txBuffe
1129:.\Generated_Source\PSoC4/TelemUART.c ****                                         ((loc_txBufferWrite - loc_txBufferRead) ==
1130:.\Generated_Source\PSoC4/TelemUART.c ****                                         (uint8)(TelemUART_TXBUFFERSIZE - 1u)) );
1131:.\Generated_Source\PSoC4/TelemUART.c **** 
1132:.\Generated_Source\PSoC4/TelemUART.c ****                 if( (loc_txBufferRead == loc_txBufferWrite) &&
1133:.\Generated_Source\PSoC4/TelemUART.c ****                     ((TelemUART_TXSTATUS_REG & TelemUART_TX_STS_FIFO_FULL) == 0u) )
1134:.\Generated_Source\PSoC4/TelemUART.c ****                 {
1135:.\Generated_Source\PSoC4/TelemUART.c ****                     /* Add directly to the FIFO. */
1136:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_TXDATA_REG = txDataByte;
1137:.\Generated_Source\PSoC4/TelemUART.c ****                 }
1138:.\Generated_Source\PSoC4/TelemUART.c ****                 else
1139:.\Generated_Source\PSoC4/TelemUART.c ****                 {
1140:.\Generated_Source\PSoC4/TelemUART.c ****                     if(loc_txBufferWrite >= TelemUART_TXBUFFERSIZE)
1141:.\Generated_Source\PSoC4/TelemUART.c ****                     {
1142:.\Generated_Source\PSoC4/TelemUART.c ****                         loc_txBufferWrite = 0u;
1143:.\Generated_Source\PSoC4/TelemUART.c ****                     }
1144:.\Generated_Source\PSoC4/TelemUART.c ****                     /* Add to the software buffer. */
1145:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_txBuffer[loc_txBufferWrite] = txDataByte;
1146:.\Generated_Source\PSoC4/TelemUART.c ****                     loc_txBufferWrite++;
1147:.\Generated_Source\PSoC4/TelemUART.c **** 
1148:.\Generated_Source\PSoC4/TelemUART.c ****                     /* Finally, update the real output pointer */
1149:.\Generated_Source\PSoC4/TelemUART.c ****                     #if ((TelemUART_TXBUFFERSIZE > TelemUART_MAX_BYTE_VALUE) && (CY_PSOC3))
1150:.\Generated_Source\PSoC4/TelemUART.c ****                         CyIntDisable(TelemUART_TX_VECT_NUM);
1151:.\Generated_Source\PSoC4/TelemUART.c ****                     #endif /* End TXBUFFERSIZE > 255 */
1152:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_txBufferWrite = loc_txBufferWrite;
1153:.\Generated_Source\PSoC4/TelemUART.c ****                     #if ((TelemUART_TXBUFFERSIZE > TelemUART_MAX_BYTE_VALUE) && (CY_PSOC3))
1154:.\Generated_Source\PSoC4/TelemUART.c ****                         CyIntEnable(TelemUART_TX_VECT_NUM);
1155:.\Generated_Source\PSoC4/TelemUART.c ****                     #endif /* End TXBUFFERSIZE > 255 */
1156:.\Generated_Source\PSoC4/TelemUART.c ****                 }
1157:.\Generated_Source\PSoC4/TelemUART.c **** 
1158:.\Generated_Source\PSoC4/TelemUART.c ****             #else /* TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH */
1159:.\Generated_Source\PSoC4/TelemUART.c **** 
1160:.\Generated_Source\PSoC4/TelemUART.c ****                 while((TelemUART_TXSTATUS_REG & TelemUART_TX_STS_FIFO_FULL) != 0u)
 427              		.loc 1 1160 0
 428 000c C046     		mov	r8, r8
 429              	.L29:
 430              		.loc 1 1160 0 is_stmt 0 discriminator 1
 431 000e 074B     		ldr	r3, .L30
 432 0010 1B78     		ldrb	r3, [r3]
 433 0012 DBB2     		uxtb	r3, r3
 434 0014 1A1C     		mov	r2, r3
 435 0016 0423     		mov	r3, #4
 436 0018 1340     		and	r3, r2
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 29


 437 001a F8D1     		bne	.L29
1161:.\Generated_Source\PSoC4/TelemUART.c ****                 {
1162:.\Generated_Source\PSoC4/TelemUART.c ****                     ; /* Wait for room in the FIFO. */
1163:.\Generated_Source\PSoC4/TelemUART.c ****                 }
1164:.\Generated_Source\PSoC4/TelemUART.c **** 
1165:.\Generated_Source\PSoC4/TelemUART.c ****                 /* Add directly to the FIFO. */
1166:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_TXDATA_REG = txDataByte;
 438              		.loc 1 1166 0 is_stmt 1
 439 001c 044B     		ldr	r3, .L30+4
 440 001e FA1D     		add	r2, r7, #7
 441 0020 1278     		ldrb	r2, [r2]
 442 0022 1A70     		strb	r2, [r3]
1167:.\Generated_Source\PSoC4/TelemUART.c **** 
1168:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH */
1169:.\Generated_Source\PSoC4/TelemUART.c ****     }
 443              		.loc 1 1169 0
 444 0024 BD46     		mov	sp, r7
 445 0026 02B0     		add	sp, sp, #8
 446              		@ sp needed for prologue
 447 0028 80BD     		pop	{r7, pc}
 448              	.L31:
 449 002a C046     		.align	2
 450              	.L30:
 451 002c 63000F40 		.word	1074724963
 452 0030 43000F40 		.word	1074724931
 453              		.cfi_endproc
 454              	.LFE9:
 455              		.size	TelemUART_PutChar, .-TelemUART_PutChar
 456              		.section	.text.TelemUART_PutString,"ax",%progbits
 457              		.align	2
 458              		.global	TelemUART_PutString
 459              		.code	16
 460              		.thumb_func
 461              		.type	TelemUART_PutString, %function
 462              	TelemUART_PutString:
 463              	.LFB10:
1170:.\Generated_Source\PSoC4/TelemUART.c **** 
1171:.\Generated_Source\PSoC4/TelemUART.c **** 
1172:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
1173:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_PutString
1174:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
1175:.\Generated_Source\PSoC4/TelemUART.c ****     *
1176:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
1177:.\Generated_Source\PSoC4/TelemUART.c ****     *  Write a Sequence of bytes on the Transmit line. Data comes from RAM or ROM.
1178:.\Generated_Source\PSoC4/TelemUART.c ****     *
1179:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
1180:.\Generated_Source\PSoC4/TelemUART.c ****     *  string: char pointer to character string of Data to Send.
1181:.\Generated_Source\PSoC4/TelemUART.c ****     *
1182:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
1183:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
1184:.\Generated_Source\PSoC4/TelemUART.c ****     *
1185:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
1186:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_initVar - checked to identify that the component has been
1187:.\Generated_Source\PSoC4/TelemUART.c ****     *     initialized.
1188:.\Generated_Source\PSoC4/TelemUART.c ****     *
1189:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
1190:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 30


1191:.\Generated_Source\PSoC4/TelemUART.c ****     *
1192:.\Generated_Source\PSoC4/TelemUART.c ****     * Theory:
1193:.\Generated_Source\PSoC4/TelemUART.c ****     *  This function will block if there is not enough memory to place the whole
1194:.\Generated_Source\PSoC4/TelemUART.c ****     *  string, it will block until the entire string has been written to the
1195:.\Generated_Source\PSoC4/TelemUART.c ****     *  transmit buffer.
1196:.\Generated_Source\PSoC4/TelemUART.c ****     *
1197:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
1198:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_PutString(const char8 string[]) 
1199:.\Generated_Source\PSoC4/TelemUART.c ****     {
 464              		.loc 1 1199 0
 465              		.cfi_startproc
 466 0000 80B5     		push	{r7, lr}
 467              	.LCFI26:
 468              		.cfi_def_cfa_offset 8
 469              		.cfi_offset 7, -8
 470              		.cfi_offset 14, -4
 471 0002 84B0     		sub	sp, sp, #16
 472              	.LCFI27:
 473              		.cfi_def_cfa_offset 24
 474 0004 00AF     		add	r7, sp, #0
 475              	.LCFI28:
 476              		.cfi_def_cfa_register 7
 477 0006 7860     		str	r0, [r7, #4]
1200:.\Generated_Source\PSoC4/TelemUART.c ****         uint16 buf_index = 0u;
 478              		.loc 1 1200 0
 479 0008 3B1C     		mov	r3, r7
 480 000a 0E33     		add	r3, r3, #14
 481 000c 0022     		mov	r2, #0
 482 000e 1A80     		strh	r2, [r3]
1201:.\Generated_Source\PSoC4/TelemUART.c ****         /* If not Initialized then skip this function*/
1202:.\Generated_Source\PSoC4/TelemUART.c ****         if(TelemUART_initVar != 0u)
 483              		.loc 1 1202 0
 484 0010 0F4B     		ldr	r3, .L36
 485 0012 1B78     		ldrb	r3, [r3]
 486 0014 002B     		cmp	r3, #0
 487 0016 18D0     		beq	.L32
1203:.\Generated_Source\PSoC4/TelemUART.c ****         {
1204:.\Generated_Source\PSoC4/TelemUART.c ****             /* This is a blocking function, it will not exit until all data is sent*/
1205:.\Generated_Source\PSoC4/TelemUART.c ****             while(string[buf_index] != (char8)0)
 488              		.loc 1 1205 0
 489 0018 0FE0     		b	.L34
 490              	.L35:
1206:.\Generated_Source\PSoC4/TelemUART.c ****             {
1207:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_PutChar((uint8)string[buf_index]);
 491              		.loc 1 1207 0
 492 001a 3B1C     		mov	r3, r7
 493 001c 0E33     		add	r3, r3, #14
 494 001e 1B88     		ldrh	r3, [r3]
 495 0020 7A68     		ldr	r2, [r7, #4]
 496 0022 D318     		add	r3, r2, r3
 497 0024 1B78     		ldrb	r3, [r3]
 498 0026 181C     		mov	r0, r3
 499 0028 FFF7FEFF 		bl	TelemUART_PutChar
1208:.\Generated_Source\PSoC4/TelemUART.c ****                 buf_index++;
 500              		.loc 1 1208 0
 501 002c 3B1C     		mov	r3, r7
 502 002e 0E33     		add	r3, r3, #14
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 31


 503 0030 3A1C     		mov	r2, r7
 504 0032 0E32     		add	r2, r2, #14
 505 0034 1288     		ldrh	r2, [r2]
 506 0036 0132     		add	r2, r2, #1
 507 0038 1A80     		strh	r2, [r3]
 508              	.L34:
1205:.\Generated_Source\PSoC4/TelemUART.c ****             while(string[buf_index] != (char8)0)
 509              		.loc 1 1205 0 discriminator 1
 510 003a 3B1C     		mov	r3, r7
 511 003c 0E33     		add	r3, r3, #14
 512 003e 1B88     		ldrh	r3, [r3]
 513 0040 7A68     		ldr	r2, [r7, #4]
 514 0042 D318     		add	r3, r2, r3
 515 0044 1B78     		ldrb	r3, [r3]
 516 0046 002B     		cmp	r3, #0
 517 0048 E7D1     		bne	.L35
 518              	.L32:
1209:.\Generated_Source\PSoC4/TelemUART.c ****             }
1210:.\Generated_Source\PSoC4/TelemUART.c ****         }
1211:.\Generated_Source\PSoC4/TelemUART.c ****     }
 519              		.loc 1 1211 0
 520 004a BD46     		mov	sp, r7
 521 004c 04B0     		add	sp, sp, #16
 522              		@ sp needed for prologue
 523 004e 80BD     		pop	{r7, pc}
 524              	.L37:
 525              		.align	2
 526              	.L36:
 527 0050 00000000 		.word	TelemUART_initVar
 528              		.cfi_endproc
 529              	.LFE10:
 530              		.size	TelemUART_PutString, .-TelemUART_PutString
 531              		.section	.text.TelemUART_PutArray,"ax",%progbits
 532              		.align	2
 533              		.global	TelemUART_PutArray
 534              		.code	16
 535              		.thumb_func
 536              		.type	TelemUART_PutArray, %function
 537              	TelemUART_PutArray:
 538              	.LFB11:
1212:.\Generated_Source\PSoC4/TelemUART.c **** 
1213:.\Generated_Source\PSoC4/TelemUART.c **** 
1214:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
1215:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_PutArray
1216:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
1217:.\Generated_Source\PSoC4/TelemUART.c ****     *
1218:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
1219:.\Generated_Source\PSoC4/TelemUART.c ****     *  Write a Sequence of bytes on the Transmit line. Data comes from RAM or ROM.
1220:.\Generated_Source\PSoC4/TelemUART.c ****     *
1221:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
1222:.\Generated_Source\PSoC4/TelemUART.c ****     *  string: Address of the memory array residing in RAM or ROM.
1223:.\Generated_Source\PSoC4/TelemUART.c ****     *  byteCount: Number of Bytes to be transmitted.
1224:.\Generated_Source\PSoC4/TelemUART.c ****     *
1225:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
1226:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
1227:.\Generated_Source\PSoC4/TelemUART.c ****     *
1228:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 32


1229:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_initVar - checked to identify that the component has been
1230:.\Generated_Source\PSoC4/TelemUART.c ****     *     initialized.
1231:.\Generated_Source\PSoC4/TelemUART.c ****     *
1232:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
1233:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
1234:.\Generated_Source\PSoC4/TelemUART.c ****     *
1235:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
1236:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_PutArray(const uint8 string[], uint8 byteCount)
1237:.\Generated_Source\PSoC4/TelemUART.c ****                                                                     
1238:.\Generated_Source\PSoC4/TelemUART.c ****     {
 539              		.loc 1 1238 0
 540              		.cfi_startproc
 541 0000 80B5     		push	{r7, lr}
 542              	.LCFI29:
 543              		.cfi_def_cfa_offset 8
 544              		.cfi_offset 7, -8
 545              		.cfi_offset 14, -4
 546 0002 84B0     		sub	sp, sp, #16
 547              	.LCFI30:
 548              		.cfi_def_cfa_offset 24
 549 0004 00AF     		add	r7, sp, #0
 550              	.LCFI31:
 551              		.cfi_def_cfa_register 7
 552 0006 7860     		str	r0, [r7, #4]
 553 0008 0A1C     		mov	r2, r1
 554 000a FB1C     		add	r3, r7, #3
 555 000c 1A70     		strb	r2, [r3]
1239:.\Generated_Source\PSoC4/TelemUART.c ****         uint8 buf_index = 0u;
 556              		.loc 1 1239 0
 557 000e 3B1C     		mov	r3, r7
 558 0010 0F33     		add	r3, r3, #15
 559 0012 0022     		mov	r2, #0
 560 0014 1A70     		strb	r2, [r3]
1240:.\Generated_Source\PSoC4/TelemUART.c ****         /* If not Initialized then skip this function*/
1241:.\Generated_Source\PSoC4/TelemUART.c ****         if(TelemUART_initVar != 0u)
 561              		.loc 1 1241 0
 562 0016 0F4B     		ldr	r3, .L41
 563 0018 1B78     		ldrb	r3, [r3]
 564 001a 002B     		cmp	r3, #0
 565 001c 16D0     		beq	.L38
 566              	.L40:
1242:.\Generated_Source\PSoC4/TelemUART.c ****         {
1243:.\Generated_Source\PSoC4/TelemUART.c ****             do
1244:.\Generated_Source\PSoC4/TelemUART.c ****             {
1245:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_PutChar(string[buf_index]);
 567              		.loc 1 1245 0 discriminator 1
 568 001e 3B1C     		mov	r3, r7
 569 0020 0F33     		add	r3, r3, #15
 570 0022 1B78     		ldrb	r3, [r3]
 571 0024 7A68     		ldr	r2, [r7, #4]
 572 0026 D318     		add	r3, r2, r3
 573 0028 1B78     		ldrb	r3, [r3]
 574 002a 181C     		mov	r0, r3
 575 002c FFF7FEFF 		bl	TelemUART_PutChar
1246:.\Generated_Source\PSoC4/TelemUART.c ****                 buf_index++;
 576              		.loc 1 1246 0 discriminator 1
 577 0030 3B1C     		mov	r3, r7
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 33


 578 0032 0F33     		add	r3, r3, #15
 579 0034 3A1C     		mov	r2, r7
 580 0036 0F32     		add	r2, r2, #15
 581 0038 1278     		ldrb	r2, [r2]
 582 003a 0132     		add	r2, r2, #1
 583 003c 1A70     		strb	r2, [r3]
1247:.\Generated_Source\PSoC4/TelemUART.c ****             }while(buf_index < byteCount);
 584              		.loc 1 1247 0 discriminator 1
 585 003e 3A1C     		mov	r2, r7
 586 0040 0F32     		add	r2, r2, #15
 587 0042 FB1C     		add	r3, r7, #3
 588 0044 1278     		ldrb	r2, [r2]
 589 0046 1B78     		ldrb	r3, [r3]
 590 0048 9A42     		cmp	r2, r3
 591 004a E8D3     		bcc	.L40
 592              	.L38:
1248:.\Generated_Source\PSoC4/TelemUART.c ****         }
1249:.\Generated_Source\PSoC4/TelemUART.c ****     }
 593              		.loc 1 1249 0
 594 004c BD46     		mov	sp, r7
 595 004e 04B0     		add	sp, sp, #16
 596              		@ sp needed for prologue
 597 0050 80BD     		pop	{r7, pc}
 598              	.L42:
 599 0052 C046     		.align	2
 600              	.L41:
 601 0054 00000000 		.word	TelemUART_initVar
 602              		.cfi_endproc
 603              	.LFE11:
 604              		.size	TelemUART_PutArray, .-TelemUART_PutArray
 605              		.section	.text.TelemUART_PutCRLF,"ax",%progbits
 606              		.align	2
 607              		.global	TelemUART_PutCRLF
 608              		.code	16
 609              		.thumb_func
 610              		.type	TelemUART_PutCRLF, %function
 611              	TelemUART_PutCRLF:
 612              	.LFB12:
1250:.\Generated_Source\PSoC4/TelemUART.c **** 
1251:.\Generated_Source\PSoC4/TelemUART.c **** 
1252:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
1253:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_PutCRLF
1254:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
1255:.\Generated_Source\PSoC4/TelemUART.c ****     *
1256:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
1257:.\Generated_Source\PSoC4/TelemUART.c ****     *  Write a character and then carriage return and line feed.
1258:.\Generated_Source\PSoC4/TelemUART.c ****     *
1259:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
1260:.\Generated_Source\PSoC4/TelemUART.c ****     *  txDataByte: uint8 Character to send.
1261:.\Generated_Source\PSoC4/TelemUART.c ****     *
1262:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
1263:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
1264:.\Generated_Source\PSoC4/TelemUART.c ****     *
1265:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
1266:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_initVar - checked to identify that the component has been
1267:.\Generated_Source\PSoC4/TelemUART.c ****     *     initialized.
1268:.\Generated_Source\PSoC4/TelemUART.c ****     *
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 34


1269:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
1270:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
1271:.\Generated_Source\PSoC4/TelemUART.c ****     *
1272:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
1273:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_PutCRLF(uint8 txDataByte) 
1274:.\Generated_Source\PSoC4/TelemUART.c ****     {
 613              		.loc 1 1274 0
 614              		.cfi_startproc
 615 0000 80B5     		push	{r7, lr}
 616              	.LCFI32:
 617              		.cfi_def_cfa_offset 8
 618              		.cfi_offset 7, -8
 619              		.cfi_offset 14, -4
 620 0002 82B0     		sub	sp, sp, #8
 621              	.LCFI33:
 622              		.cfi_def_cfa_offset 16
 623 0004 00AF     		add	r7, sp, #0
 624              	.LCFI34:
 625              		.cfi_def_cfa_register 7
 626 0006 021C     		mov	r2, r0
 627 0008 FB1D     		add	r3, r7, #7
 628 000a 1A70     		strb	r2, [r3]
1275:.\Generated_Source\PSoC4/TelemUART.c ****         /* If not Initialized then skip this function*/
1276:.\Generated_Source\PSoC4/TelemUART.c ****         if(TelemUART_initVar != 0u)
 629              		.loc 1 1276 0
 630 000c 084B     		ldr	r3, .L45
 631 000e 1B78     		ldrb	r3, [r3]
 632 0010 002B     		cmp	r3, #0
 633 0012 0AD0     		beq	.L43
1277:.\Generated_Source\PSoC4/TelemUART.c ****         {
1278:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_PutChar(txDataByte);
 634              		.loc 1 1278 0
 635 0014 FB1D     		add	r3, r7, #7
 636 0016 1B78     		ldrb	r3, [r3]
 637 0018 181C     		mov	r0, r3
 638 001a FFF7FEFF 		bl	TelemUART_PutChar
1279:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_PutChar(0x0Du);
 639              		.loc 1 1279 0
 640 001e 0D20     		mov	r0, #13
 641 0020 FFF7FEFF 		bl	TelemUART_PutChar
1280:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_PutChar(0x0Au);
 642              		.loc 1 1280 0
 643 0024 0A20     		mov	r0, #10
 644 0026 FFF7FEFF 		bl	TelemUART_PutChar
 645              	.L43:
1281:.\Generated_Source\PSoC4/TelemUART.c ****         }
1282:.\Generated_Source\PSoC4/TelemUART.c ****     }
 646              		.loc 1 1282 0
 647 002a BD46     		mov	sp, r7
 648 002c 02B0     		add	sp, sp, #8
 649              		@ sp needed for prologue
 650 002e 80BD     		pop	{r7, pc}
 651              	.L46:
 652              		.align	2
 653              	.L45:
 654 0030 00000000 		.word	TelemUART_initVar
 655              		.cfi_endproc
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 35


 656              	.LFE12:
 657              		.size	TelemUART_PutCRLF, .-TelemUART_PutCRLF
 658              		.section	.text.TelemUART_GetTxBufferSize,"ax",%progbits
 659              		.align	2
 660              		.global	TelemUART_GetTxBufferSize
 661              		.code	16
 662              		.thumb_func
 663              		.type	TelemUART_GetTxBufferSize, %function
 664              	TelemUART_GetTxBufferSize:
 665              	.LFB13:
1283:.\Generated_Source\PSoC4/TelemUART.c **** 
1284:.\Generated_Source\PSoC4/TelemUART.c **** 
1285:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
1286:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_GetTxBufferSize
1287:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
1288:.\Generated_Source\PSoC4/TelemUART.c ****     *
1289:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
1290:.\Generated_Source\PSoC4/TelemUART.c ****     *  Determine the amount of space left in the TX buffer and return the count in
1291:.\Generated_Source\PSoC4/TelemUART.c ****     *  bytes
1292:.\Generated_Source\PSoC4/TelemUART.c ****     *
1293:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
1294:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
1295:.\Generated_Source\PSoC4/TelemUART.c ****     *
1296:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
1297:.\Generated_Source\PSoC4/TelemUART.c ****     *  Integer count of the number of bytes left in the TX buffer
1298:.\Generated_Source\PSoC4/TelemUART.c ****     *
1299:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
1300:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_txBufferWrite - used to calculate left space.
1301:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_txBufferRead - used to calculate left space.
1302:.\Generated_Source\PSoC4/TelemUART.c ****     *
1303:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
1304:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
1305:.\Generated_Source\PSoC4/TelemUART.c ****     *
1306:.\Generated_Source\PSoC4/TelemUART.c ****     * Theory:
1307:.\Generated_Source\PSoC4/TelemUART.c ****     *  Allows the user to find out how full the TX Buffer is.
1308:.\Generated_Source\PSoC4/TelemUART.c ****     *
1309:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
1310:.\Generated_Source\PSoC4/TelemUART.c ****     uint8 TelemUART_GetTxBufferSize(void)
1311:.\Generated_Source\PSoC4/TelemUART.c ****                                                             
1312:.\Generated_Source\PSoC4/TelemUART.c ****     {
 666              		.loc 1 1312 0
 667              		.cfi_startproc
 668 0000 80B5     		push	{r7, lr}
 669              	.LCFI35:
 670              		.cfi_def_cfa_offset 8
 671              		.cfi_offset 7, -8
 672              		.cfi_offset 14, -4
 673 0002 82B0     		sub	sp, sp, #8
 674              	.LCFI36:
 675              		.cfi_def_cfa_offset 16
 676 0004 00AF     		add	r7, sp, #0
 677              	.LCFI37:
 678              		.cfi_def_cfa_register 7
1313:.\Generated_Source\PSoC4/TelemUART.c ****         uint8 size;
1314:.\Generated_Source\PSoC4/TelemUART.c **** 
1315:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH)
1316:.\Generated_Source\PSoC4/TelemUART.c **** 
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 36


1317:.\Generated_Source\PSoC4/TelemUART.c ****             /* Disable Tx interrupt. */
1318:.\Generated_Source\PSoC4/TelemUART.c ****             /* Protect variables that could change on interrupt. */
1319:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_TX_INTERRUPT_ENABLED)
1320:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_DisableTxInt();
1321:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_TX_INTERRUPT_ENABLED */
1322:.\Generated_Source\PSoC4/TelemUART.c **** 
1323:.\Generated_Source\PSoC4/TelemUART.c ****             if(TelemUART_txBufferRead == TelemUART_txBufferWrite)
1324:.\Generated_Source\PSoC4/TelemUART.c ****             {
1325:.\Generated_Source\PSoC4/TelemUART.c ****                 size = 0u;
1326:.\Generated_Source\PSoC4/TelemUART.c ****             }
1327:.\Generated_Source\PSoC4/TelemUART.c ****             else if(TelemUART_txBufferRead < TelemUART_txBufferWrite)
1328:.\Generated_Source\PSoC4/TelemUART.c ****             {
1329:.\Generated_Source\PSoC4/TelemUART.c ****                 size = (TelemUART_txBufferWrite - TelemUART_txBufferRead);
1330:.\Generated_Source\PSoC4/TelemUART.c ****             }
1331:.\Generated_Source\PSoC4/TelemUART.c ****             else
1332:.\Generated_Source\PSoC4/TelemUART.c ****             {
1333:.\Generated_Source\PSoC4/TelemUART.c ****                 size = (TelemUART_TXBUFFERSIZE - TelemUART_txBufferRead) + TelemUART_txBufferWrite;
1334:.\Generated_Source\PSoC4/TelemUART.c ****             }
1335:.\Generated_Source\PSoC4/TelemUART.c **** 
1336:.\Generated_Source\PSoC4/TelemUART.c ****             /* Enable Tx interrupt. */
1337:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_TX_INTERRUPT_ENABLED)
1338:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_EnableTxInt();
1339:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_TX_INTERRUPT_ENABLED */
1340:.\Generated_Source\PSoC4/TelemUART.c **** 
1341:.\Generated_Source\PSoC4/TelemUART.c ****         #else /* TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH */
1342:.\Generated_Source\PSoC4/TelemUART.c **** 
1343:.\Generated_Source\PSoC4/TelemUART.c ****             size = TelemUART_TXSTATUS_REG;
 679              		.loc 1 1343 0
 680 0006 0F4A     		ldr	r2, .L52
 681 0008 FB1D     		add	r3, r7, #7
 682 000a 1278     		ldrb	r2, [r2]
 683 000c 1A70     		strb	r2, [r3]
1344:.\Generated_Source\PSoC4/TelemUART.c **** 
1345:.\Generated_Source\PSoC4/TelemUART.c ****             /* Is the fifo is full. */
1346:.\Generated_Source\PSoC4/TelemUART.c ****             if((size & TelemUART_TX_STS_FIFO_FULL) != 0u)
 684              		.loc 1 1346 0
 685 000e FB1D     		add	r3, r7, #7
 686 0010 1A78     		ldrb	r2, [r3]
 687 0012 0423     		mov	r3, #4
 688 0014 1340     		and	r3, r2
 689 0016 03D0     		beq	.L48
1347:.\Generated_Source\PSoC4/TelemUART.c ****             {
1348:.\Generated_Source\PSoC4/TelemUART.c ****                 size = TelemUART_FIFO_LENGTH;
 690              		.loc 1 1348 0
 691 0018 FB1D     		add	r3, r7, #7
 692 001a 0422     		mov	r2, #4
 693 001c 1A70     		strb	r2, [r3]
 694 001e 0BE0     		b	.L49
 695              	.L48:
1349:.\Generated_Source\PSoC4/TelemUART.c ****             }
1350:.\Generated_Source\PSoC4/TelemUART.c ****             else if((size & TelemUART_TX_STS_FIFO_EMPTY) != 0u)
 696              		.loc 1 1350 0
 697 0020 FB1D     		add	r3, r7, #7
 698 0022 1A78     		ldrb	r2, [r3]
 699 0024 0223     		mov	r3, #2
 700 0026 1340     		and	r3, r2
 701 0028 03D0     		beq	.L50
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 37


1351:.\Generated_Source\PSoC4/TelemUART.c ****             {
1352:.\Generated_Source\PSoC4/TelemUART.c ****                 size = 0u;
 702              		.loc 1 1352 0
 703 002a FB1D     		add	r3, r7, #7
 704 002c 0022     		mov	r2, #0
 705 002e 1A70     		strb	r2, [r3]
 706 0030 02E0     		b	.L49
 707              	.L50:
1353:.\Generated_Source\PSoC4/TelemUART.c ****             }
1354:.\Generated_Source\PSoC4/TelemUART.c ****             else
1355:.\Generated_Source\PSoC4/TelemUART.c ****             {
1356:.\Generated_Source\PSoC4/TelemUART.c ****                 /* We only know there is data in the fifo. */
1357:.\Generated_Source\PSoC4/TelemUART.c ****                 size = 1u;
 708              		.loc 1 1357 0
 709 0032 FB1D     		add	r3, r7, #7
 710 0034 0122     		mov	r2, #1
 711 0036 1A70     		strb	r2, [r3]
 712              	.L49:
1358:.\Generated_Source\PSoC4/TelemUART.c ****             }
1359:.\Generated_Source\PSoC4/TelemUART.c **** 
1360:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH */
1361:.\Generated_Source\PSoC4/TelemUART.c **** 
1362:.\Generated_Source\PSoC4/TelemUART.c ****         return(size);
 713              		.loc 1 1362 0
 714 0038 FB1D     		add	r3, r7, #7
 715 003a 1B78     		ldrb	r3, [r3]
1363:.\Generated_Source\PSoC4/TelemUART.c ****     }
 716              		.loc 1 1363 0
 717 003c 181C     		mov	r0, r3
 718 003e BD46     		mov	sp, r7
 719 0040 02B0     		add	sp, sp, #8
 720              		@ sp needed for prologue
 721 0042 80BD     		pop	{r7, pc}
 722              	.L53:
 723              		.align	2
 724              	.L52:
 725 0044 63000F40 		.word	1074724963
 726              		.cfi_endproc
 727              	.LFE13:
 728              		.size	TelemUART_GetTxBufferSize, .-TelemUART_GetTxBufferSize
 729              		.section	.text.TelemUART_ClearTxBuffer,"ax",%progbits
 730              		.align	2
 731              		.global	TelemUART_ClearTxBuffer
 732              		.code	16
 733              		.thumb_func
 734              		.type	TelemUART_ClearTxBuffer, %function
 735              	TelemUART_ClearTxBuffer:
 736              	.LFB14:
1364:.\Generated_Source\PSoC4/TelemUART.c **** 
1365:.\Generated_Source\PSoC4/TelemUART.c **** 
1366:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
1367:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_ClearTxBuffer
1368:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
1369:.\Generated_Source\PSoC4/TelemUART.c ****     *
1370:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
1371:.\Generated_Source\PSoC4/TelemUART.c ****     *  Clears the TX RAM buffer by setting the read and write pointers both to zero.
1372:.\Generated_Source\PSoC4/TelemUART.c ****     *  Clears the hardware TX FIFO.  Any data present in the FIFO will not be sent.
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 38


1373:.\Generated_Source\PSoC4/TelemUART.c ****     *
1374:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
1375:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
1376:.\Generated_Source\PSoC4/TelemUART.c ****     *
1377:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
1378:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
1379:.\Generated_Source\PSoC4/TelemUART.c ****     *
1380:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
1381:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_txBufferWrite - cleared to zero.
1382:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_txBufferRead - cleared to zero.
1383:.\Generated_Source\PSoC4/TelemUART.c ****     *
1384:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
1385:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
1386:.\Generated_Source\PSoC4/TelemUART.c ****     *
1387:.\Generated_Source\PSoC4/TelemUART.c ****     * Theory:
1388:.\Generated_Source\PSoC4/TelemUART.c ****     *  Setting the pointers to zero makes the system believe there is no data to
1389:.\Generated_Source\PSoC4/TelemUART.c ****     *  read and writing will resume at address 0 overwriting any data that may have
1390:.\Generated_Source\PSoC4/TelemUART.c ****     *  remained in the RAM.
1391:.\Generated_Source\PSoC4/TelemUART.c ****     *
1392:.\Generated_Source\PSoC4/TelemUART.c ****     * Side Effects:
1393:.\Generated_Source\PSoC4/TelemUART.c ****     *  Any received data not read from the RAM buffer will be lost when overwritten.
1394:.\Generated_Source\PSoC4/TelemUART.c ****     *
1395:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
1396:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_ClearTxBuffer(void) 
1397:.\Generated_Source\PSoC4/TelemUART.c ****     {
 737              		.loc 1 1397 0
 738              		.cfi_startproc
 739 0000 90B5     		push	{r4, r7, lr}
 740              	.LCFI38:
 741              		.cfi_def_cfa_offset 12
 742              		.cfi_offset 4, -12
 743              		.cfi_offset 7, -8
 744              		.cfi_offset 14, -4
 745 0002 83B0     		sub	sp, sp, #12
 746              	.LCFI39:
 747              		.cfi_def_cfa_offset 24
 748 0004 00AF     		add	r7, sp, #0
 749              	.LCFI40:
 750              		.cfi_def_cfa_register 7
1398:.\Generated_Source\PSoC4/TelemUART.c ****         uint8 enableInterrupts;
1399:.\Generated_Source\PSoC4/TelemUART.c **** 
1400:.\Generated_Source\PSoC4/TelemUART.c ****         /* Enter critical section */
1401:.\Generated_Source\PSoC4/TelemUART.c ****         enableInterrupts = CyEnterCriticalSection();
 751              		.loc 1 1401 0
 752 0006 FC1D     		add	r4, r7, #7
 753 0008 FFF7FEFF 		bl	CyEnterCriticalSection
 754 000c 031C     		mov	r3, r0
 755 000e 2370     		strb	r3, [r4]
1402:.\Generated_Source\PSoC4/TelemUART.c ****         /* clear the HW FIFO */
1403:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_TXDATA_AUX_CTL_REG |=  TelemUART_TX_FIFO_CLR;
 756              		.loc 1 1403 0
 757 0010 0B4B     		ldr	r3, .L55
 758 0012 0B4A     		ldr	r2, .L55
 759 0014 1278     		ldrb	r2, [r2]
 760 0016 D2B2     		uxtb	r2, r2
 761 0018 0121     		mov	r1, #1
 762 001a 0A43     		orr	r2, r1
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 39


 763 001c D2B2     		uxtb	r2, r2
 764 001e 1A70     		strb	r2, [r3]
1404:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_TXDATA_AUX_CTL_REG &= (uint8)~TelemUART_TX_FIFO_CLR;
 765              		.loc 1 1404 0
 766 0020 074B     		ldr	r3, .L55
 767 0022 074A     		ldr	r2, .L55
 768 0024 1278     		ldrb	r2, [r2]
 769 0026 D2B2     		uxtb	r2, r2
 770 0028 0121     		mov	r1, #1
 771 002a 8A43     		bic	r2, r1
 772 002c D2B2     		uxtb	r2, r2
 773 002e 1A70     		strb	r2, [r3]
1405:.\Generated_Source\PSoC4/TelemUART.c ****         /* Exit critical section */
1406:.\Generated_Source\PSoC4/TelemUART.c ****         CyExitCriticalSection(enableInterrupts);
 774              		.loc 1 1406 0
 775 0030 FB1D     		add	r3, r7, #7
 776 0032 1B78     		ldrb	r3, [r3]
 777 0034 181C     		mov	r0, r3
 778 0036 FFF7FEFF 		bl	CyExitCriticalSection
1407:.\Generated_Source\PSoC4/TelemUART.c **** 
1408:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH)
1409:.\Generated_Source\PSoC4/TelemUART.c **** 
1410:.\Generated_Source\PSoC4/TelemUART.c ****             /* Disable Tx interrupt. */
1411:.\Generated_Source\PSoC4/TelemUART.c ****             /* Protect variables that could change on interrupt. */
1412:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_TX_INTERRUPT_ENABLED)
1413:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_DisableTxInt();
1414:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_TX_INTERRUPT_ENABLED */
1415:.\Generated_Source\PSoC4/TelemUART.c **** 
1416:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_txBufferRead = 0u;
1417:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_txBufferWrite = 0u;
1418:.\Generated_Source\PSoC4/TelemUART.c **** 
1419:.\Generated_Source\PSoC4/TelemUART.c ****             /* Enable Tx interrupt. */
1420:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_TX_INTERRUPT_ENABLED)
1421:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_EnableTxInt();
1422:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_TX_INTERRUPT_ENABLED */
1423:.\Generated_Source\PSoC4/TelemUART.c **** 
1424:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH */
1425:.\Generated_Source\PSoC4/TelemUART.c ****     }
 779              		.loc 1 1425 0
 780 003a BD46     		mov	sp, r7
 781 003c 03B0     		add	sp, sp, #12
 782              		@ sp needed for prologue
 783 003e 90BD     		pop	{r4, r7, pc}
 784              	.L56:
 785              		.align	2
 786              	.L55:
 787 0040 93000F40 		.word	1074725011
 788              		.cfi_endproc
 789              	.LFE14:
 790              		.size	TelemUART_ClearTxBuffer, .-TelemUART_ClearTxBuffer
 791              		.section	.text.TelemUART_SendBreak,"ax",%progbits
 792              		.align	2
 793              		.global	TelemUART_SendBreak
 794              		.code	16
 795              		.thumb_func
 796              		.type	TelemUART_SendBreak, %function
 797              	TelemUART_SendBreak:
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 40


 798              	.LFB15:
1426:.\Generated_Source\PSoC4/TelemUART.c **** 
1427:.\Generated_Source\PSoC4/TelemUART.c **** 
1428:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
1429:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_SendBreak
1430:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
1431:.\Generated_Source\PSoC4/TelemUART.c ****     *
1432:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
1433:.\Generated_Source\PSoC4/TelemUART.c ****     *  Write a Break command to the UART
1434:.\Generated_Source\PSoC4/TelemUART.c ****     *
1435:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
1436:.\Generated_Source\PSoC4/TelemUART.c ****     *  uint8 retMode:  Wait mode,
1437:.\Generated_Source\PSoC4/TelemUART.c ****     *   0 - Initialize registers for Break, sends the Break signal and return
1438:.\Generated_Source\PSoC4/TelemUART.c ****     *       imediately.
1439:.\Generated_Source\PSoC4/TelemUART.c ****     *   1 - Wait until Break sending is complete, reinitialize registers to normal
1440:.\Generated_Source\PSoC4/TelemUART.c ****     *       transmission mode then return.
1441:.\Generated_Source\PSoC4/TelemUART.c ****     *   2 - Reinitialize registers to normal transmission mode then return.
1442:.\Generated_Source\PSoC4/TelemUART.c ****     *   3 - both steps: 0 and 1
1443:.\Generated_Source\PSoC4/TelemUART.c ****     *       init registers for Break, send Break signal
1444:.\Generated_Source\PSoC4/TelemUART.c ****     *       wait until Break sending is complete, reinit registers to normal
1445:.\Generated_Source\PSoC4/TelemUART.c ****     *       transmission mode then return.
1446:.\Generated_Source\PSoC4/TelemUART.c ****     *
1447:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
1448:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
1449:.\Generated_Source\PSoC4/TelemUART.c ****     *
1450:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
1451:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_initVar - checked to identify that the component has been
1452:.\Generated_Source\PSoC4/TelemUART.c ****     *     initialized.
1453:.\Generated_Source\PSoC4/TelemUART.c ****     *  tx_period - static variable, used for keeping TX period configuration.
1454:.\Generated_Source\PSoC4/TelemUART.c ****     *
1455:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
1456:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
1457:.\Generated_Source\PSoC4/TelemUART.c ****     *
1458:.\Generated_Source\PSoC4/TelemUART.c ****     * Theory:
1459:.\Generated_Source\PSoC4/TelemUART.c ****     *  SendBreak function initializes registers to send 13-bit break signal. It is
1460:.\Generated_Source\PSoC4/TelemUART.c ****     *  important to return the registers configuration to normal for continue 8-bit
1461:.\Generated_Source\PSoC4/TelemUART.c ****     *  operation.
1462:.\Generated_Source\PSoC4/TelemUART.c ****     *  Trere are 3 variants for this API usage:
1463:.\Generated_Source\PSoC4/TelemUART.c ****     *  1) SendBreak(3) - function will send the Break signal and take care on the
1464:.\Generated_Source\PSoC4/TelemUART.c ****     *     configuration returning. Funcition will block CPU untill transmition
1465:.\Generated_Source\PSoC4/TelemUART.c ****     *     complete.
1466:.\Generated_Source\PSoC4/TelemUART.c ****     *  2) User may want to use bloking time if UART configured to the low speed
1467:.\Generated_Source\PSoC4/TelemUART.c ****     *     operation
1468:.\Generated_Source\PSoC4/TelemUART.c ****     *     Emample for this case:
1469:.\Generated_Source\PSoC4/TelemUART.c ****     *     SendBreak(0);     - init Break signal transmition
1470:.\Generated_Source\PSoC4/TelemUART.c ****     *         Add your code here to use CPU time
1471:.\Generated_Source\PSoC4/TelemUART.c ****     *     SendBreak(1);     - complete Break operation
1472:.\Generated_Source\PSoC4/TelemUART.c ****     *  3) Same to 2) but user may want to init and use the interrupt for complete
1473:.\Generated_Source\PSoC4/TelemUART.c ****     *     break operation.
1474:.\Generated_Source\PSoC4/TelemUART.c ****     *     Example for this case:
1475:.\Generated_Source\PSoC4/TelemUART.c ****     *     Init TX interrupt whith "TX - On TX Complete" parameter
1476:.\Generated_Source\PSoC4/TelemUART.c ****     *     SendBreak(0);     - init Break signal transmition
1477:.\Generated_Source\PSoC4/TelemUART.c ****     *         Add your code here to use CPU time
1478:.\Generated_Source\PSoC4/TelemUART.c ****     *     When interrupt appear with UART_TX_STS_COMPLETE status:
1479:.\Generated_Source\PSoC4/TelemUART.c ****     *     SendBreak(2);     - complete Break operation
1480:.\Generated_Source\PSoC4/TelemUART.c ****     *
1481:.\Generated_Source\PSoC4/TelemUART.c ****     * Side Effects:
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 41


1482:.\Generated_Source\PSoC4/TelemUART.c ****     *   Uses static variable to keep registers configuration.
1483:.\Generated_Source\PSoC4/TelemUART.c ****     *
1484:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
1485:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_SendBreak(uint8 retMode) 
1486:.\Generated_Source\PSoC4/TelemUART.c ****     {
 799              		.loc 1 1486 0
 800              		.cfi_startproc
 801 0000 80B5     		push	{r7, lr}
 802              	.LCFI41:
 803              		.cfi_def_cfa_offset 8
 804              		.cfi_offset 7, -8
 805              		.cfi_offset 14, -4
 806 0002 84B0     		sub	sp, sp, #16
 807              	.LCFI42:
 808              		.cfi_def_cfa_offset 24
 809 0004 00AF     		add	r7, sp, #0
 810              	.LCFI43:
 811              		.cfi_def_cfa_register 7
 812 0006 021C     		mov	r2, r0
 813 0008 FB1D     		add	r3, r7, #7
 814 000a 1A70     		strb	r2, [r3]
1487:.\Generated_Source\PSoC4/TelemUART.c **** 
1488:.\Generated_Source\PSoC4/TelemUART.c ****         /* If not Initialized then skip this function*/
1489:.\Generated_Source\PSoC4/TelemUART.c ****         if(TelemUART_initVar != 0u)
 815              		.loc 1 1489 0
 816 000c 254B     		ldr	r3, .L65
 817 000e 1B78     		ldrb	r3, [r3]
 818 0010 002B     		cmp	r3, #0
 819 0012 43D0     		beq	.L57
 820              	.LBB2:
1490:.\Generated_Source\PSoC4/TelemUART.c ****         {
1491:.\Generated_Source\PSoC4/TelemUART.c ****             /*Set the Counter to 13-bits and transmit a 00 byte*/
1492:.\Generated_Source\PSoC4/TelemUART.c ****             /*When that is done then reset the counter value back*/
1493:.\Generated_Source\PSoC4/TelemUART.c ****             uint8 tmpStat;
1494:.\Generated_Source\PSoC4/TelemUART.c **** 
1495:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_HD_ENABLED) /* Half Duplex mode*/
1496:.\Generated_Source\PSoC4/TelemUART.c **** 
1497:.\Generated_Source\PSoC4/TelemUART.c ****                 if( (retMode == TelemUART_SEND_BREAK) ||
1498:.\Generated_Source\PSoC4/TelemUART.c ****                     (retMode == TelemUART_SEND_WAIT_REINIT ) )
1499:.\Generated_Source\PSoC4/TelemUART.c ****                 {
1500:.\Generated_Source\PSoC4/TelemUART.c ****                     /* CTRL_HD_SEND_BREAK - sends break bits in HD mode*/
1501:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_WriteControlRegister(TelemUART_ReadControlRegister() |
1502:.\Generated_Source\PSoC4/TelemUART.c ****                                                           TelemUART_CTRL_HD_SEND_BREAK);
1503:.\Generated_Source\PSoC4/TelemUART.c ****                     /* Send zeros*/
1504:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_TXDATA_REG = 0u;
1505:.\Generated_Source\PSoC4/TelemUART.c **** 
1506:.\Generated_Source\PSoC4/TelemUART.c ****                     do /*wait until transmit starts*/
1507:.\Generated_Source\PSoC4/TelemUART.c ****                     {
1508:.\Generated_Source\PSoC4/TelemUART.c ****                         tmpStat = TelemUART_TXSTATUS_REG;
1509:.\Generated_Source\PSoC4/TelemUART.c ****                     }while((tmpStat & TelemUART_TX_STS_FIFO_EMPTY) != 0u);
1510:.\Generated_Source\PSoC4/TelemUART.c ****                 }
1511:.\Generated_Source\PSoC4/TelemUART.c **** 
1512:.\Generated_Source\PSoC4/TelemUART.c ****                 if( (retMode == TelemUART_WAIT_FOR_COMPLETE_REINIT) ||
1513:.\Generated_Source\PSoC4/TelemUART.c ****                     (retMode == TelemUART_SEND_WAIT_REINIT) )
1514:.\Generated_Source\PSoC4/TelemUART.c ****                 {
1515:.\Generated_Source\PSoC4/TelemUART.c ****                     do /*wait until transmit complete*/
1516:.\Generated_Source\PSoC4/TelemUART.c ****                     {
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 42


1517:.\Generated_Source\PSoC4/TelemUART.c ****                         tmpStat = TelemUART_TXSTATUS_REG;
1518:.\Generated_Source\PSoC4/TelemUART.c ****                     }while(((uint8)~tmpStat & TelemUART_TX_STS_COMPLETE) != 0u);
1519:.\Generated_Source\PSoC4/TelemUART.c ****                 }
1520:.\Generated_Source\PSoC4/TelemUART.c **** 
1521:.\Generated_Source\PSoC4/TelemUART.c ****                 if( (retMode == TelemUART_WAIT_FOR_COMPLETE_REINIT) ||
1522:.\Generated_Source\PSoC4/TelemUART.c ****                     (retMode == TelemUART_REINIT) ||
1523:.\Generated_Source\PSoC4/TelemUART.c ****                     (retMode == TelemUART_SEND_WAIT_REINIT) )
1524:.\Generated_Source\PSoC4/TelemUART.c ****                 {
1525:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_WriteControlRegister(TelemUART_ReadControlRegister() &
1526:.\Generated_Source\PSoC4/TelemUART.c ****                                                   (uint8)~TelemUART_CTRL_HD_SEND_BREAK);
1527:.\Generated_Source\PSoC4/TelemUART.c ****                 }
1528:.\Generated_Source\PSoC4/TelemUART.c **** 
1529:.\Generated_Source\PSoC4/TelemUART.c ****             #else /* TelemUART_HD_ENABLED Full Duplex mode */
1530:.\Generated_Source\PSoC4/TelemUART.c **** 
1531:.\Generated_Source\PSoC4/TelemUART.c ****                 static uint8 tx_period;
1532:.\Generated_Source\PSoC4/TelemUART.c **** 
1533:.\Generated_Source\PSoC4/TelemUART.c ****                 if( (retMode == TelemUART_SEND_BREAK) ||
 821              		.loc 1 1533 0
 822 0014 FB1D     		add	r3, r7, #7
 823 0016 1B78     		ldrb	r3, [r3]
 824 0018 002B     		cmp	r3, #0
 825 001a 03D0     		beq	.L59
 826              		.loc 1 1533 0 is_stmt 0 discriminator 1
 827 001c FB1D     		add	r3, r7, #7
 828 001e 1B78     		ldrb	r3, [r3]
 829 0020 032B     		cmp	r3, #3
 830 0022 15D1     		bne	.L60
 831              	.L59:
1534:.\Generated_Source\PSoC4/TelemUART.c ****                     (retMode == TelemUART_SEND_WAIT_REINIT) )
1535:.\Generated_Source\PSoC4/TelemUART.c ****                 {
1536:.\Generated_Source\PSoC4/TelemUART.c ****                     /* CTRL_HD_SEND_BREAK - skip to send parity bit at Break signal in Full Duplex 
1537:.\Generated_Source\PSoC4/TelemUART.c ****                     #if( (TelemUART_PARITY_TYPE != TelemUART__B_UART__NONE_REVB) || \
1538:.\Generated_Source\PSoC4/TelemUART.c ****                                         (TelemUART_PARITY_TYPE_SW != 0u) )
1539:.\Generated_Source\PSoC4/TelemUART.c ****                         TelemUART_WriteControlRegister(TelemUART_ReadControlRegister() |
1540:.\Generated_Source\PSoC4/TelemUART.c ****                                                               TelemUART_CTRL_HD_SEND_BREAK);
1541:.\Generated_Source\PSoC4/TelemUART.c ****                     #endif /* End TelemUART_PARITY_TYPE != TelemUART__B_UART__NONE_REVB  */
1542:.\Generated_Source\PSoC4/TelemUART.c **** 
1543:.\Generated_Source\PSoC4/TelemUART.c ****                     #if(TelemUART_TXCLKGEN_DP)
1544:.\Generated_Source\PSoC4/TelemUART.c ****                         tx_period = TelemUART_TXBITCLKTX_COMPLETE_REG;
 832              		.loc 1 1544 0 is_stmt 1
 833 0024 204B     		ldr	r3, .L65+4
 834 0026 1B78     		ldrb	r3, [r3]
 835 0028 DAB2     		uxtb	r2, r3
 836 002a 204B     		ldr	r3, .L65+8
 837 002c 1A70     		strb	r2, [r3]
1545:.\Generated_Source\PSoC4/TelemUART.c ****                         TelemUART_TXBITCLKTX_COMPLETE_REG = TelemUART_TXBITCTR_BREAKBITS;
 838              		.loc 1 1545 0
 839 002e 1E4B     		ldr	r3, .L65+4
 840 0030 6722     		mov	r2, #103
 841 0032 1A70     		strb	r2, [r3]
1546:.\Generated_Source\PSoC4/TelemUART.c ****                     #else
1547:.\Generated_Source\PSoC4/TelemUART.c ****                         tx_period = TelemUART_TXBITCTR_PERIOD_REG;
1548:.\Generated_Source\PSoC4/TelemUART.c ****                         TelemUART_TXBITCTR_PERIOD_REG = TelemUART_TXBITCTR_BREAKBITS8X;
1549:.\Generated_Source\PSoC4/TelemUART.c ****                     #endif /* End TelemUART_TXCLKGEN_DP */
1550:.\Generated_Source\PSoC4/TelemUART.c **** 
1551:.\Generated_Source\PSoC4/TelemUART.c ****                     /* Send zeros*/
1552:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_TXDATA_REG = 0u;
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 43


 842              		.loc 1 1552 0
 843 0034 1E4B     		ldr	r3, .L65+12
 844 0036 0022     		mov	r2, #0
 845 0038 1A70     		strb	r2, [r3]
 846              	.L61:
1553:.\Generated_Source\PSoC4/TelemUART.c **** 
1554:.\Generated_Source\PSoC4/TelemUART.c ****                     do /* wait until transmit starts */
1555:.\Generated_Source\PSoC4/TelemUART.c ****                     {
1556:.\Generated_Source\PSoC4/TelemUART.c ****                         tmpStat = TelemUART_TXSTATUS_REG;
 847              		.loc 1 1556 0 discriminator 1
 848 003a 1E4A     		ldr	r2, .L65+16
 849 003c 3B1C     		mov	r3, r7
 850 003e 0F33     		add	r3, r3, #15
 851 0040 1278     		ldrb	r2, [r2]
 852 0042 1A70     		strb	r2, [r3]
1557:.\Generated_Source\PSoC4/TelemUART.c ****                     }while((tmpStat & TelemUART_TX_STS_FIFO_EMPTY) != 0u);
 853              		.loc 1 1557 0 discriminator 1
 854 0044 3B1C     		mov	r3, r7
 855 0046 0F33     		add	r3, r3, #15
 856 0048 1A78     		ldrb	r2, [r3]
 857 004a 0223     		mov	r3, #2
 858 004c 1340     		and	r3, r2
 859 004e F4D1     		bne	.L61
 860              	.L60:
1558:.\Generated_Source\PSoC4/TelemUART.c ****                 }
1559:.\Generated_Source\PSoC4/TelemUART.c **** 
1560:.\Generated_Source\PSoC4/TelemUART.c ****                 if( (retMode == TelemUART_WAIT_FOR_COMPLETE_REINIT) ||
 861              		.loc 1 1560 0
 862 0050 FB1D     		add	r3, r7, #7
 863 0052 1B78     		ldrb	r3, [r3]
 864 0054 012B     		cmp	r3, #1
 865 0056 03D0     		beq	.L62
 866              		.loc 1 1560 0 is_stmt 0 discriminator 1
 867 0058 FB1D     		add	r3, r7, #7
 868 005a 1B78     		ldrb	r3, [r3]
 869 005c 032B     		cmp	r3, #3
 870 005e 0DD1     		bne	.L63
 871              	.L62:
1561:.\Generated_Source\PSoC4/TelemUART.c ****                     (retMode == TelemUART_SEND_WAIT_REINIT) )
1562:.\Generated_Source\PSoC4/TelemUART.c ****                 {
1563:.\Generated_Source\PSoC4/TelemUART.c ****                     do /*wait until transmit complete*/
1564:.\Generated_Source\PSoC4/TelemUART.c ****                     {
1565:.\Generated_Source\PSoC4/TelemUART.c ****                         tmpStat = TelemUART_TXSTATUS_REG;
 872              		.loc 1 1565 0 is_stmt 1 discriminator 1
 873 0060 144A     		ldr	r2, .L65+16
 874 0062 3B1C     		mov	r3, r7
 875 0064 0F33     		add	r3, r3, #15
 876 0066 1278     		ldrb	r2, [r2]
 877 0068 1A70     		strb	r2, [r3]
1566:.\Generated_Source\PSoC4/TelemUART.c ****                     }while(((uint8)~tmpStat & TelemUART_TX_STS_COMPLETE) != 0u);
 878              		.loc 1 1566 0 discriminator 1
 879 006a 3B1C     		mov	r3, r7
 880 006c 0F33     		add	r3, r3, #15
 881 006e 1B78     		ldrb	r3, [r3]
 882 0070 DB43     		mvn	r3, r3
 883 0072 DBB2     		uxtb	r3, r3
 884 0074 1A1C     		mov	r2, r3
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 44


 885 0076 0123     		mov	r3, #1
 886 0078 1340     		and	r3, r2
 887 007a F1D1     		bne	.L62
 888              	.L63:
1567:.\Generated_Source\PSoC4/TelemUART.c ****                 }
1568:.\Generated_Source\PSoC4/TelemUART.c **** 
1569:.\Generated_Source\PSoC4/TelemUART.c ****                 if( (retMode == TelemUART_WAIT_FOR_COMPLETE_REINIT) ||
 889              		.loc 1 1569 0
 890 007c FB1D     		add	r3, r7, #7
 891 007e 1B78     		ldrb	r3, [r3]
 892 0080 012B     		cmp	r3, #1
 893 0082 07D0     		beq	.L64
 894              		.loc 1 1569 0 is_stmt 0 discriminator 1
 895 0084 FB1D     		add	r3, r7, #7
 896 0086 1B78     		ldrb	r3, [r3]
 897 0088 022B     		cmp	r3, #2
 898 008a 03D0     		beq	.L64
1570:.\Generated_Source\PSoC4/TelemUART.c ****                     (retMode == TelemUART_REINIT) ||
 899              		.loc 1 1570 0 is_stmt 1
 900 008c FB1D     		add	r3, r7, #7
 901 008e 1B78     		ldrb	r3, [r3]
 902 0090 032B     		cmp	r3, #3
 903 0092 03D1     		bne	.L57
 904              	.L64:
1571:.\Generated_Source\PSoC4/TelemUART.c ****                     (retMode == TelemUART_SEND_WAIT_REINIT) )
1572:.\Generated_Source\PSoC4/TelemUART.c ****                 {
1573:.\Generated_Source\PSoC4/TelemUART.c **** 
1574:.\Generated_Source\PSoC4/TelemUART.c ****                     #if(TelemUART_TXCLKGEN_DP)
1575:.\Generated_Source\PSoC4/TelemUART.c ****                         TelemUART_TXBITCLKTX_COMPLETE_REG = tx_period;
 905              		.loc 1 1575 0
 906 0094 044B     		ldr	r3, .L65+4
 907 0096 054A     		ldr	r2, .L65+8
 908 0098 1278     		ldrb	r2, [r2]
 909 009a 1A70     		strb	r2, [r3]
 910              	.L57:
 911              	.LBE2:
1576:.\Generated_Source\PSoC4/TelemUART.c ****                     #else
1577:.\Generated_Source\PSoC4/TelemUART.c ****                         TelemUART_TXBITCTR_PERIOD_REG = tx_period;
1578:.\Generated_Source\PSoC4/TelemUART.c ****                     #endif /* End TelemUART_TXCLKGEN_DP */
1579:.\Generated_Source\PSoC4/TelemUART.c **** 
1580:.\Generated_Source\PSoC4/TelemUART.c ****                     #if( (TelemUART_PARITY_TYPE != TelemUART__B_UART__NONE_REVB) || \
1581:.\Generated_Source\PSoC4/TelemUART.c ****                          (TelemUART_PARITY_TYPE_SW != 0u) )
1582:.\Generated_Source\PSoC4/TelemUART.c ****                         TelemUART_WriteControlRegister(TelemUART_ReadControlRegister() &
1583:.\Generated_Source\PSoC4/TelemUART.c ****                                                       (uint8)~TelemUART_CTRL_HD_SEND_BREAK);
1584:.\Generated_Source\PSoC4/TelemUART.c ****                     #endif /* End TelemUART_PARITY_TYPE != NONE */
1585:.\Generated_Source\PSoC4/TelemUART.c ****                 }
1586:.\Generated_Source\PSoC4/TelemUART.c ****             #endif    /* End TelemUART_HD_ENABLED */
1587:.\Generated_Source\PSoC4/TelemUART.c ****         }
1588:.\Generated_Source\PSoC4/TelemUART.c ****     }
 912              		.loc 1 1588 0
 913 009c BD46     		mov	sp, r7
 914 009e 04B0     		add	sp, sp, #16
 915              		@ sp needed for prologue
 916 00a0 80BD     		pop	{r7, pc}
 917              	.L66:
 918 00a2 C046     		.align	2
 919              	.L65:
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 45


 920 00a4 00000000 		.word	TelemUART_initVar
 921 00a8 32000F40 		.word	1074724914
 922 00ac 01000000 		.word	tx_period.4704
 923 00b0 43000F40 		.word	1074724931
 924 00b4 63000F40 		.word	1074724963
 925              		.cfi_endproc
 926              	.LFE15:
 927              		.size	TelemUART_SendBreak, .-TelemUART_SendBreak
 928              		.section	.text.TelemUART_SetTxAddressMode,"ax",%progbits
 929              		.align	2
 930              		.global	TelemUART_SetTxAddressMode
 931              		.code	16
 932              		.thumb_func
 933              		.type	TelemUART_SetTxAddressMode, %function
 934              	TelemUART_SetTxAddressMode:
 935              	.LFB16:
1589:.\Generated_Source\PSoC4/TelemUART.c **** 
1590:.\Generated_Source\PSoC4/TelemUART.c **** 
1591:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
1592:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_SetTxAddressMode
1593:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
1594:.\Generated_Source\PSoC4/TelemUART.c ****     *
1595:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
1596:.\Generated_Source\PSoC4/TelemUART.c ****     *  Set the transmit addressing mode
1597:.\Generated_Source\PSoC4/TelemUART.c ****     *
1598:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
1599:.\Generated_Source\PSoC4/TelemUART.c ****     *  addressMode: 0 -> Space
1600:.\Generated_Source\PSoC4/TelemUART.c ****     *               1 -> Mark
1601:.\Generated_Source\PSoC4/TelemUART.c ****     *
1602:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
1603:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
1604:.\Generated_Source\PSoC4/TelemUART.c ****     *
1605:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
1606:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_SetTxAddressMode(uint8 addressMode) 
1607:.\Generated_Source\PSoC4/TelemUART.c ****     {
 936              		.loc 1 1607 0
 937              		.cfi_startproc
 938 0000 80B5     		push	{r7, lr}
 939              	.LCFI44:
 940              		.cfi_def_cfa_offset 8
 941              		.cfi_offset 7, -8
 942              		.cfi_offset 14, -4
 943 0002 82B0     		sub	sp, sp, #8
 944              	.LCFI45:
 945              		.cfi_def_cfa_offset 16
 946 0004 00AF     		add	r7, sp, #0
 947              	.LCFI46:
 948              		.cfi_def_cfa_register 7
 949 0006 021C     		mov	r2, r0
 950 0008 FB1D     		add	r3, r7, #7
 951 000a 1A70     		strb	r2, [r3]
1608:.\Generated_Source\PSoC4/TelemUART.c ****         /* Mark/Space sending enable*/
1609:.\Generated_Source\PSoC4/TelemUART.c ****         if(addressMode != 0u)
1610:.\Generated_Source\PSoC4/TelemUART.c ****         {
1611:.\Generated_Source\PSoC4/TelemUART.c ****             #if( TelemUART_CONTROL_REG_REMOVED == 0u )
1612:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_WriteControlRegister(TelemUART_ReadControlRegister() |
1613:.\Generated_Source\PSoC4/TelemUART.c ****                                                       TelemUART_CTRL_MARK);
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 46


1614:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_CONTROL_REG_REMOVED == 0u */
1615:.\Generated_Source\PSoC4/TelemUART.c ****         }
1616:.\Generated_Source\PSoC4/TelemUART.c ****         else
1617:.\Generated_Source\PSoC4/TelemUART.c ****         {
1618:.\Generated_Source\PSoC4/TelemUART.c ****             #if( TelemUART_CONTROL_REG_REMOVED == 0u )
1619:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_WriteControlRegister(TelemUART_ReadControlRegister() &
1620:.\Generated_Source\PSoC4/TelemUART.c ****                                                     (uint8)~TelemUART_CTRL_MARK);
1621:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_CONTROL_REG_REMOVED == 0u */
1622:.\Generated_Source\PSoC4/TelemUART.c ****         }
1623:.\Generated_Source\PSoC4/TelemUART.c ****     }
 952              		.loc 1 1623 0
 953 000c BD46     		mov	sp, r7
 954 000e 02B0     		add	sp, sp, #8
 955              		@ sp needed for prologue
 956 0010 80BD     		pop	{r7, pc}
 957              		.cfi_endproc
 958              	.LFE16:
 959              		.size	TelemUART_SetTxAddressMode, .-TelemUART_SetTxAddressMode
 960 0012 C046     		.bss
 961              	tx_period.4704:
 962 0001 00       		.space	1
 963              		.text
 964              	.Letext0:
 965              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 966              		.section	.debug_info,"",%progbits
 967              	.Ldebug_info0:
 968 0000 CA030000 		.4byte	0x3ca
 969 0004 0200     		.2byte	0x2
 970 0006 00000000 		.4byte	.Ldebug_abbrev0
 971 000a 04       		.byte	0x4
 972 000b 01       		.uleb128 0x1
 973 000c BB020000 		.4byte	.LASF45
 974 0010 01       		.byte	0x1
 975 0011 0E000000 		.4byte	.LASF46
 976 0015 55000000 		.4byte	.LASF47
 977 0019 00000000 		.4byte	.Ldebug_ranges0+0
 978 001d 00000000 		.4byte	0
 979 0021 00000000 		.4byte	0
 980 0025 00000000 		.4byte	.Ldebug_line0
 981 0029 02       		.uleb128 0x2
 982 002a 01       		.byte	0x1
 983 002b 06       		.byte	0x6
 984 002c 4C030000 		.4byte	.LASF0
 985 0030 02       		.uleb128 0x2
 986 0031 01       		.byte	0x1
 987 0032 08       		.byte	0x8
 988 0033 72020000 		.4byte	.LASF1
 989 0037 02       		.uleb128 0x2
 990 0038 02       		.byte	0x2
 991 0039 05       		.byte	0x5
 992 003a B1020000 		.4byte	.LASF2
 993 003e 02       		.uleb128 0x2
 994 003f 02       		.byte	0x2
 995 0040 07       		.byte	0x7
 996 0041 3B000000 		.4byte	.LASF3
 997 0045 02       		.uleb128 0x2
 998 0046 04       		.byte	0x4
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 47


 999 0047 05       		.byte	0x5
 1000 0048 1E030000 		.4byte	.LASF4
 1001 004c 02       		.uleb128 0x2
 1002 004d 04       		.byte	0x4
 1003 004e 07       		.byte	0x7
 1004 004f CE000000 		.4byte	.LASF5
 1005 0053 02       		.uleb128 0x2
 1006 0054 08       		.byte	0x8
 1007 0055 05       		.byte	0x5
 1008 0056 00000000 		.4byte	.LASF6
 1009 005a 02       		.uleb128 0x2
 1010 005b 08       		.byte	0x8
 1011 005c 07       		.byte	0x7
 1012 005d 1B020000 		.4byte	.LASF7
 1013 0061 03       		.uleb128 0x3
 1014 0062 04       		.byte	0x4
 1015 0063 05       		.byte	0x5
 1016 0064 696E7400 		.ascii	"int\000"
 1017 0068 02       		.uleb128 0x2
 1018 0069 04       		.byte	0x4
 1019 006a 07       		.byte	0x7
 1020 006b D9010000 		.4byte	.LASF8
 1021 006f 04       		.uleb128 0x4
 1022 0070 E0000000 		.4byte	.LASF9
 1023 0074 02       		.byte	0x2
 1024 0075 5B       		.byte	0x5b
 1025 0076 30000000 		.4byte	0x30
 1026 007a 04       		.uleb128 0x4
 1027 007b AA010000 		.4byte	.LASF10
 1028 007f 02       		.byte	0x2
 1029 0080 5C       		.byte	0x5c
 1030 0081 3E000000 		.4byte	0x3e
 1031 0085 02       		.uleb128 0x2
 1032 0086 04       		.byte	0x4
 1033 0087 04       		.byte	0x4
 1034 0088 A7000000 		.4byte	.LASF11
 1035 008c 02       		.uleb128 0x2
 1036 008d 08       		.byte	0x8
 1037 008e 04       		.byte	0x4
 1038 008f 67010000 		.4byte	.LASF12
 1039 0093 04       		.uleb128 0x4
 1040 0094 89020000 		.4byte	.LASF13
 1041 0098 02       		.byte	0x2
 1042 0099 6C       		.byte	0x6c
 1043 009a 9E000000 		.4byte	0x9e
 1044 009e 02       		.uleb128 0x2
 1045 009f 01       		.byte	0x1
 1046 00a0 08       		.byte	0x8
 1047 00a1 A4020000 		.4byte	.LASF14
 1048 00a5 04       		.uleb128 0x4
 1049 00a6 B9000000 		.4byte	.LASF15
 1050 00aa 02       		.byte	0x2
 1051 00ab F0       		.byte	0xf0
 1052 00ac B0000000 		.4byte	0xb0
 1053 00b0 05       		.uleb128 0x5
 1054 00b1 6F000000 		.4byte	0x6f
 1055 00b5 02       		.uleb128 0x2
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 48


 1056 00b6 04       		.byte	0x4
 1057 00b7 07       		.byte	0x7
 1058 00b8 80020000 		.4byte	.LASF16
 1059 00bc 06       		.uleb128 0x6
 1060 00bd 01       		.byte	0x1
 1061 00be BE000000 		.4byte	.LASF17
 1062 00c2 01       		.byte	0x1
 1063 00c3 49       		.byte	0x49
 1064 00c4 01       		.byte	0x1
 1065 00c5 00000000 		.4byte	.LFB0
 1066 00c9 24000000 		.4byte	.LFE0
 1067 00cd 00000000 		.4byte	.LLST0
 1068 00d1 01       		.byte	0x1
 1069 00d2 07       		.uleb128 0x7
 1070 00d3 01       		.byte	0x1
 1071 00d4 50020000 		.4byte	.LASF18
 1072 00d8 01       		.byte	0x1
 1073 00d9 65       		.byte	0x65
 1074 00da 01       		.byte	0x1
 1075 00db 00000000 		.4byte	.LFB1
 1076 00df 28000000 		.4byte	.LFE1
 1077 00e3 2C000000 		.4byte	.LLST1
 1078 00e7 01       		.byte	0x1
 1079 00e8 08       		.uleb128 0x8
 1080 00e9 01       		.byte	0x1
 1081 00ea 3B030000 		.4byte	.LASF19
 1082 00ee 01       		.byte	0x1
 1083 00ef AE       		.byte	0xae
 1084 00f0 01       		.byte	0x1
 1085 00f1 00000000 		.4byte	.LFB2
 1086 00f5 38000000 		.4byte	.LFE2
 1087 00f9 58000000 		.4byte	.LLST2
 1088 00fd 01       		.byte	0x1
 1089 00fe 11010000 		.4byte	0x111
 1090 0102 09       		.uleb128 0x9
 1091 0103 0A010000 		.4byte	.LASF21
 1092 0107 01       		.byte	0x1
 1093 0108 B0       		.byte	0xb0
 1094 0109 6F000000 		.4byte	0x6f
 1095 010d 02       		.byte	0x2
 1096 010e 91       		.byte	0x91
 1097 010f 6F       		.sleb128 -17
 1098 0110 00       		.byte	0
 1099 0111 08       		.uleb128 0x8
 1100 0112 01       		.byte	0x1
 1101 0113 5D030000 		.4byte	.LASF20
 1102 0117 01       		.byte	0x1
 1103 0118 E3       		.byte	0xe3
 1104 0119 01       		.byte	0x1
 1105 011a 00000000 		.4byte	.LFB3
 1106 011e 38000000 		.4byte	.LFE3
 1107 0122 90000000 		.4byte	.LLST3
 1108 0126 01       		.byte	0x1
 1109 0127 3A010000 		.4byte	0x13a
 1110 012b 09       		.uleb128 0x9
 1111 012c 0A010000 		.4byte	.LASF21
 1112 0130 01       		.byte	0x1
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 49


 1113 0131 E5       		.byte	0xe5
 1114 0132 6F000000 		.4byte	0x6f
 1115 0136 02       		.byte	0x2
 1116 0137 91       		.byte	0x91
 1117 0138 6F       		.sleb128 -17
 1118 0139 00       		.byte	0
 1119 013a 0A       		.uleb128 0xa
 1120 013b 01       		.byte	0x1
 1121 013c 32020000 		.4byte	.LASF28
 1122 0140 01       		.byte	0x1
 1123 0141 1901     		.2byte	0x119
 1124 0143 01       		.byte	0x1
 1125 0144 6F000000 		.4byte	0x6f
 1126 0148 00000000 		.4byte	.LFB4
 1127 014c 0C000000 		.4byte	.LFE4
 1128 0150 C8000000 		.4byte	.LLST4
 1129 0154 01       		.byte	0x1
 1130 0155 0B       		.uleb128 0xb
 1131 0156 01       		.byte	0x1
 1132 0157 36010000 		.4byte	.LASF22
 1133 015b 01       		.byte	0x1
 1134 015c 3101     		.2byte	0x131
 1135 015e 01       		.byte	0x1
 1136 015f 00000000 		.4byte	.LFB5
 1137 0163 12000000 		.4byte	.LFE5
 1138 0167 F4000000 		.4byte	.LLST5
 1139 016b 01       		.byte	0x1
 1140 016c 80010000 		.4byte	0x180
 1141 0170 0C       		.uleb128 0xc
 1142 0171 E6000000 		.4byte	.LASF24
 1143 0175 01       		.byte	0x1
 1144 0176 3101     		.2byte	0x131
 1145 0178 6F000000 		.4byte	0x6f
 1146 017c 02       		.byte	0x2
 1147 017d 91       		.byte	0x91
 1148 017e 77       		.sleb128 -9
 1149 017f 00       		.byte	0
 1150 0180 0B       		.uleb128 0xb
 1151 0181 01       		.byte	0x1
 1152 0182 E6010000 		.4byte	.LASF23
 1153 0186 01       		.byte	0x1
 1154 0187 C803     		.2byte	0x3c8
 1155 0189 01       		.byte	0x1
 1156 018a 00000000 		.4byte	.LFB6
 1157 018e 20000000 		.4byte	.LFE6
 1158 0192 2C010000 		.4byte	.LLST6
 1159 0196 01       		.byte	0x1
 1160 0197 AB010000 		.4byte	0x1ab
 1161 019b 0C       		.uleb128 0xc
 1162 019c 85010000 		.4byte	.LASF25
 1163 01a0 01       		.byte	0x1
 1164 01a1 C803     		.2byte	0x3c8
 1165 01a3 6F000000 		.4byte	0x6f
 1166 01a7 02       		.byte	0x2
 1167 01a8 91       		.byte	0x91
 1168 01a9 77       		.sleb128 -9
 1169 01aa 00       		.byte	0
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 50


 1170 01ab 0B       		.uleb128 0xb
 1171 01ac 01       		.byte	0x1
 1172 01ad C3010000 		.4byte	.LASF26
 1173 01b1 01       		.byte	0x1
 1174 01b2 EA03     		.2byte	0x3ea
 1175 01b4 01       		.byte	0x1
 1176 01b5 00000000 		.4byte	.LFB7
 1177 01b9 2C000000 		.4byte	.LFE7
 1178 01bd 64010000 		.4byte	.LLST7
 1179 01c1 01       		.byte	0x1
 1180 01c2 D6010000 		.4byte	0x1d6
 1181 01c6 0C       		.uleb128 0xc
 1182 01c7 8F020000 		.4byte	.LASF27
 1183 01cb 01       		.byte	0x1
 1184 01cc EA03     		.2byte	0x3ea
 1185 01ce 6F000000 		.4byte	0x6f
 1186 01d2 02       		.byte	0x2
 1187 01d3 91       		.byte	0x91
 1188 01d4 77       		.sleb128 -9
 1189 01d5 00       		.byte	0
 1190 01d6 0A       		.uleb128 0xa
 1191 01d7 01       		.byte	0x1
 1192 01d8 6E010000 		.4byte	.LASF29
 1193 01dc 01       		.byte	0x1
 1194 01dd 2E04     		.2byte	0x42e
 1195 01df 01       		.byte	0x1
 1196 01e0 6F000000 		.4byte	0x6f
 1197 01e4 00000000 		.4byte	.LFB8
 1198 01e8 14000000 		.4byte	.LFE8
 1199 01ec 9C010000 		.4byte	.LLST8
 1200 01f0 01       		.byte	0x1
 1201 01f1 0B       		.uleb128 0xb
 1202 01f2 01       		.byte	0x1
 1203 01f3 55010000 		.4byte	.LASF30
 1204 01f7 01       		.byte	0x1
 1205 01f8 5204     		.2byte	0x452
 1206 01fa 01       		.byte	0x1
 1207 01fb 00000000 		.4byte	.LFB9
 1208 01ff 34000000 		.4byte	.LFE9
 1209 0203 C8010000 		.4byte	.LLST9
 1210 0207 01       		.byte	0x1
 1211 0208 1C020000 		.4byte	0x21c
 1212 020c 0C       		.uleb128 0xc
 1213 020d 8F020000 		.4byte	.LASF27
 1214 0211 01       		.byte	0x1
 1215 0212 5204     		.2byte	0x452
 1216 0214 6F000000 		.4byte	0x6f
 1217 0218 02       		.byte	0x2
 1218 0219 91       		.byte	0x91
 1219 021a 77       		.sleb128 -9
 1220 021b 00       		.byte	0
 1221 021c 0D       		.uleb128 0xd
 1222 021d 01       		.byte	0x1
 1223 021e 27030000 		.4byte	.LASF31
 1224 0222 01       		.byte	0x1
 1225 0223 AE04     		.2byte	0x4ae
 1226 0225 01       		.byte	0x1
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 51


 1227 0226 00000000 		.4byte	.LFB10
 1228 022a 54000000 		.4byte	.LFE10
 1229 022e 00020000 		.4byte	.LLST10
 1230 0232 01       		.byte	0x1
 1231 0233 56020000 		.4byte	0x256
 1232 0237 0C       		.uleb128 0xc
 1233 0238 4E000000 		.4byte	.LASF32
 1234 023c 01       		.byte	0x1
 1235 023d AE04     		.2byte	0x4ae
 1236 023f 56020000 		.4byte	0x256
 1237 0243 02       		.byte	0x2
 1238 0244 91       		.byte	0x91
 1239 0245 6C       		.sleb128 -20
 1240 0246 0E       		.uleb128 0xe
 1241 0247 A0010000 		.4byte	.LASF33
 1242 024b 01       		.byte	0x1
 1243 024c B004     		.2byte	0x4b0
 1244 024e 7A000000 		.4byte	0x7a
 1245 0252 02       		.byte	0x2
 1246 0253 91       		.byte	0x91
 1247 0254 76       		.sleb128 -10
 1248 0255 00       		.byte	0
 1249 0256 0F       		.uleb128 0xf
 1250 0257 04       		.byte	0x4
 1251 0258 5C020000 		.4byte	0x25c
 1252 025c 10       		.uleb128 0x10
 1253 025d 93000000 		.4byte	0x93
 1254 0261 0D       		.uleb128 0xd
 1255 0262 01       		.byte	0x1
 1256 0263 5F020000 		.4byte	.LASF34
 1257 0267 01       		.byte	0x1
 1258 0268 D404     		.2byte	0x4d4
 1259 026a 01       		.byte	0x1
 1260 026b 00000000 		.4byte	.LFB11
 1261 026f 58000000 		.4byte	.LFE11
 1262 0273 38020000 		.4byte	.LLST11
 1263 0277 01       		.byte	0x1
 1264 0278 AA020000 		.4byte	0x2aa
 1265 027c 0C       		.uleb128 0xc
 1266 027d 4E000000 		.4byte	.LASF32
 1267 0281 01       		.byte	0x1
 1268 0282 D404     		.2byte	0x4d4
 1269 0284 AA020000 		.4byte	0x2aa
 1270 0288 02       		.byte	0x2
 1271 0289 91       		.byte	0x91
 1272 028a 6C       		.sleb128 -20
 1273 028b 0C       		.uleb128 0xc
 1274 028c 00010000 		.4byte	.LASF35
 1275 0290 01       		.byte	0x1
 1276 0291 D404     		.2byte	0x4d4
 1277 0293 6F000000 		.4byte	0x6f
 1278 0297 02       		.byte	0x2
 1279 0298 91       		.byte	0x91
 1280 0299 6B       		.sleb128 -21
 1281 029a 0E       		.uleb128 0xe
 1282 029b A0010000 		.4byte	.LASF33
 1283 029f 01       		.byte	0x1
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 52


 1284 02a0 D704     		.2byte	0x4d7
 1285 02a2 6F000000 		.4byte	0x6f
 1286 02a6 02       		.byte	0x2
 1287 02a7 91       		.byte	0x91
 1288 02a8 77       		.sleb128 -9
 1289 02a9 00       		.byte	0
 1290 02aa 0F       		.uleb128 0xf
 1291 02ab 04       		.byte	0x4
 1292 02ac B0020000 		.4byte	0x2b0
 1293 02b0 10       		.uleb128 0x10
 1294 02b1 6F000000 		.4byte	0x6f
 1295 02b5 0D       		.uleb128 0xd
 1296 02b6 01       		.byte	0x1
 1297 02b7 EE000000 		.4byte	.LASF36
 1298 02bb 01       		.byte	0x1
 1299 02bc F904     		.2byte	0x4f9
 1300 02be 01       		.byte	0x1
 1301 02bf 00000000 		.4byte	.LFB12
 1302 02c3 34000000 		.4byte	.LFE12
 1303 02c7 70020000 		.4byte	.LLST12
 1304 02cb 01       		.byte	0x1
 1305 02cc E0020000 		.4byte	0x2e0
 1306 02d0 0C       		.uleb128 0xc
 1307 02d1 8F020000 		.4byte	.LASF27
 1308 02d5 01       		.byte	0x1
 1309 02d6 F904     		.2byte	0x4f9
 1310 02d8 6F000000 		.4byte	0x6f
 1311 02dc 02       		.byte	0x2
 1312 02dd 91       		.byte	0x91
 1313 02de 77       		.sleb128 -9
 1314 02df 00       		.byte	0
 1315 02e0 11       		.uleb128 0x11
 1316 02e1 01       		.byte	0x1
 1317 02e2 04030000 		.4byte	.LASF48
 1318 02e6 01       		.byte	0x1
 1319 02e7 1E05     		.2byte	0x51e
 1320 02e9 01       		.byte	0x1
 1321 02ea 6F000000 		.4byte	0x6f
 1322 02ee 00000000 		.4byte	.LFB13
 1323 02f2 48000000 		.4byte	.LFE13
 1324 02f6 A8020000 		.4byte	.LLST13
 1325 02fa 01       		.byte	0x1
 1326 02fb 0F030000 		.4byte	0x30f
 1327 02ff 0E       		.uleb128 0xe
 1328 0300 58030000 		.4byte	.LASF37
 1329 0304 01       		.byte	0x1
 1330 0305 2105     		.2byte	0x521
 1331 0307 6F000000 		.4byte	0x6f
 1332 030b 02       		.byte	0x2
 1333 030c 91       		.byte	0x91
 1334 030d 77       		.sleb128 -9
 1335 030e 00       		.byte	0
 1336 030f 0D       		.uleb128 0xd
 1337 0310 01       		.byte	0x1
 1338 0311 03020000 		.4byte	.LASF38
 1339 0315 01       		.byte	0x1
 1340 0316 7405     		.2byte	0x574
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 53


 1341 0318 01       		.byte	0x1
 1342 0319 00000000 		.4byte	.LFB14
 1343 031d 44000000 		.4byte	.LFE14
 1344 0321 E0020000 		.4byte	.LLST14
 1345 0325 01       		.byte	0x1
 1346 0326 3A030000 		.4byte	0x33a
 1347 032a 0E       		.uleb128 0xe
 1348 032b 0A010000 		.4byte	.LASF21
 1349 032f 01       		.byte	0x1
 1350 0330 7605     		.2byte	0x576
 1351 0332 6F000000 		.4byte	0x6f
 1352 0336 02       		.byte	0x2
 1353 0337 91       		.byte	0x91
 1354 0338 6F       		.sleb128 -17
 1355 0339 00       		.byte	0
 1356 033a 0B       		.uleb128 0xb
 1357 033b 01       		.byte	0x1
 1358 033c 8C010000 		.4byte	.LASF39
 1359 0340 01       		.byte	0x1
 1360 0341 CD05     		.2byte	0x5cd
 1361 0343 01       		.byte	0x1
 1362 0344 00000000 		.4byte	.LFB15
 1363 0348 B8000000 		.4byte	.LFE15
 1364 034c 18030000 		.4byte	.LLST15
 1365 0350 01       		.byte	0x1
 1366 0351 90030000 		.4byte	0x390
 1367 0355 0C       		.uleb128 0xc
 1368 0356 A9020000 		.4byte	.LASF40
 1369 035a 01       		.byte	0x1
 1370 035b CD05     		.2byte	0x5cd
 1371 035d 6F000000 		.4byte	0x6f
 1372 0361 02       		.byte	0x2
 1373 0362 91       		.byte	0x91
 1374 0363 6F       		.sleb128 -17
 1375 0364 12       		.uleb128 0x12
 1376 0365 14000000 		.4byte	.LBB2
 1377 0369 9C000000 		.4byte	.LBE2
 1378 036d 0E       		.uleb128 0xe
 1379 036e 33000000 		.4byte	.LASF41
 1380 0372 01       		.byte	0x1
 1381 0373 D505     		.2byte	0x5d5
 1382 0375 6F000000 		.4byte	0x6f
 1383 0379 02       		.byte	0x2
 1384 037a 91       		.byte	0x91
 1385 037b 77       		.sleb128 -9
 1386 037c 0E       		.uleb128 0xe
 1387 037d 9A020000 		.4byte	.LASF42
 1388 0381 01       		.byte	0x1
 1389 0382 FB05     		.2byte	0x5fb
 1390 0384 6F000000 		.4byte	0x6f
 1391 0388 05       		.byte	0x5
 1392 0389 03       		.byte	0x3
 1393 038a 01000000 		.4byte	tx_period.4704
 1394 038e 00       		.byte	0
 1395 038f 00       		.byte	0
 1396 0390 0B       		.uleb128 0xb
 1397 0391 01       		.byte	0x1
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 54


 1398 0392 1B010000 		.4byte	.LASF43
 1399 0396 01       		.byte	0x1
 1400 0397 4606     		.2byte	0x646
 1401 0399 01       		.byte	0x1
 1402 039a 00000000 		.4byte	.LFB16
 1403 039e 12000000 		.4byte	.LFE16
 1404 03a2 50030000 		.4byte	.LLST16
 1405 03a6 01       		.byte	0x1
 1406 03a7 BB030000 		.4byte	0x3bb
 1407 03ab 0C       		.uleb128 0xc
 1408 03ac AD000000 		.4byte	.LASF44
 1409 03b0 01       		.byte	0x1
 1410 03b1 4606     		.2byte	0x646
 1411 03b3 6F000000 		.4byte	0x6f
 1412 03b7 02       		.byte	0x2
 1413 03b8 91       		.byte	0x91
 1414 03b9 77       		.sleb128 -9
 1415 03ba 00       		.byte	0
 1416 03bb 13       		.uleb128 0x13
 1417 03bc B1010000 		.4byte	.LASF49
 1418 03c0 01       		.byte	0x1
 1419 03c1 1C       		.byte	0x1c
 1420 03c2 6F000000 		.4byte	0x6f
 1421 03c6 01       		.byte	0x1
 1422 03c7 05       		.byte	0x5
 1423 03c8 03       		.byte	0x3
 1424 03c9 00000000 		.4byte	TelemUART_initVar
 1425 03cd 00       		.byte	0
 1426              		.section	.debug_abbrev,"",%progbits
 1427              	.Ldebug_abbrev0:
 1428 0000 01       		.uleb128 0x1
 1429 0001 11       		.uleb128 0x11
 1430 0002 01       		.byte	0x1
 1431 0003 25       		.uleb128 0x25
 1432 0004 0E       		.uleb128 0xe
 1433 0005 13       		.uleb128 0x13
 1434 0006 0B       		.uleb128 0xb
 1435 0007 03       		.uleb128 0x3
 1436 0008 0E       		.uleb128 0xe
 1437 0009 1B       		.uleb128 0x1b
 1438 000a 0E       		.uleb128 0xe
 1439 000b 55       		.uleb128 0x55
 1440 000c 06       		.uleb128 0x6
 1441 000d 11       		.uleb128 0x11
 1442 000e 01       		.uleb128 0x1
 1443 000f 52       		.uleb128 0x52
 1444 0010 01       		.uleb128 0x1
 1445 0011 10       		.uleb128 0x10
 1446 0012 06       		.uleb128 0x6
 1447 0013 00       		.byte	0
 1448 0014 00       		.byte	0
 1449 0015 02       		.uleb128 0x2
 1450 0016 24       		.uleb128 0x24
 1451 0017 00       		.byte	0
 1452 0018 0B       		.uleb128 0xb
 1453 0019 0B       		.uleb128 0xb
 1454 001a 3E       		.uleb128 0x3e
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 55


 1455 001b 0B       		.uleb128 0xb
 1456 001c 03       		.uleb128 0x3
 1457 001d 0E       		.uleb128 0xe
 1458 001e 00       		.byte	0
 1459 001f 00       		.byte	0
 1460 0020 03       		.uleb128 0x3
 1461 0021 24       		.uleb128 0x24
 1462 0022 00       		.byte	0
 1463 0023 0B       		.uleb128 0xb
 1464 0024 0B       		.uleb128 0xb
 1465 0025 3E       		.uleb128 0x3e
 1466 0026 0B       		.uleb128 0xb
 1467 0027 03       		.uleb128 0x3
 1468 0028 08       		.uleb128 0x8
 1469 0029 00       		.byte	0
 1470 002a 00       		.byte	0
 1471 002b 04       		.uleb128 0x4
 1472 002c 16       		.uleb128 0x16
 1473 002d 00       		.byte	0
 1474 002e 03       		.uleb128 0x3
 1475 002f 0E       		.uleb128 0xe
 1476 0030 3A       		.uleb128 0x3a
 1477 0031 0B       		.uleb128 0xb
 1478 0032 3B       		.uleb128 0x3b
 1479 0033 0B       		.uleb128 0xb
 1480 0034 49       		.uleb128 0x49
 1481 0035 13       		.uleb128 0x13
 1482 0036 00       		.byte	0
 1483 0037 00       		.byte	0
 1484 0038 05       		.uleb128 0x5
 1485 0039 35       		.uleb128 0x35
 1486 003a 00       		.byte	0
 1487 003b 49       		.uleb128 0x49
 1488 003c 13       		.uleb128 0x13
 1489 003d 00       		.byte	0
 1490 003e 00       		.byte	0
 1491 003f 06       		.uleb128 0x6
 1492 0040 2E       		.uleb128 0x2e
 1493 0041 00       		.byte	0
 1494 0042 3F       		.uleb128 0x3f
 1495 0043 0C       		.uleb128 0xc
 1496 0044 03       		.uleb128 0x3
 1497 0045 0E       		.uleb128 0xe
 1498 0046 3A       		.uleb128 0x3a
 1499 0047 0B       		.uleb128 0xb
 1500 0048 3B       		.uleb128 0x3b
 1501 0049 0B       		.uleb128 0xb
 1502 004a 27       		.uleb128 0x27
 1503 004b 0C       		.uleb128 0xc
 1504 004c 11       		.uleb128 0x11
 1505 004d 01       		.uleb128 0x1
 1506 004e 12       		.uleb128 0x12
 1507 004f 01       		.uleb128 0x1
 1508 0050 40       		.uleb128 0x40
 1509 0051 06       		.uleb128 0x6
 1510 0052 9642     		.uleb128 0x2116
 1511 0054 0C       		.uleb128 0xc
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 56


 1512 0055 00       		.byte	0
 1513 0056 00       		.byte	0
 1514 0057 07       		.uleb128 0x7
 1515 0058 2E       		.uleb128 0x2e
 1516 0059 00       		.byte	0
 1517 005a 3F       		.uleb128 0x3f
 1518 005b 0C       		.uleb128 0xc
 1519 005c 03       		.uleb128 0x3
 1520 005d 0E       		.uleb128 0xe
 1521 005e 3A       		.uleb128 0x3a
 1522 005f 0B       		.uleb128 0xb
 1523 0060 3B       		.uleb128 0x3b
 1524 0061 0B       		.uleb128 0xb
 1525 0062 27       		.uleb128 0x27
 1526 0063 0C       		.uleb128 0xc
 1527 0064 11       		.uleb128 0x11
 1528 0065 01       		.uleb128 0x1
 1529 0066 12       		.uleb128 0x12
 1530 0067 01       		.uleb128 0x1
 1531 0068 40       		.uleb128 0x40
 1532 0069 06       		.uleb128 0x6
 1533 006a 9742     		.uleb128 0x2117
 1534 006c 0C       		.uleb128 0xc
 1535 006d 00       		.byte	0
 1536 006e 00       		.byte	0
 1537 006f 08       		.uleb128 0x8
 1538 0070 2E       		.uleb128 0x2e
 1539 0071 01       		.byte	0x1
 1540 0072 3F       		.uleb128 0x3f
 1541 0073 0C       		.uleb128 0xc
 1542 0074 03       		.uleb128 0x3
 1543 0075 0E       		.uleb128 0xe
 1544 0076 3A       		.uleb128 0x3a
 1545 0077 0B       		.uleb128 0xb
 1546 0078 3B       		.uleb128 0x3b
 1547 0079 0B       		.uleb128 0xb
 1548 007a 27       		.uleb128 0x27
 1549 007b 0C       		.uleb128 0xc
 1550 007c 11       		.uleb128 0x11
 1551 007d 01       		.uleb128 0x1
 1552 007e 12       		.uleb128 0x12
 1553 007f 01       		.uleb128 0x1
 1554 0080 40       		.uleb128 0x40
 1555 0081 06       		.uleb128 0x6
 1556 0082 9642     		.uleb128 0x2116
 1557 0084 0C       		.uleb128 0xc
 1558 0085 01       		.uleb128 0x1
 1559 0086 13       		.uleb128 0x13
 1560 0087 00       		.byte	0
 1561 0088 00       		.byte	0
 1562 0089 09       		.uleb128 0x9
 1563 008a 34       		.uleb128 0x34
 1564 008b 00       		.byte	0
 1565 008c 03       		.uleb128 0x3
 1566 008d 0E       		.uleb128 0xe
 1567 008e 3A       		.uleb128 0x3a
 1568 008f 0B       		.uleb128 0xb
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 57


 1569 0090 3B       		.uleb128 0x3b
 1570 0091 0B       		.uleb128 0xb
 1571 0092 49       		.uleb128 0x49
 1572 0093 13       		.uleb128 0x13
 1573 0094 02       		.uleb128 0x2
 1574 0095 0A       		.uleb128 0xa
 1575 0096 00       		.byte	0
 1576 0097 00       		.byte	0
 1577 0098 0A       		.uleb128 0xa
 1578 0099 2E       		.uleb128 0x2e
 1579 009a 00       		.byte	0
 1580 009b 3F       		.uleb128 0x3f
 1581 009c 0C       		.uleb128 0xc
 1582 009d 03       		.uleb128 0x3
 1583 009e 0E       		.uleb128 0xe
 1584 009f 3A       		.uleb128 0x3a
 1585 00a0 0B       		.uleb128 0xb
 1586 00a1 3B       		.uleb128 0x3b
 1587 00a2 05       		.uleb128 0x5
 1588 00a3 27       		.uleb128 0x27
 1589 00a4 0C       		.uleb128 0xc
 1590 00a5 49       		.uleb128 0x49
 1591 00a6 13       		.uleb128 0x13
 1592 00a7 11       		.uleb128 0x11
 1593 00a8 01       		.uleb128 0x1
 1594 00a9 12       		.uleb128 0x12
 1595 00aa 01       		.uleb128 0x1
 1596 00ab 40       		.uleb128 0x40
 1597 00ac 06       		.uleb128 0x6
 1598 00ad 9742     		.uleb128 0x2117
 1599 00af 0C       		.uleb128 0xc
 1600 00b0 00       		.byte	0
 1601 00b1 00       		.byte	0
 1602 00b2 0B       		.uleb128 0xb
 1603 00b3 2E       		.uleb128 0x2e
 1604 00b4 01       		.byte	0x1
 1605 00b5 3F       		.uleb128 0x3f
 1606 00b6 0C       		.uleb128 0xc
 1607 00b7 03       		.uleb128 0x3
 1608 00b8 0E       		.uleb128 0xe
 1609 00b9 3A       		.uleb128 0x3a
 1610 00ba 0B       		.uleb128 0xb
 1611 00bb 3B       		.uleb128 0x3b
 1612 00bc 05       		.uleb128 0x5
 1613 00bd 27       		.uleb128 0x27
 1614 00be 0C       		.uleb128 0xc
 1615 00bf 11       		.uleb128 0x11
 1616 00c0 01       		.uleb128 0x1
 1617 00c1 12       		.uleb128 0x12
 1618 00c2 01       		.uleb128 0x1
 1619 00c3 40       		.uleb128 0x40
 1620 00c4 06       		.uleb128 0x6
 1621 00c5 9742     		.uleb128 0x2117
 1622 00c7 0C       		.uleb128 0xc
 1623 00c8 01       		.uleb128 0x1
 1624 00c9 13       		.uleb128 0x13
 1625 00ca 00       		.byte	0
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 58


 1626 00cb 00       		.byte	0
 1627 00cc 0C       		.uleb128 0xc
 1628 00cd 05       		.uleb128 0x5
 1629 00ce 00       		.byte	0
 1630 00cf 03       		.uleb128 0x3
 1631 00d0 0E       		.uleb128 0xe
 1632 00d1 3A       		.uleb128 0x3a
 1633 00d2 0B       		.uleb128 0xb
 1634 00d3 3B       		.uleb128 0x3b
 1635 00d4 05       		.uleb128 0x5
 1636 00d5 49       		.uleb128 0x49
 1637 00d6 13       		.uleb128 0x13
 1638 00d7 02       		.uleb128 0x2
 1639 00d8 0A       		.uleb128 0xa
 1640 00d9 00       		.byte	0
 1641 00da 00       		.byte	0
 1642 00db 0D       		.uleb128 0xd
 1643 00dc 2E       		.uleb128 0x2e
 1644 00dd 01       		.byte	0x1
 1645 00de 3F       		.uleb128 0x3f
 1646 00df 0C       		.uleb128 0xc
 1647 00e0 03       		.uleb128 0x3
 1648 00e1 0E       		.uleb128 0xe
 1649 00e2 3A       		.uleb128 0x3a
 1650 00e3 0B       		.uleb128 0xb
 1651 00e4 3B       		.uleb128 0x3b
 1652 00e5 05       		.uleb128 0x5
 1653 00e6 27       		.uleb128 0x27
 1654 00e7 0C       		.uleb128 0xc
 1655 00e8 11       		.uleb128 0x11
 1656 00e9 01       		.uleb128 0x1
 1657 00ea 12       		.uleb128 0x12
 1658 00eb 01       		.uleb128 0x1
 1659 00ec 40       		.uleb128 0x40
 1660 00ed 06       		.uleb128 0x6
 1661 00ee 9642     		.uleb128 0x2116
 1662 00f0 0C       		.uleb128 0xc
 1663 00f1 01       		.uleb128 0x1
 1664 00f2 13       		.uleb128 0x13
 1665 00f3 00       		.byte	0
 1666 00f4 00       		.byte	0
 1667 00f5 0E       		.uleb128 0xe
 1668 00f6 34       		.uleb128 0x34
 1669 00f7 00       		.byte	0
 1670 00f8 03       		.uleb128 0x3
 1671 00f9 0E       		.uleb128 0xe
 1672 00fa 3A       		.uleb128 0x3a
 1673 00fb 0B       		.uleb128 0xb
 1674 00fc 3B       		.uleb128 0x3b
 1675 00fd 05       		.uleb128 0x5
 1676 00fe 49       		.uleb128 0x49
 1677 00ff 13       		.uleb128 0x13
 1678 0100 02       		.uleb128 0x2
 1679 0101 0A       		.uleb128 0xa
 1680 0102 00       		.byte	0
 1681 0103 00       		.byte	0
 1682 0104 0F       		.uleb128 0xf
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 59


 1683 0105 0F       		.uleb128 0xf
 1684 0106 00       		.byte	0
 1685 0107 0B       		.uleb128 0xb
 1686 0108 0B       		.uleb128 0xb
 1687 0109 49       		.uleb128 0x49
 1688 010a 13       		.uleb128 0x13
 1689 010b 00       		.byte	0
 1690 010c 00       		.byte	0
 1691 010d 10       		.uleb128 0x10
 1692 010e 26       		.uleb128 0x26
 1693 010f 00       		.byte	0
 1694 0110 49       		.uleb128 0x49
 1695 0111 13       		.uleb128 0x13
 1696 0112 00       		.byte	0
 1697 0113 00       		.byte	0
 1698 0114 11       		.uleb128 0x11
 1699 0115 2E       		.uleb128 0x2e
 1700 0116 01       		.byte	0x1
 1701 0117 3F       		.uleb128 0x3f
 1702 0118 0C       		.uleb128 0xc
 1703 0119 03       		.uleb128 0x3
 1704 011a 0E       		.uleb128 0xe
 1705 011b 3A       		.uleb128 0x3a
 1706 011c 0B       		.uleb128 0xb
 1707 011d 3B       		.uleb128 0x3b
 1708 011e 05       		.uleb128 0x5
 1709 011f 27       		.uleb128 0x27
 1710 0120 0C       		.uleb128 0xc
 1711 0121 49       		.uleb128 0x49
 1712 0122 13       		.uleb128 0x13
 1713 0123 11       		.uleb128 0x11
 1714 0124 01       		.uleb128 0x1
 1715 0125 12       		.uleb128 0x12
 1716 0126 01       		.uleb128 0x1
 1717 0127 40       		.uleb128 0x40
 1718 0128 06       		.uleb128 0x6
 1719 0129 9742     		.uleb128 0x2117
 1720 012b 0C       		.uleb128 0xc
 1721 012c 01       		.uleb128 0x1
 1722 012d 13       		.uleb128 0x13
 1723 012e 00       		.byte	0
 1724 012f 00       		.byte	0
 1725 0130 12       		.uleb128 0x12
 1726 0131 0B       		.uleb128 0xb
 1727 0132 01       		.byte	0x1
 1728 0133 11       		.uleb128 0x11
 1729 0134 01       		.uleb128 0x1
 1730 0135 12       		.uleb128 0x12
 1731 0136 01       		.uleb128 0x1
 1732 0137 00       		.byte	0
 1733 0138 00       		.byte	0
 1734 0139 13       		.uleb128 0x13
 1735 013a 34       		.uleb128 0x34
 1736 013b 00       		.byte	0
 1737 013c 03       		.uleb128 0x3
 1738 013d 0E       		.uleb128 0xe
 1739 013e 3A       		.uleb128 0x3a
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 60


 1740 013f 0B       		.uleb128 0xb
 1741 0140 3B       		.uleb128 0x3b
 1742 0141 0B       		.uleb128 0xb
 1743 0142 49       		.uleb128 0x49
 1744 0143 13       		.uleb128 0x13
 1745 0144 3F       		.uleb128 0x3f
 1746 0145 0C       		.uleb128 0xc
 1747 0146 02       		.uleb128 0x2
 1748 0147 0A       		.uleb128 0xa
 1749 0148 00       		.byte	0
 1750 0149 00       		.byte	0
 1751 014a 00       		.byte	0
 1752              		.section	.debug_loc,"",%progbits
 1753              	.Ldebug_loc0:
 1754              	.LLST0:
 1755 0000 00000000 		.4byte	.LFB0
 1756 0004 02000000 		.4byte	.LCFI0
 1757 0008 0200     		.2byte	0x2
 1758 000a 7D       		.byte	0x7d
 1759 000b 00       		.sleb128 0
 1760 000c 02000000 		.4byte	.LCFI0
 1761 0010 04000000 		.4byte	.LCFI1
 1762 0014 0200     		.2byte	0x2
 1763 0016 7D       		.byte	0x7d
 1764 0017 08       		.sleb128 8
 1765 0018 04000000 		.4byte	.LCFI1
 1766 001c 24000000 		.4byte	.LFE0
 1767 0020 0200     		.2byte	0x2
 1768 0022 77       		.byte	0x77
 1769 0023 08       		.sleb128 8
 1770 0024 00000000 		.4byte	0
 1771 0028 00000000 		.4byte	0
 1772              	.LLST1:
 1773 002c 00000000 		.4byte	.LFB1
 1774 0030 02000000 		.4byte	.LCFI2
 1775 0034 0200     		.2byte	0x2
 1776 0036 7D       		.byte	0x7d
 1777 0037 00       		.sleb128 0
 1778 0038 02000000 		.4byte	.LCFI2
 1779 003c 04000000 		.4byte	.LCFI3
 1780 0040 0200     		.2byte	0x2
 1781 0042 7D       		.byte	0x7d
 1782 0043 08       		.sleb128 8
 1783 0044 04000000 		.4byte	.LCFI3
 1784 0048 28000000 		.4byte	.LFE1
 1785 004c 0200     		.2byte	0x2
 1786 004e 77       		.byte	0x77
 1787 004f 08       		.sleb128 8
 1788 0050 00000000 		.4byte	0
 1789 0054 00000000 		.4byte	0
 1790              	.LLST2:
 1791 0058 00000000 		.4byte	.LFB2
 1792 005c 02000000 		.4byte	.LCFI4
 1793 0060 0200     		.2byte	0x2
 1794 0062 7D       		.byte	0x7d
 1795 0063 00       		.sleb128 0
 1796 0064 02000000 		.4byte	.LCFI4
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 61


 1797 0068 04000000 		.4byte	.LCFI5
 1798 006c 0200     		.2byte	0x2
 1799 006e 7D       		.byte	0x7d
 1800 006f 0C       		.sleb128 12
 1801 0070 04000000 		.4byte	.LCFI5
 1802 0074 06000000 		.4byte	.LCFI6
 1803 0078 0200     		.2byte	0x2
 1804 007a 7D       		.byte	0x7d
 1805 007b 18       		.sleb128 24
 1806 007c 06000000 		.4byte	.LCFI6
 1807 0080 38000000 		.4byte	.LFE2
 1808 0084 0200     		.2byte	0x2
 1809 0086 77       		.byte	0x77
 1810 0087 18       		.sleb128 24
 1811 0088 00000000 		.4byte	0
 1812 008c 00000000 		.4byte	0
 1813              	.LLST3:
 1814 0090 00000000 		.4byte	.LFB3
 1815 0094 02000000 		.4byte	.LCFI7
 1816 0098 0200     		.2byte	0x2
 1817 009a 7D       		.byte	0x7d
 1818 009b 00       		.sleb128 0
 1819 009c 02000000 		.4byte	.LCFI7
 1820 00a0 04000000 		.4byte	.LCFI8
 1821 00a4 0200     		.2byte	0x2
 1822 00a6 7D       		.byte	0x7d
 1823 00a7 0C       		.sleb128 12
 1824 00a8 04000000 		.4byte	.LCFI8
 1825 00ac 06000000 		.4byte	.LCFI9
 1826 00b0 0200     		.2byte	0x2
 1827 00b2 7D       		.byte	0x7d
 1828 00b3 18       		.sleb128 24
 1829 00b4 06000000 		.4byte	.LCFI9
 1830 00b8 38000000 		.4byte	.LFE3
 1831 00bc 0200     		.2byte	0x2
 1832 00be 77       		.byte	0x77
 1833 00bf 18       		.sleb128 24
 1834 00c0 00000000 		.4byte	0
 1835 00c4 00000000 		.4byte	0
 1836              	.LLST4:
 1837 00c8 00000000 		.4byte	.LFB4
 1838 00cc 02000000 		.4byte	.LCFI10
 1839 00d0 0200     		.2byte	0x2
 1840 00d2 7D       		.byte	0x7d
 1841 00d3 00       		.sleb128 0
 1842 00d4 02000000 		.4byte	.LCFI10
 1843 00d8 04000000 		.4byte	.LCFI11
 1844 00dc 0200     		.2byte	0x2
 1845 00de 7D       		.byte	0x7d
 1846 00df 08       		.sleb128 8
 1847 00e0 04000000 		.4byte	.LCFI11
 1848 00e4 0C000000 		.4byte	.LFE4
 1849 00e8 0200     		.2byte	0x2
 1850 00ea 77       		.byte	0x77
 1851 00eb 08       		.sleb128 8
 1852 00ec 00000000 		.4byte	0
 1853 00f0 00000000 		.4byte	0
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 62


 1854              	.LLST5:
 1855 00f4 00000000 		.4byte	.LFB5
 1856 00f8 02000000 		.4byte	.LCFI12
 1857 00fc 0200     		.2byte	0x2
 1858 00fe 7D       		.byte	0x7d
 1859 00ff 00       		.sleb128 0
 1860 0100 02000000 		.4byte	.LCFI12
 1861 0104 04000000 		.4byte	.LCFI13
 1862 0108 0200     		.2byte	0x2
 1863 010a 7D       		.byte	0x7d
 1864 010b 08       		.sleb128 8
 1865 010c 04000000 		.4byte	.LCFI13
 1866 0110 06000000 		.4byte	.LCFI14
 1867 0114 0200     		.2byte	0x2
 1868 0116 7D       		.byte	0x7d
 1869 0117 10       		.sleb128 16
 1870 0118 06000000 		.4byte	.LCFI14
 1871 011c 12000000 		.4byte	.LFE5
 1872 0120 0200     		.2byte	0x2
 1873 0122 77       		.byte	0x77
 1874 0123 10       		.sleb128 16
 1875 0124 00000000 		.4byte	0
 1876 0128 00000000 		.4byte	0
 1877              	.LLST6:
 1878 012c 00000000 		.4byte	.LFB6
 1879 0130 02000000 		.4byte	.LCFI15
 1880 0134 0200     		.2byte	0x2
 1881 0136 7D       		.byte	0x7d
 1882 0137 00       		.sleb128 0
 1883 0138 02000000 		.4byte	.LCFI15
 1884 013c 04000000 		.4byte	.LCFI16
 1885 0140 0200     		.2byte	0x2
 1886 0142 7D       		.byte	0x7d
 1887 0143 08       		.sleb128 8
 1888 0144 04000000 		.4byte	.LCFI16
 1889 0148 06000000 		.4byte	.LCFI17
 1890 014c 0200     		.2byte	0x2
 1891 014e 7D       		.byte	0x7d
 1892 014f 10       		.sleb128 16
 1893 0150 06000000 		.4byte	.LCFI17
 1894 0154 20000000 		.4byte	.LFE6
 1895 0158 0200     		.2byte	0x2
 1896 015a 77       		.byte	0x77
 1897 015b 10       		.sleb128 16
 1898 015c 00000000 		.4byte	0
 1899 0160 00000000 		.4byte	0
 1900              	.LLST7:
 1901 0164 00000000 		.4byte	.LFB7
 1902 0168 02000000 		.4byte	.LCFI18
 1903 016c 0200     		.2byte	0x2
 1904 016e 7D       		.byte	0x7d
 1905 016f 00       		.sleb128 0
 1906 0170 02000000 		.4byte	.LCFI18
 1907 0174 04000000 		.4byte	.LCFI19
 1908 0178 0200     		.2byte	0x2
 1909 017a 7D       		.byte	0x7d
 1910 017b 08       		.sleb128 8
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 63


 1911 017c 04000000 		.4byte	.LCFI19
 1912 0180 06000000 		.4byte	.LCFI20
 1913 0184 0200     		.2byte	0x2
 1914 0186 7D       		.byte	0x7d
 1915 0187 10       		.sleb128 16
 1916 0188 06000000 		.4byte	.LCFI20
 1917 018c 2C000000 		.4byte	.LFE7
 1918 0190 0200     		.2byte	0x2
 1919 0192 77       		.byte	0x77
 1920 0193 10       		.sleb128 16
 1921 0194 00000000 		.4byte	0
 1922 0198 00000000 		.4byte	0
 1923              	.LLST8:
 1924 019c 00000000 		.4byte	.LFB8
 1925 01a0 02000000 		.4byte	.LCFI21
 1926 01a4 0200     		.2byte	0x2
 1927 01a6 7D       		.byte	0x7d
 1928 01a7 00       		.sleb128 0
 1929 01a8 02000000 		.4byte	.LCFI21
 1930 01ac 04000000 		.4byte	.LCFI22
 1931 01b0 0200     		.2byte	0x2
 1932 01b2 7D       		.byte	0x7d
 1933 01b3 08       		.sleb128 8
 1934 01b4 04000000 		.4byte	.LCFI22
 1935 01b8 14000000 		.4byte	.LFE8
 1936 01bc 0200     		.2byte	0x2
 1937 01be 77       		.byte	0x77
 1938 01bf 08       		.sleb128 8
 1939 01c0 00000000 		.4byte	0
 1940 01c4 00000000 		.4byte	0
 1941              	.LLST9:
 1942 01c8 00000000 		.4byte	.LFB9
 1943 01cc 02000000 		.4byte	.LCFI23
 1944 01d0 0200     		.2byte	0x2
 1945 01d2 7D       		.byte	0x7d
 1946 01d3 00       		.sleb128 0
 1947 01d4 02000000 		.4byte	.LCFI23
 1948 01d8 04000000 		.4byte	.LCFI24
 1949 01dc 0200     		.2byte	0x2
 1950 01de 7D       		.byte	0x7d
 1951 01df 08       		.sleb128 8
 1952 01e0 04000000 		.4byte	.LCFI24
 1953 01e4 06000000 		.4byte	.LCFI25
 1954 01e8 0200     		.2byte	0x2
 1955 01ea 7D       		.byte	0x7d
 1956 01eb 10       		.sleb128 16
 1957 01ec 06000000 		.4byte	.LCFI25
 1958 01f0 34000000 		.4byte	.LFE9
 1959 01f4 0200     		.2byte	0x2
 1960 01f6 77       		.byte	0x77
 1961 01f7 10       		.sleb128 16
 1962 01f8 00000000 		.4byte	0
 1963 01fc 00000000 		.4byte	0
 1964              	.LLST10:
 1965 0200 00000000 		.4byte	.LFB10
 1966 0204 02000000 		.4byte	.LCFI26
 1967 0208 0200     		.2byte	0x2
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 64


 1968 020a 7D       		.byte	0x7d
 1969 020b 00       		.sleb128 0
 1970 020c 02000000 		.4byte	.LCFI26
 1971 0210 04000000 		.4byte	.LCFI27
 1972 0214 0200     		.2byte	0x2
 1973 0216 7D       		.byte	0x7d
 1974 0217 08       		.sleb128 8
 1975 0218 04000000 		.4byte	.LCFI27
 1976 021c 06000000 		.4byte	.LCFI28
 1977 0220 0200     		.2byte	0x2
 1978 0222 7D       		.byte	0x7d
 1979 0223 18       		.sleb128 24
 1980 0224 06000000 		.4byte	.LCFI28
 1981 0228 54000000 		.4byte	.LFE10
 1982 022c 0200     		.2byte	0x2
 1983 022e 77       		.byte	0x77
 1984 022f 18       		.sleb128 24
 1985 0230 00000000 		.4byte	0
 1986 0234 00000000 		.4byte	0
 1987              	.LLST11:
 1988 0238 00000000 		.4byte	.LFB11
 1989 023c 02000000 		.4byte	.LCFI29
 1990 0240 0200     		.2byte	0x2
 1991 0242 7D       		.byte	0x7d
 1992 0243 00       		.sleb128 0
 1993 0244 02000000 		.4byte	.LCFI29
 1994 0248 04000000 		.4byte	.LCFI30
 1995 024c 0200     		.2byte	0x2
 1996 024e 7D       		.byte	0x7d
 1997 024f 08       		.sleb128 8
 1998 0250 04000000 		.4byte	.LCFI30
 1999 0254 06000000 		.4byte	.LCFI31
 2000 0258 0200     		.2byte	0x2
 2001 025a 7D       		.byte	0x7d
 2002 025b 18       		.sleb128 24
 2003 025c 06000000 		.4byte	.LCFI31
 2004 0260 58000000 		.4byte	.LFE11
 2005 0264 0200     		.2byte	0x2
 2006 0266 77       		.byte	0x77
 2007 0267 18       		.sleb128 24
 2008 0268 00000000 		.4byte	0
 2009 026c 00000000 		.4byte	0
 2010              	.LLST12:
 2011 0270 00000000 		.4byte	.LFB12
 2012 0274 02000000 		.4byte	.LCFI32
 2013 0278 0200     		.2byte	0x2
 2014 027a 7D       		.byte	0x7d
 2015 027b 00       		.sleb128 0
 2016 027c 02000000 		.4byte	.LCFI32
 2017 0280 04000000 		.4byte	.LCFI33
 2018 0284 0200     		.2byte	0x2
 2019 0286 7D       		.byte	0x7d
 2020 0287 08       		.sleb128 8
 2021 0288 04000000 		.4byte	.LCFI33
 2022 028c 06000000 		.4byte	.LCFI34
 2023 0290 0200     		.2byte	0x2
 2024 0292 7D       		.byte	0x7d
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 65


 2025 0293 10       		.sleb128 16
 2026 0294 06000000 		.4byte	.LCFI34
 2027 0298 34000000 		.4byte	.LFE12
 2028 029c 0200     		.2byte	0x2
 2029 029e 77       		.byte	0x77
 2030 029f 10       		.sleb128 16
 2031 02a0 00000000 		.4byte	0
 2032 02a4 00000000 		.4byte	0
 2033              	.LLST13:
 2034 02a8 00000000 		.4byte	.LFB13
 2035 02ac 02000000 		.4byte	.LCFI35
 2036 02b0 0200     		.2byte	0x2
 2037 02b2 7D       		.byte	0x7d
 2038 02b3 00       		.sleb128 0
 2039 02b4 02000000 		.4byte	.LCFI35
 2040 02b8 04000000 		.4byte	.LCFI36
 2041 02bc 0200     		.2byte	0x2
 2042 02be 7D       		.byte	0x7d
 2043 02bf 08       		.sleb128 8
 2044 02c0 04000000 		.4byte	.LCFI36
 2045 02c4 06000000 		.4byte	.LCFI37
 2046 02c8 0200     		.2byte	0x2
 2047 02ca 7D       		.byte	0x7d
 2048 02cb 10       		.sleb128 16
 2049 02cc 06000000 		.4byte	.LCFI37
 2050 02d0 48000000 		.4byte	.LFE13
 2051 02d4 0200     		.2byte	0x2
 2052 02d6 77       		.byte	0x77
 2053 02d7 10       		.sleb128 16
 2054 02d8 00000000 		.4byte	0
 2055 02dc 00000000 		.4byte	0
 2056              	.LLST14:
 2057 02e0 00000000 		.4byte	.LFB14
 2058 02e4 02000000 		.4byte	.LCFI38
 2059 02e8 0200     		.2byte	0x2
 2060 02ea 7D       		.byte	0x7d
 2061 02eb 00       		.sleb128 0
 2062 02ec 02000000 		.4byte	.LCFI38
 2063 02f0 04000000 		.4byte	.LCFI39
 2064 02f4 0200     		.2byte	0x2
 2065 02f6 7D       		.byte	0x7d
 2066 02f7 0C       		.sleb128 12
 2067 02f8 04000000 		.4byte	.LCFI39
 2068 02fc 06000000 		.4byte	.LCFI40
 2069 0300 0200     		.2byte	0x2
 2070 0302 7D       		.byte	0x7d
 2071 0303 18       		.sleb128 24
 2072 0304 06000000 		.4byte	.LCFI40
 2073 0308 44000000 		.4byte	.LFE14
 2074 030c 0200     		.2byte	0x2
 2075 030e 77       		.byte	0x77
 2076 030f 18       		.sleb128 24
 2077 0310 00000000 		.4byte	0
 2078 0314 00000000 		.4byte	0
 2079              	.LLST15:
 2080 0318 00000000 		.4byte	.LFB15
 2081 031c 02000000 		.4byte	.LCFI41
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 66


 2082 0320 0200     		.2byte	0x2
 2083 0322 7D       		.byte	0x7d
 2084 0323 00       		.sleb128 0
 2085 0324 02000000 		.4byte	.LCFI41
 2086 0328 04000000 		.4byte	.LCFI42
 2087 032c 0200     		.2byte	0x2
 2088 032e 7D       		.byte	0x7d
 2089 032f 08       		.sleb128 8
 2090 0330 04000000 		.4byte	.LCFI42
 2091 0334 06000000 		.4byte	.LCFI43
 2092 0338 0200     		.2byte	0x2
 2093 033a 7D       		.byte	0x7d
 2094 033b 18       		.sleb128 24
 2095 033c 06000000 		.4byte	.LCFI43
 2096 0340 B8000000 		.4byte	.LFE15
 2097 0344 0200     		.2byte	0x2
 2098 0346 77       		.byte	0x77
 2099 0347 18       		.sleb128 24
 2100 0348 00000000 		.4byte	0
 2101 034c 00000000 		.4byte	0
 2102              	.LLST16:
 2103 0350 00000000 		.4byte	.LFB16
 2104 0354 02000000 		.4byte	.LCFI44
 2105 0358 0200     		.2byte	0x2
 2106 035a 7D       		.byte	0x7d
 2107 035b 00       		.sleb128 0
 2108 035c 02000000 		.4byte	.LCFI44
 2109 0360 04000000 		.4byte	.LCFI45
 2110 0364 0200     		.2byte	0x2
 2111 0366 7D       		.byte	0x7d
 2112 0367 08       		.sleb128 8
 2113 0368 04000000 		.4byte	.LCFI45
 2114 036c 06000000 		.4byte	.LCFI46
 2115 0370 0200     		.2byte	0x2
 2116 0372 7D       		.byte	0x7d
 2117 0373 10       		.sleb128 16
 2118 0374 06000000 		.4byte	.LCFI46
 2119 0378 12000000 		.4byte	.LFE16
 2120 037c 0200     		.2byte	0x2
 2121 037e 77       		.byte	0x77
 2122 037f 10       		.sleb128 16
 2123 0380 00000000 		.4byte	0
 2124 0384 00000000 		.4byte	0
 2125              		.section	.debug_aranges,"",%progbits
 2126 0000 9C000000 		.4byte	0x9c
 2127 0004 0200     		.2byte	0x2
 2128 0006 00000000 		.4byte	.Ldebug_info0
 2129 000a 04       		.byte	0x4
 2130 000b 00       		.byte	0
 2131 000c 0000     		.2byte	0
 2132 000e 0000     		.2byte	0
 2133 0010 00000000 		.4byte	.LFB0
 2134 0014 24000000 		.4byte	.LFE0-.LFB0
 2135 0018 00000000 		.4byte	.LFB1
 2136 001c 28000000 		.4byte	.LFE1-.LFB1
 2137 0020 00000000 		.4byte	.LFB2
 2138 0024 38000000 		.4byte	.LFE2-.LFB2
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 67


 2139 0028 00000000 		.4byte	.LFB3
 2140 002c 38000000 		.4byte	.LFE3-.LFB3
 2141 0030 00000000 		.4byte	.LFB4
 2142 0034 0C000000 		.4byte	.LFE4-.LFB4
 2143 0038 00000000 		.4byte	.LFB5
 2144 003c 12000000 		.4byte	.LFE5-.LFB5
 2145 0040 00000000 		.4byte	.LFB6
 2146 0044 20000000 		.4byte	.LFE6-.LFB6
 2147 0048 00000000 		.4byte	.LFB7
 2148 004c 2C000000 		.4byte	.LFE7-.LFB7
 2149 0050 00000000 		.4byte	.LFB8
 2150 0054 14000000 		.4byte	.LFE8-.LFB8
 2151 0058 00000000 		.4byte	.LFB9
 2152 005c 34000000 		.4byte	.LFE9-.LFB9
 2153 0060 00000000 		.4byte	.LFB10
 2154 0064 54000000 		.4byte	.LFE10-.LFB10
 2155 0068 00000000 		.4byte	.LFB11
 2156 006c 58000000 		.4byte	.LFE11-.LFB11
 2157 0070 00000000 		.4byte	.LFB12
 2158 0074 34000000 		.4byte	.LFE12-.LFB12
 2159 0078 00000000 		.4byte	.LFB13
 2160 007c 48000000 		.4byte	.LFE13-.LFB13
 2161 0080 00000000 		.4byte	.LFB14
 2162 0084 44000000 		.4byte	.LFE14-.LFB14
 2163 0088 00000000 		.4byte	.LFB15
 2164 008c B8000000 		.4byte	.LFE15-.LFB15
 2165 0090 00000000 		.4byte	.LFB16
 2166 0094 12000000 		.4byte	.LFE16-.LFB16
 2167 0098 00000000 		.4byte	0
 2168 009c 00000000 		.4byte	0
 2169              		.section	.debug_ranges,"",%progbits
 2170              	.Ldebug_ranges0:
 2171 0000 00000000 		.4byte	.LFB0
 2172 0004 24000000 		.4byte	.LFE0
 2173 0008 00000000 		.4byte	.LFB1
 2174 000c 28000000 		.4byte	.LFE1
 2175 0010 00000000 		.4byte	.LFB2
 2176 0014 38000000 		.4byte	.LFE2
 2177 0018 00000000 		.4byte	.LFB3
 2178 001c 38000000 		.4byte	.LFE3
 2179 0020 00000000 		.4byte	.LFB4
 2180 0024 0C000000 		.4byte	.LFE4
 2181 0028 00000000 		.4byte	.LFB5
 2182 002c 12000000 		.4byte	.LFE5
 2183 0030 00000000 		.4byte	.LFB6
 2184 0034 20000000 		.4byte	.LFE6
 2185 0038 00000000 		.4byte	.LFB7
 2186 003c 2C000000 		.4byte	.LFE7
 2187 0040 00000000 		.4byte	.LFB8
 2188 0044 14000000 		.4byte	.LFE8
 2189 0048 00000000 		.4byte	.LFB9
 2190 004c 34000000 		.4byte	.LFE9
 2191 0050 00000000 		.4byte	.LFB10
 2192 0054 54000000 		.4byte	.LFE10
 2193 0058 00000000 		.4byte	.LFB11
 2194 005c 58000000 		.4byte	.LFE11
 2195 0060 00000000 		.4byte	.LFB12
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 68


 2196 0064 34000000 		.4byte	.LFE12
 2197 0068 00000000 		.4byte	.LFB13
 2198 006c 48000000 		.4byte	.LFE13
 2199 0070 00000000 		.4byte	.LFB14
 2200 0074 44000000 		.4byte	.LFE14
 2201 0078 00000000 		.4byte	.LFB15
 2202 007c B8000000 		.4byte	.LFE15
 2203 0080 00000000 		.4byte	.LFB16
 2204 0084 12000000 		.4byte	.LFE16
 2205 0088 00000000 		.4byte	0
 2206 008c 00000000 		.4byte	0
 2207              		.section	.debug_line,"",%progbits
 2208              	.Ldebug_line0:
 2209 0000 04020000 		.section	.debug_str,"MS",%progbits,1
 2209      02004800 
 2209      00000201 
 2209      FB0E0D00 
 2209      01010101 
 2210              	.LASF6:
 2211 0000 6C6F6E67 		.ascii	"long long int\000"
 2211      206C6F6E 
 2211      6720696E 
 2211      7400
 2212              	.LASF46:
 2213 000e 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\TelemUART.c\000"
 2213      6E657261 
 2213      7465645F 
 2213      536F7572 
 2213      63655C50 
 2214              	.LASF41:
 2215 0033 746D7053 		.ascii	"tmpStat\000"
 2215      74617400 
 2216              	.LASF3:
 2217 003b 73686F72 		.ascii	"short unsigned int\000"
 2217      7420756E 
 2217      7369676E 
 2217      65642069 
 2217      6E7400
 2218              	.LASF32:
 2219 004e 73747269 		.ascii	"string\000"
 2219      6E6700
 2220              	.LASF47:
 2221 0055 433A5C55 		.ascii	"C:\\Users\\SNFU\\Documents\\T-50_UAV_Project\\Softw"
 2221      73657273 
 2221      5C534E46 
 2221      555C446F 
 2221      63756D65 
 2222 0083 6172655C 		.ascii	"are\\T-50_Project\\T-50_Project.cydsn\000"
 2222      542D3530 
 2222      5F50726F 
 2222      6A656374 
 2222      5C542D35 
 2223              	.LASF11:
 2224 00a7 666C6F61 		.ascii	"float\000"
 2224      7400
 2225              	.LASF44:
 2226 00ad 61646472 		.ascii	"addressMode\000"
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 69


 2226      6573734D 
 2226      6F646500 
 2227              	.LASF15:
 2228 00b9 72656738 		.ascii	"reg8\000"
 2228      00
 2229              	.LASF17:
 2230 00be 54656C65 		.ascii	"TelemUART_Start\000"
 2230      6D554152 
 2230      545F5374 
 2230      61727400 
 2231              	.LASF5:
 2232 00ce 6C6F6E67 		.ascii	"long unsigned int\000"
 2232      20756E73 
 2232      69676E65 
 2232      6420696E 
 2232      7400
 2233              	.LASF9:
 2234 00e0 75696E74 		.ascii	"uint8\000"
 2234      3800
 2235              	.LASF24:
 2236 00e6 636F6E74 		.ascii	"control\000"
 2236      726F6C00 
 2237              	.LASF36:
 2238 00ee 54656C65 		.ascii	"TelemUART_PutCRLF\000"
 2238      6D554152 
 2238      545F5075 
 2238      7443524C 
 2238      4600
 2239              	.LASF35:
 2240 0100 62797465 		.ascii	"byteCount\000"
 2240      436F756E 
 2240      7400
 2241              	.LASF21:
 2242 010a 656E6162 		.ascii	"enableInterrupts\000"
 2242      6C65496E 
 2242      74657272 
 2242      75707473 
 2242      00
 2243              	.LASF43:
 2244 011b 54656C65 		.ascii	"TelemUART_SetTxAddressMode\000"
 2244      6D554152 
 2244      545F5365 
 2244      74547841 
 2244      64647265 
 2245              	.LASF22:
 2246 0136 54656C65 		.ascii	"TelemUART_WriteControlRegister\000"
 2246      6D554152 
 2246      545F5772 
 2246      69746543 
 2246      6F6E7472 
 2247              	.LASF30:
 2248 0155 54656C65 		.ascii	"TelemUART_PutChar\000"
 2248      6D554152 
 2248      545F5075 
 2248      74436861 
 2248      7200
 2249              	.LASF12:
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 70


 2250 0167 646F7562 		.ascii	"double\000"
 2250      6C6500
 2251              	.LASF29:
 2252 016e 54656C65 		.ascii	"TelemUART_ReadTxStatus\000"
 2252      6D554152 
 2252      545F5265 
 2252      61645478 
 2252      53746174 
 2253              	.LASF25:
 2254 0185 696E7453 		.ascii	"intSrc\000"
 2254      726300
 2255              	.LASF39:
 2256 018c 54656C65 		.ascii	"TelemUART_SendBreak\000"
 2256      6D554152 
 2256      545F5365 
 2256      6E644272 
 2256      65616B00 
 2257              	.LASF33:
 2258 01a0 6275665F 		.ascii	"buf_index\000"
 2258      696E6465 
 2258      7800
 2259              	.LASF10:
 2260 01aa 75696E74 		.ascii	"uint16\000"
 2260      313600
 2261              	.LASF49:
 2262 01b1 54656C65 		.ascii	"TelemUART_initVar\000"
 2262      6D554152 
 2262      545F696E 
 2262      69745661 
 2262      7200
 2263              	.LASF26:
 2264 01c3 54656C65 		.ascii	"TelemUART_WriteTxData\000"
 2264      6D554152 
 2264      545F5772 
 2264      69746554 
 2264      78446174 
 2265              	.LASF8:
 2266 01d9 756E7369 		.ascii	"unsigned int\000"
 2266      676E6564 
 2266      20696E74 
 2266      00
 2267              	.LASF23:
 2268 01e6 54656C65 		.ascii	"TelemUART_SetTxInterruptMode\000"
 2268      6D554152 
 2268      545F5365 
 2268      74547849 
 2268      6E746572 
 2269              	.LASF38:
 2270 0203 54656C65 		.ascii	"TelemUART_ClearTxBuffer\000"
 2270      6D554152 
 2270      545F436C 
 2270      65617254 
 2270      78427566 
 2271              	.LASF7:
 2272 021b 6C6F6E67 		.ascii	"long long unsigned int\000"
 2272      206C6F6E 
 2272      6720756E 
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 71


 2272      7369676E 
 2272      65642069 
 2273              	.LASF28:
 2274 0232 54656C65 		.ascii	"TelemUART_ReadControlRegister\000"
 2274      6D554152 
 2274      545F5265 
 2274      6164436F 
 2274      6E74726F 
 2275              	.LASF18:
 2276 0250 54656C65 		.ascii	"TelemUART_Init\000"
 2276      6D554152 
 2276      545F496E 
 2276      697400
 2277              	.LASF34:
 2278 025f 54656C65 		.ascii	"TelemUART_PutArray\000"
 2278      6D554152 
 2278      545F5075 
 2278      74417272 
 2278      617900
 2279              	.LASF1:
 2280 0272 756E7369 		.ascii	"unsigned char\000"
 2280      676E6564 
 2280      20636861 
 2280      7200
 2281              	.LASF16:
 2282 0280 73697A65 		.ascii	"sizetype\000"
 2282      74797065 
 2282      00
 2283              	.LASF13:
 2284 0289 63686172 		.ascii	"char8\000"
 2284      3800
 2285              	.LASF27:
 2286 028f 74784461 		.ascii	"txDataByte\000"
 2286      74614279 
 2286      746500
 2287              	.LASF42:
 2288 029a 74785F70 		.ascii	"tx_period\000"
 2288      6572696F 
 2288      6400
 2289              	.LASF14:
 2290 02a4 63686172 		.ascii	"char\000"
 2290      00
 2291              	.LASF40:
 2292 02a9 7265744D 		.ascii	"retMode\000"
 2292      6F646500 
 2293              	.LASF2:
 2294 02b1 73686F72 		.ascii	"short int\000"
 2294      7420696E 
 2294      7400
 2295              	.LASF45:
 2296 02bb 474E5520 		.ascii	"GNU C 4.7.3 20130312 (release) [ARM/embedded-4_7-br"
 2296      4320342E 
 2296      372E3320 
 2296      32303133 
 2296      30333132 
 2297 02ee 616E6368 		.ascii	"anch revision 196615]\000"
 2297      20726576 
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\ccF3sdcN.s 			page 72


 2297      6973696F 
 2297      6E203139 
 2297      36363135 
 2298              	.LASF48:
 2299 0304 54656C65 		.ascii	"TelemUART_GetTxBufferSize\000"
 2299      6D554152 
 2299      545F4765 
 2299      74547842 
 2299      75666665 
 2300              	.LASF4:
 2301 031e 6C6F6E67 		.ascii	"long int\000"
 2301      20696E74 
 2301      00
 2302              	.LASF31:
 2303 0327 54656C65 		.ascii	"TelemUART_PutString\000"
 2303      6D554152 
 2303      545F5075 
 2303      74537472 
 2303      696E6700 
 2304              	.LASF19:
 2305 033b 54656C65 		.ascii	"TelemUART_Enable\000"
 2305      6D554152 
 2305      545F456E 
 2305      61626C65 
 2305      00
 2306              	.LASF0:
 2307 034c 7369676E 		.ascii	"signed char\000"
 2307      65642063 
 2307      68617200 
 2308              	.LASF37:
 2309 0358 73697A65 		.ascii	"size\000"
 2309      00
 2310              	.LASF20:
 2311 035d 54656C65 		.ascii	"TelemUART_Stop\000"
 2311      6D554152 
 2311      545F5374 
 2311      6F7000
 2312              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.7.3 20130312 (release) [ARM/embedded-4_7-br
