ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"TelemUART.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.TelemUART_Init,"ax",%progbits
  18              		.align	1
  19              		.global	TelemUART_Init
  20              		.code	16
  21              		.thumb_func
  22              		.type	TelemUART_Init, %function
  23              	TelemUART_Init:
  24              	.LFB1:
  25              		.file 1 ".\\Generated_Source\\PSoC4\\TelemUART.c"
   1:.\Generated_Source\PSoC4/TelemUART.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/TelemUART.c **** * File Name: TelemUART.c
   3:.\Generated_Source\PSoC4/TelemUART.c **** * Version 2.30
   4:.\Generated_Source\PSoC4/TelemUART.c **** *
   5:.\Generated_Source\PSoC4/TelemUART.c **** * Description:
   6:.\Generated_Source\PSoC4/TelemUART.c **** *  This file provides all API functionality of the UART component
   7:.\Generated_Source\PSoC4/TelemUART.c **** *
   8:.\Generated_Source\PSoC4/TelemUART.c **** * Note:
   9:.\Generated_Source\PSoC4/TelemUART.c **** *
  10:.\Generated_Source\PSoC4/TelemUART.c **** ********************************************************************************
  11:.\Generated_Source\PSoC4/TelemUART.c **** * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  12:.\Generated_Source\PSoC4/TelemUART.c **** * You may use this file only in accordance with the license, terms, conditions,
  13:.\Generated_Source\PSoC4/TelemUART.c **** * disclaimers, and limitations in the end user license agreement accompanying
  14:.\Generated_Source\PSoC4/TelemUART.c **** * the software package with which this file was provided.
  15:.\Generated_Source\PSoC4/TelemUART.c **** *******************************************************************************/
  16:.\Generated_Source\PSoC4/TelemUART.c **** 
  17:.\Generated_Source\PSoC4/TelemUART.c **** #include "TelemUART.h"
  18:.\Generated_Source\PSoC4/TelemUART.c **** #include "CyLib.h"
  19:.\Generated_Source\PSoC4/TelemUART.c **** #if(TelemUART_INTERNAL_CLOCK_USED)
  20:.\Generated_Source\PSoC4/TelemUART.c ****     #include "TelemUART_IntClock.h"
  21:.\Generated_Source\PSoC4/TelemUART.c **** #endif /* End TelemUART_INTERNAL_CLOCK_USED */
  22:.\Generated_Source\PSoC4/TelemUART.c **** 
  23:.\Generated_Source\PSoC4/TelemUART.c **** 
  24:.\Generated_Source\PSoC4/TelemUART.c **** /***************************************
  25:.\Generated_Source\PSoC4/TelemUART.c **** * Global data allocation
  26:.\Generated_Source\PSoC4/TelemUART.c **** ***************************************/
  27:.\Generated_Source\PSoC4/TelemUART.c **** 
  28:.\Generated_Source\PSoC4/TelemUART.c **** uint8 TelemUART_initVar = 0u;
  29:.\Generated_Source\PSoC4/TelemUART.c **** #if( TelemUART_TX_ENABLED && (TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH))
  30:.\Generated_Source\PSoC4/TelemUART.c ****     volatile uint8 TelemUART_txBuffer[TelemUART_TXBUFFERSIZE];
  31:.\Generated_Source\PSoC4/TelemUART.c ****     volatile uint8 TelemUART_txBufferRead = 0u;
  32:.\Generated_Source\PSoC4/TelemUART.c ****     uint8 TelemUART_txBufferWrite = 0u;
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 2


  33:.\Generated_Source\PSoC4/TelemUART.c **** #endif /* End TelemUART_TX_ENABLED */
  34:.\Generated_Source\PSoC4/TelemUART.c **** #if( ( TelemUART_RX_ENABLED || TelemUART_HD_ENABLED ) && \
  35:.\Generated_Source\PSoC4/TelemUART.c ****      (TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH) )
  36:.\Generated_Source\PSoC4/TelemUART.c ****     volatile uint8 TelemUART_rxBuffer[TelemUART_RXBUFFERSIZE];
  37:.\Generated_Source\PSoC4/TelemUART.c ****     volatile uint8 TelemUART_rxBufferRead = 0u;
  38:.\Generated_Source\PSoC4/TelemUART.c ****     volatile uint8 TelemUART_rxBufferWrite = 0u;
  39:.\Generated_Source\PSoC4/TelemUART.c ****     volatile uint8 TelemUART_rxBufferLoopDetect = 0u;
  40:.\Generated_Source\PSoC4/TelemUART.c ****     volatile uint8 TelemUART_rxBufferOverflow = 0u;
  41:.\Generated_Source\PSoC4/TelemUART.c ****     #if (TelemUART_RXHW_ADDRESS_ENABLED)
  42:.\Generated_Source\PSoC4/TelemUART.c ****         volatile uint8 TelemUART_rxAddressMode = TelemUART_RXADDRESSMODE;
  43:.\Generated_Source\PSoC4/TelemUART.c ****         volatile uint8 TelemUART_rxAddressDetected = 0u;
  44:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* End EnableHWAddress */
  45:.\Generated_Source\PSoC4/TelemUART.c **** #endif /* End TelemUART_RX_ENABLED */
  46:.\Generated_Source\PSoC4/TelemUART.c **** 
  47:.\Generated_Source\PSoC4/TelemUART.c **** 
  48:.\Generated_Source\PSoC4/TelemUART.c **** /*******************************************************************************
  49:.\Generated_Source\PSoC4/TelemUART.c **** * Function Name: TelemUART_Start
  50:.\Generated_Source\PSoC4/TelemUART.c **** ********************************************************************************
  51:.\Generated_Source\PSoC4/TelemUART.c **** *
  52:.\Generated_Source\PSoC4/TelemUART.c **** * Summary:
  53:.\Generated_Source\PSoC4/TelemUART.c **** *  Initialize and Enable the UART component.
  54:.\Generated_Source\PSoC4/TelemUART.c **** *  Enable the clock input to enable operation.
  55:.\Generated_Source\PSoC4/TelemUART.c **** *
  56:.\Generated_Source\PSoC4/TelemUART.c **** * Parameters:
  57:.\Generated_Source\PSoC4/TelemUART.c **** *  None.
  58:.\Generated_Source\PSoC4/TelemUART.c **** *
  59:.\Generated_Source\PSoC4/TelemUART.c **** * Return:
  60:.\Generated_Source\PSoC4/TelemUART.c **** *  None.
  61:.\Generated_Source\PSoC4/TelemUART.c **** *
  62:.\Generated_Source\PSoC4/TelemUART.c **** * Global variables:
  63:.\Generated_Source\PSoC4/TelemUART.c **** *  The TelemUART_intiVar variable is used to indicate initial
  64:.\Generated_Source\PSoC4/TelemUART.c **** *  configuration of this component. The variable is initialized to zero (0u)
  65:.\Generated_Source\PSoC4/TelemUART.c **** *  and set to one (1u) the first time UART_Start() is called. This allows for
  66:.\Generated_Source\PSoC4/TelemUART.c **** *  component initialization without re-initialization in all subsequent calls
  67:.\Generated_Source\PSoC4/TelemUART.c **** *  to the TelemUART_Start() routine.
  68:.\Generated_Source\PSoC4/TelemUART.c **** *
  69:.\Generated_Source\PSoC4/TelemUART.c **** * Reentrant:
  70:.\Generated_Source\PSoC4/TelemUART.c **** *  No.
  71:.\Generated_Source\PSoC4/TelemUART.c **** *
  72:.\Generated_Source\PSoC4/TelemUART.c **** *******************************************************************************/
  73:.\Generated_Source\PSoC4/TelemUART.c **** void TelemUART_Start(void) 
  74:.\Generated_Source\PSoC4/TelemUART.c **** {
  75:.\Generated_Source\PSoC4/TelemUART.c ****     /* If not Initialized then initialize all required hardware and software */
  76:.\Generated_Source\PSoC4/TelemUART.c ****     if(TelemUART_initVar == 0u)
  77:.\Generated_Source\PSoC4/TelemUART.c ****     {
  78:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_Init();
  79:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_initVar = 1u;
  80:.\Generated_Source\PSoC4/TelemUART.c ****     }
  81:.\Generated_Source\PSoC4/TelemUART.c ****     TelemUART_Enable();
  82:.\Generated_Source\PSoC4/TelemUART.c **** }
  83:.\Generated_Source\PSoC4/TelemUART.c **** 
  84:.\Generated_Source\PSoC4/TelemUART.c **** 
  85:.\Generated_Source\PSoC4/TelemUART.c **** /*******************************************************************************
  86:.\Generated_Source\PSoC4/TelemUART.c **** * Function Name: TelemUART_Init
  87:.\Generated_Source\PSoC4/TelemUART.c **** ********************************************************************************
  88:.\Generated_Source\PSoC4/TelemUART.c **** *
  89:.\Generated_Source\PSoC4/TelemUART.c **** * Summary:
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 3


  90:.\Generated_Source\PSoC4/TelemUART.c **** *  Initialize component's parameters to the parameters set by user in the
  91:.\Generated_Source\PSoC4/TelemUART.c **** *  customizer of the component placed onto schematic. Usually called in
  92:.\Generated_Source\PSoC4/TelemUART.c **** *  TelemUART_Start().
  93:.\Generated_Source\PSoC4/TelemUART.c **** *
  94:.\Generated_Source\PSoC4/TelemUART.c **** * Parameters:
  95:.\Generated_Source\PSoC4/TelemUART.c **** *  None.
  96:.\Generated_Source\PSoC4/TelemUART.c **** *
  97:.\Generated_Source\PSoC4/TelemUART.c **** * Return:
  98:.\Generated_Source\PSoC4/TelemUART.c **** *  None.
  99:.\Generated_Source\PSoC4/TelemUART.c **** *
 100:.\Generated_Source\PSoC4/TelemUART.c **** *******************************************************************************/
 101:.\Generated_Source\PSoC4/TelemUART.c **** void TelemUART_Init(void) 
 102:.\Generated_Source\PSoC4/TelemUART.c **** {
  26              		.loc 1 102 0
  27              		.cfi_startproc
 103:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_RX_ENABLED || TelemUART_HD_ENABLED)
 104:.\Generated_Source\PSoC4/TelemUART.c **** 
 105:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_RX_INTERRUPT_ENABLED && (TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH))
 106:.\Generated_Source\PSoC4/TelemUART.c ****             /* Set the RX Interrupt. */
 107:.\Generated_Source\PSoC4/TelemUART.c ****             (void)CyIntSetVector(TelemUART_RX_VECT_NUM, &TelemUART_RXISR);
 108:.\Generated_Source\PSoC4/TelemUART.c ****             CyIntSetPriority(TelemUART_RX_VECT_NUM, TelemUART_RX_PRIOR_NUM);
 109:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_RX_INTERRUPT_ENABLED */
 110:.\Generated_Source\PSoC4/TelemUART.c **** 
 111:.\Generated_Source\PSoC4/TelemUART.c ****         #if (TelemUART_RXHW_ADDRESS_ENABLED)
 112:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_SetRxAddressMode(TelemUART_RXAddressMode);
 113:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_SetRxAddress1(TelemUART_RXHWADDRESS1);
 114:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_SetRxAddress2(TelemUART_RXHWADDRESS2);
 115:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_RXHW_ADDRESS_ENABLED */
 116:.\Generated_Source\PSoC4/TelemUART.c **** 
 117:.\Generated_Source\PSoC4/TelemUART.c ****         /* Init Count7 period */
 118:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_RXBITCTR_PERIOD_REG = TelemUART_RXBITCTR_INIT;
 119:.\Generated_Source\PSoC4/TelemUART.c ****         /* Configure the Initial RX interrupt mask */
 120:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_RXSTATUS_MASK_REG  = TelemUART_INIT_RX_INTERRUPTS_MASK;
 121:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* End TelemUART_RX_ENABLED || TelemUART_HD_ENABLED*/
 122:.\Generated_Source\PSoC4/TelemUART.c **** 
 123:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_TX_ENABLED)
 124:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_TX_INTERRUPT_ENABLED && (TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH))
 125:.\Generated_Source\PSoC4/TelemUART.c ****             /* Set the TX Interrupt. */
 126:.\Generated_Source\PSoC4/TelemUART.c ****             (void)CyIntSetVector(TelemUART_TX_VECT_NUM, &TelemUART_TXISR);
 127:.\Generated_Source\PSoC4/TelemUART.c ****             CyIntSetPriority(TelemUART_TX_VECT_NUM, TelemUART_TX_PRIOR_NUM);
 128:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_TX_INTERRUPT_ENABLED */
 129:.\Generated_Source\PSoC4/TelemUART.c **** 
 130:.\Generated_Source\PSoC4/TelemUART.c ****         /* Write Counter Value for TX Bit Clk Generator*/
 131:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_TXCLKGEN_DP)
 132:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_TXBITCLKGEN_CTR_REG = TelemUART_BIT_CENTER;
  28              		.loc 1 132 0
  29 0000 044B     		ldr	r3, .L2
  30 0002 0722     		mov	r2, #7
  31 0004 1A70     		strb	r2, [r3]
 133:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_TXBITCLKTX_COMPLETE_REG = (TelemUART_NUMBER_OF_DATA_BITS +
  32              		.loc 1 133 0
  33 0006 0449     		ldr	r1, .L2+4
 134:.\Generated_Source\PSoC4/TelemUART.c ****                         TelemUART_NUMBER_OF_START_BIT) * TelemUART_OVER_SAMPLE_COUNT;
 135:.\Generated_Source\PSoC4/TelemUART.c ****         #else
 136:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_TXBITCTR_PERIOD_REG = ((TelemUART_NUMBER_OF_DATA_BITS +
 137:.\Generated_Source\PSoC4/TelemUART.c ****                         TelemUART_NUMBER_OF_START_BIT) * TelemUART_OVER_SAMPLE_8) - 1u;
 138:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_TXCLKGEN_DP */
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 4


 139:.\Generated_Source\PSoC4/TelemUART.c **** 
 140:.\Generated_Source\PSoC4/TelemUART.c ****         /* Configure the Initial TX interrupt mask */
 141:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_TX_INTERRUPT_ENABLED && (TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH))
 142:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_TXSTATUS_MASK_REG = TelemUART_TX_STS_FIFO_EMPTY;
 143:.\Generated_Source\PSoC4/TelemUART.c ****         #else
 144:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_TXSTATUS_MASK_REG = TelemUART_INIT_TX_INTERRUPTS_MASK;
  34              		.loc 1 144 0
  35 0008 044B     		ldr	r3, .L2+8
 133:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_TXBITCLKTX_COMPLETE_REG = (TelemUART_NUMBER_OF_DATA_BITS +
  36              		.loc 1 133 0
  37 000a 4820     		mov	r0, #72
  38              		.loc 1 144 0
  39 000c 0022     		mov	r2, #0
 133:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_TXBITCLKTX_COMPLETE_REG = (TelemUART_NUMBER_OF_DATA_BITS +
  40              		.loc 1 133 0
  41 000e 0870     		strb	r0, [r1]
 145:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /*End TelemUART_TX_INTERRUPT_ENABLED*/
 146:.\Generated_Source\PSoC4/TelemUART.c **** 
 147:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* End TelemUART_TX_ENABLED */
 148:.\Generated_Source\PSoC4/TelemUART.c **** 
 149:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_PARITY_TYPE_SW)  /* Write Parity to Control Register */
 150:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_WriteControlRegister( \
 151:.\Generated_Source\PSoC4/TelemUART.c ****             (TelemUART_ReadControlRegister() & (uint8)~TelemUART_CTRL_PARITY_TYPE_MASK) | \
 152:.\Generated_Source\PSoC4/TelemUART.c ****             (uint8)(TelemUART_PARITY_TYPE << TelemUART_CTRL_PARITY_TYPE0_SHIFT) );
 153:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* End TelemUART_PARITY_TYPE_SW */
 154:.\Generated_Source\PSoC4/TelemUART.c **** }
  42              		.loc 1 154 0
  43              		@ sp needed for prologue
 144:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_TXSTATUS_MASK_REG = TelemUART_INIT_TX_INTERRUPTS_MASK;
  44              		.loc 1 144 0
  45 0010 1A70     		strb	r2, [r3]
  46              		.loc 1 154 0
  47 0012 7047     		bx	lr
  48              	.L3:
  49              		.align	2
  50              	.L2:
  51 0014 22000F40 		.word	1074724898
  52 0018 32000F40 		.word	1074724914
  53 001c 83000F40 		.word	1074724995
  54              		.cfi_endproc
  55              	.LFE1:
  56              		.size	TelemUART_Init, .-TelemUART_Init
  57              		.section	.text.TelemUART_Enable,"ax",%progbits
  58              		.align	1
  59              		.global	TelemUART_Enable
  60              		.code	16
  61              		.thumb_func
  62              		.type	TelemUART_Enable, %function
  63              	TelemUART_Enable:
  64              	.LFB2:
 155:.\Generated_Source\PSoC4/TelemUART.c **** 
 156:.\Generated_Source\PSoC4/TelemUART.c **** 
 157:.\Generated_Source\PSoC4/TelemUART.c **** /*******************************************************************************
 158:.\Generated_Source\PSoC4/TelemUART.c **** * Function Name: TelemUART_Enable
 159:.\Generated_Source\PSoC4/TelemUART.c **** ********************************************************************************
 160:.\Generated_Source\PSoC4/TelemUART.c **** *
 161:.\Generated_Source\PSoC4/TelemUART.c **** * Summary:
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 5


 162:.\Generated_Source\PSoC4/TelemUART.c **** *  Enables the UART block operation
 163:.\Generated_Source\PSoC4/TelemUART.c **** *
 164:.\Generated_Source\PSoC4/TelemUART.c **** * Parameters:
 165:.\Generated_Source\PSoC4/TelemUART.c **** *  None.
 166:.\Generated_Source\PSoC4/TelemUART.c **** *
 167:.\Generated_Source\PSoC4/TelemUART.c **** * Return:
 168:.\Generated_Source\PSoC4/TelemUART.c **** *  None.
 169:.\Generated_Source\PSoC4/TelemUART.c **** *
 170:.\Generated_Source\PSoC4/TelemUART.c **** * Global Variables:
 171:.\Generated_Source\PSoC4/TelemUART.c **** *  TelemUART_rxAddressDetected - set to initial state (0).
 172:.\Generated_Source\PSoC4/TelemUART.c **** *
 173:.\Generated_Source\PSoC4/TelemUART.c **** *******************************************************************************/
 174:.\Generated_Source\PSoC4/TelemUART.c **** void TelemUART_Enable(void) 
 175:.\Generated_Source\PSoC4/TelemUART.c **** {
  65              		.loc 1 175 0
  66              		.cfi_startproc
  67 0000 10B5     		push	{r4, lr}
  68              	.LCFI0:
  69              		.cfi_def_cfa_offset 8
  70              		.cfi_offset 4, -8
  71              		.cfi_offset 14, -4
 176:.\Generated_Source\PSoC4/TelemUART.c ****     uint8 enableInterrupts;
 177:.\Generated_Source\PSoC4/TelemUART.c ****     enableInterrupts = CyEnterCriticalSection();
  72              		.loc 1 177 0
  73 0002 FFF7FEFF 		bl	CyEnterCriticalSection
  74              	.LVL0:
 178:.\Generated_Source\PSoC4/TelemUART.c **** 
 179:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_RX_ENABLED || TelemUART_HD_ENABLED)
 180:.\Generated_Source\PSoC4/TelemUART.c ****         /*RX Counter (Count7) Enable */
 181:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_RXBITCTR_CONTROL_REG |= TelemUART_CNTR_ENABLE;
 182:.\Generated_Source\PSoC4/TelemUART.c ****         /* Enable the RX Interrupt. */
 183:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_RXSTATUS_ACTL_REG  |= TelemUART_INT_ENABLE;
 184:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_RX_INTERRUPT_ENABLED && (TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH))
 185:.\Generated_Source\PSoC4/TelemUART.c ****             CyIntEnable(TelemUART_RX_VECT_NUM);
 186:.\Generated_Source\PSoC4/TelemUART.c ****             #if (TelemUART_RXHW_ADDRESS_ENABLED)
 187:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_rxAddressDetected = 0u;
 188:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_RXHW_ADDRESS_ENABLED */
 189:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_RX_INTERRUPT_ENABLED */
 190:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* End TelemUART_RX_ENABLED || TelemUART_HD_ENABLED*/
 191:.\Generated_Source\PSoC4/TelemUART.c **** 
 192:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_TX_ENABLED)
 193:.\Generated_Source\PSoC4/TelemUART.c ****         /*TX Counter (DP/Count7) Enable */
 194:.\Generated_Source\PSoC4/TelemUART.c ****         #if(!TelemUART_TXCLKGEN_DP)
 195:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_TXBITCTR_CONTROL_REG |= TelemUART_CNTR_ENABLE;
 196:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_TXCLKGEN_DP */
 197:.\Generated_Source\PSoC4/TelemUART.c ****         /* Enable the TX Interrupt. */
 198:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_TXSTATUS_ACTL_REG |= TelemUART_INT_ENABLE;
  75              		.loc 1 198 0
  76 0006 064B     		ldr	r3, .L5
  77 0008 1021     		mov	r1, #16
  78 000a 1A78     		ldrb	r2, [r3]
 177:.\Generated_Source\PSoC4/TelemUART.c ****     enableInterrupts = CyEnterCriticalSection();
  79              		.loc 1 177 0
  80 000c 041C     		mov	r4, r0
  81              	.LVL1:
  82              		.loc 1 198 0
  83 000e 0A43     		orr	r2, r1
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 6


  84 0010 1A70     		strb	r2, [r3]
 199:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_TX_INTERRUPT_ENABLED && (TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH))
 200:.\Generated_Source\PSoC4/TelemUART.c ****             CyIntEnable(TelemUART_TX_VECT_NUM);
 201:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_TX_INTERRUPT_ENABLED*/
 202:.\Generated_Source\PSoC4/TelemUART.c ****      #endif /* End TelemUART_TX_ENABLED */
 203:.\Generated_Source\PSoC4/TelemUART.c **** 
 204:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_INTERNAL_CLOCK_USED)
 205:.\Generated_Source\PSoC4/TelemUART.c ****         /* Enable the clock. */
 206:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_IntClock_Start();
  85              		.loc 1 206 0
  86 0012 FFF7FEFF 		bl	TelemUART_IntClock_Start
  87              	.LVL2:
 207:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* End TelemUART_INTERNAL_CLOCK_USED */
 208:.\Generated_Source\PSoC4/TelemUART.c **** 
 209:.\Generated_Source\PSoC4/TelemUART.c ****     CyExitCriticalSection(enableInterrupts);
  88              		.loc 1 209 0
  89 0016 201C     		mov	r0, r4
  90 0018 FFF7FEFF 		bl	CyExitCriticalSection
  91              	.LVL3:
 210:.\Generated_Source\PSoC4/TelemUART.c **** }
  92              		.loc 1 210 0
  93              		@ sp needed for prologue
  94              	.LVL4:
  95 001c 10BD     		pop	{r4, pc}
  96              	.L6:
  97 001e C046     		.align	2
  98              	.L5:
  99 0020 93000F40 		.word	1074725011
 100              		.cfi_endproc
 101              	.LFE2:
 102              		.size	TelemUART_Enable, .-TelemUART_Enable
 103              		.section	.text.TelemUART_Start,"ax",%progbits
 104              		.align	1
 105              		.global	TelemUART_Start
 106              		.code	16
 107              		.thumb_func
 108              		.type	TelemUART_Start, %function
 109              	TelemUART_Start:
 110              	.LFB0:
  74:.\Generated_Source\PSoC4/TelemUART.c **** {
 111              		.loc 1 74 0
 112              		.cfi_startproc
 113 0000 10B5     		push	{r4, lr}
 114              	.LCFI1:
 115              		.cfi_def_cfa_offset 8
 116              		.cfi_offset 4, -8
 117              		.cfi_offset 14, -4
  76:.\Generated_Source\PSoC4/TelemUART.c ****     if(TelemUART_initVar == 0u)
 118              		.loc 1 76 0
 119 0002 054C     		ldr	r4, .L10
 120 0004 2378     		ldrb	r3, [r4]
 121 0006 002B     		cmp	r3, #0
 122 0008 03D1     		bne	.L8
  78:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_Init();
 123              		.loc 1 78 0
 124 000a FFF7FEFF 		bl	TelemUART_Init
 125              	.LVL5:
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 7


  79:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_initVar = 1u;
 126              		.loc 1 79 0
 127 000e 0120     		mov	r0, #1
 128 0010 2070     		strb	r0, [r4]
 129              	.L8:
  81:.\Generated_Source\PSoC4/TelemUART.c ****     TelemUART_Enable();
 130              		.loc 1 81 0
 131 0012 FFF7FEFF 		bl	TelemUART_Enable
 132              	.LVL6:
  82:.\Generated_Source\PSoC4/TelemUART.c **** }
 133              		.loc 1 82 0
 134              		@ sp needed for prologue
 135 0016 10BD     		pop	{r4, pc}
 136              	.L11:
 137              		.align	2
 138              	.L10:
 139 0018 00000000 		.word	.LANCHOR0
 140              		.cfi_endproc
 141              	.LFE0:
 142              		.size	TelemUART_Start, .-TelemUART_Start
 143              		.section	.text.TelemUART_Stop,"ax",%progbits
 144              		.align	1
 145              		.global	TelemUART_Stop
 146              		.code	16
 147              		.thumb_func
 148              		.type	TelemUART_Stop, %function
 149              	TelemUART_Stop:
 150              	.LFB3:
 211:.\Generated_Source\PSoC4/TelemUART.c **** 
 212:.\Generated_Source\PSoC4/TelemUART.c **** 
 213:.\Generated_Source\PSoC4/TelemUART.c **** /*******************************************************************************
 214:.\Generated_Source\PSoC4/TelemUART.c **** * Function Name: TelemUART_Stop
 215:.\Generated_Source\PSoC4/TelemUART.c **** ********************************************************************************
 216:.\Generated_Source\PSoC4/TelemUART.c **** *
 217:.\Generated_Source\PSoC4/TelemUART.c **** * Summary:
 218:.\Generated_Source\PSoC4/TelemUART.c **** *  Disable the UART component
 219:.\Generated_Source\PSoC4/TelemUART.c **** *
 220:.\Generated_Source\PSoC4/TelemUART.c **** * Parameters:
 221:.\Generated_Source\PSoC4/TelemUART.c **** *  None.
 222:.\Generated_Source\PSoC4/TelemUART.c **** *
 223:.\Generated_Source\PSoC4/TelemUART.c **** * Return:
 224:.\Generated_Source\PSoC4/TelemUART.c **** *  None.
 225:.\Generated_Source\PSoC4/TelemUART.c **** *
 226:.\Generated_Source\PSoC4/TelemUART.c **** *******************************************************************************/
 227:.\Generated_Source\PSoC4/TelemUART.c **** void TelemUART_Stop(void) 
 228:.\Generated_Source\PSoC4/TelemUART.c **** {
 151              		.loc 1 228 0
 152              		.cfi_startproc
 153 0000 10B5     		push	{r4, lr}
 154              	.LCFI2:
 155              		.cfi_def_cfa_offset 8
 156              		.cfi_offset 4, -8
 157              		.cfi_offset 14, -4
 229:.\Generated_Source\PSoC4/TelemUART.c ****     uint8 enableInterrupts;
 230:.\Generated_Source\PSoC4/TelemUART.c ****     enableInterrupts = CyEnterCriticalSection();
 158              		.loc 1 230 0
 159 0002 FFF7FEFF 		bl	CyEnterCriticalSection
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 8


 160              	.LVL7:
 161 0006 041C     		mov	r4, r0
 162              	.LVL8:
 231:.\Generated_Source\PSoC4/TelemUART.c **** 
 232:.\Generated_Source\PSoC4/TelemUART.c ****     /* Write Bit Counter Disable */
 233:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_RX_ENABLED || TelemUART_HD_ENABLED)
 234:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_RXBITCTR_CONTROL_REG &= (uint8)~TelemUART_CNTR_ENABLE;
 235:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* End TelemUART_RX_ENABLED */
 236:.\Generated_Source\PSoC4/TelemUART.c **** 
 237:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_TX_ENABLED)
 238:.\Generated_Source\PSoC4/TelemUART.c ****         #if(!TelemUART_TXCLKGEN_DP)
 239:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_TXBITCTR_CONTROL_REG &= (uint8)~TelemUART_CNTR_ENABLE;
 240:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_TXCLKGEN_DP */
 241:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* TelemUART_TX_ENABLED */
 242:.\Generated_Source\PSoC4/TelemUART.c **** 
 243:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_INTERNAL_CLOCK_USED)
 244:.\Generated_Source\PSoC4/TelemUART.c ****         /* Disable the clock. */
 245:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_IntClock_Stop();
 163              		.loc 1 245 0
 164 0008 FFF7FEFF 		bl	TelemUART_IntClock_Stop
 165              	.LVL9:
 246:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* End TelemUART_INTERNAL_CLOCK_USED */
 247:.\Generated_Source\PSoC4/TelemUART.c **** 
 248:.\Generated_Source\PSoC4/TelemUART.c ****     /* Disable internal interrupt component */
 249:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_RX_ENABLED || TelemUART_HD_ENABLED)
 250:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_RXSTATUS_ACTL_REG  &= (uint8)~TelemUART_INT_ENABLE;
 251:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_RX_INTERRUPT_ENABLED && (TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH))
 252:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_DisableRxInt();
 253:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_RX_INTERRUPT_ENABLED */
 254:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* End TelemUART_RX_ENABLED */
 255:.\Generated_Source\PSoC4/TelemUART.c **** 
 256:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_TX_ENABLED)
 257:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_TXSTATUS_ACTL_REG &= (uint8)~TelemUART_INT_ENABLE;
 166              		.loc 1 257 0
 167 000c 044B     		ldr	r3, .L13
 168 000e 1021     		mov	r1, #16
 169 0010 1A78     		ldrb	r2, [r3]
 258:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_TX_INTERRUPT_ENABLED && (TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH))
 259:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_DisableTxInt();
 260:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_TX_INTERRUPT_ENABLED */
 261:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* End TelemUART_TX_ENABLED */
 262:.\Generated_Source\PSoC4/TelemUART.c **** 
 263:.\Generated_Source\PSoC4/TelemUART.c ****     CyExitCriticalSection(enableInterrupts);
 170              		.loc 1 263 0
 171 0012 201C     		mov	r0, r4
 257:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_TXSTATUS_ACTL_REG &= (uint8)~TelemUART_INT_ENABLE;
 172              		.loc 1 257 0
 173 0014 8A43     		bic	r2, r1
 174 0016 1A70     		strb	r2, [r3]
 175              		.loc 1 263 0
 176 0018 FFF7FEFF 		bl	CyExitCriticalSection
 177              	.LVL10:
 264:.\Generated_Source\PSoC4/TelemUART.c **** }
 178              		.loc 1 264 0
 179              		@ sp needed for prologue
 180              	.LVL11:
 181 001c 10BD     		pop	{r4, pc}
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 9


 182              	.L14:
 183 001e C046     		.align	2
 184              	.L13:
 185 0020 93000F40 		.word	1074725011
 186              		.cfi_endproc
 187              	.LFE3:
 188              		.size	TelemUART_Stop, .-TelemUART_Stop
 189              		.section	.text.TelemUART_ReadControlRegister,"ax",%progbits
 190              		.align	1
 191              		.global	TelemUART_ReadControlRegister
 192              		.code	16
 193              		.thumb_func
 194              		.type	TelemUART_ReadControlRegister, %function
 195              	TelemUART_ReadControlRegister:
 196              	.LFB4:
 265:.\Generated_Source\PSoC4/TelemUART.c **** 
 266:.\Generated_Source\PSoC4/TelemUART.c **** 
 267:.\Generated_Source\PSoC4/TelemUART.c **** /*******************************************************************************
 268:.\Generated_Source\PSoC4/TelemUART.c **** * Function Name: TelemUART_ReadControlRegister
 269:.\Generated_Source\PSoC4/TelemUART.c **** ********************************************************************************
 270:.\Generated_Source\PSoC4/TelemUART.c **** *
 271:.\Generated_Source\PSoC4/TelemUART.c **** * Summary:
 272:.\Generated_Source\PSoC4/TelemUART.c **** *  Read the current state of the control register
 273:.\Generated_Source\PSoC4/TelemUART.c **** *
 274:.\Generated_Source\PSoC4/TelemUART.c **** * Parameters:
 275:.\Generated_Source\PSoC4/TelemUART.c **** *  None.
 276:.\Generated_Source\PSoC4/TelemUART.c **** *
 277:.\Generated_Source\PSoC4/TelemUART.c **** * Return:
 278:.\Generated_Source\PSoC4/TelemUART.c **** *  Current state of the control register.
 279:.\Generated_Source\PSoC4/TelemUART.c **** *
 280:.\Generated_Source\PSoC4/TelemUART.c **** *******************************************************************************/
 281:.\Generated_Source\PSoC4/TelemUART.c **** uint8 TelemUART_ReadControlRegister(void) 
 282:.\Generated_Source\PSoC4/TelemUART.c **** {
 197              		.loc 1 282 0
 198              		.cfi_startproc
 283:.\Generated_Source\PSoC4/TelemUART.c ****     #if( TelemUART_CONTROL_REG_REMOVED )
 284:.\Generated_Source\PSoC4/TelemUART.c ****         return(0u);
 285:.\Generated_Source\PSoC4/TelemUART.c ****     #else
 286:.\Generated_Source\PSoC4/TelemUART.c ****         return(TelemUART_CONTROL_REG);
 287:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* End TelemUART_CONTROL_REG_REMOVED */
 288:.\Generated_Source\PSoC4/TelemUART.c **** }
 199              		.loc 1 288 0
 200 0000 0020     		mov	r0, #0
 201              		@ sp needed for prologue
 202 0002 7047     		bx	lr
 203              		.cfi_endproc
 204              	.LFE4:
 205              		.size	TelemUART_ReadControlRegister, .-TelemUART_ReadControlRegister
 206              		.section	.text.TelemUART_WriteControlRegister,"ax",%progbits
 207              		.align	1
 208              		.global	TelemUART_WriteControlRegister
 209              		.code	16
 210              		.thumb_func
 211              		.type	TelemUART_WriteControlRegister, %function
 212              	TelemUART_WriteControlRegister:
 213              	.LFB5:
 289:.\Generated_Source\PSoC4/TelemUART.c **** 
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 10


 290:.\Generated_Source\PSoC4/TelemUART.c **** 
 291:.\Generated_Source\PSoC4/TelemUART.c **** /*******************************************************************************
 292:.\Generated_Source\PSoC4/TelemUART.c **** * Function Name: TelemUART_WriteControlRegister
 293:.\Generated_Source\PSoC4/TelemUART.c **** ********************************************************************************
 294:.\Generated_Source\PSoC4/TelemUART.c **** *
 295:.\Generated_Source\PSoC4/TelemUART.c **** * Summary:
 296:.\Generated_Source\PSoC4/TelemUART.c **** *  Writes an 8-bit value into the control register
 297:.\Generated_Source\PSoC4/TelemUART.c **** *
 298:.\Generated_Source\PSoC4/TelemUART.c **** * Parameters:
 299:.\Generated_Source\PSoC4/TelemUART.c **** *  control:  control register value
 300:.\Generated_Source\PSoC4/TelemUART.c **** *
 301:.\Generated_Source\PSoC4/TelemUART.c **** * Return:
 302:.\Generated_Source\PSoC4/TelemUART.c **** *  None.
 303:.\Generated_Source\PSoC4/TelemUART.c **** *
 304:.\Generated_Source\PSoC4/TelemUART.c **** *******************************************************************************/
 305:.\Generated_Source\PSoC4/TelemUART.c **** void  TelemUART_WriteControlRegister(uint8 control) 
 306:.\Generated_Source\PSoC4/TelemUART.c **** {
 214              		.loc 1 306 0
 215              		.cfi_startproc
 216              	.LVL12:
 307:.\Generated_Source\PSoC4/TelemUART.c ****     #if( TelemUART_CONTROL_REG_REMOVED )
 308:.\Generated_Source\PSoC4/TelemUART.c ****         if(control != 0u) { }      /* release compiler warning */
 309:.\Generated_Source\PSoC4/TelemUART.c ****     #else
 310:.\Generated_Source\PSoC4/TelemUART.c ****        TelemUART_CONTROL_REG = control;
 311:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* End TelemUART_CONTROL_REG_REMOVED */
 312:.\Generated_Source\PSoC4/TelemUART.c **** }
 217              		.loc 1 312 0
 218              		@ sp needed for prologue
 219 0000 7047     		bx	lr
 220              		.cfi_endproc
 221              	.LFE5:
 222              		.size	TelemUART_WriteControlRegister, .-TelemUART_WriteControlRegister
 223              		.section	.text.TelemUART_SetTxInterruptMode,"ax",%progbits
 224              		.align	1
 225              		.global	TelemUART_SetTxInterruptMode
 226              		.code	16
 227              		.thumb_func
 228              		.type	TelemUART_SetTxInterruptMode, %function
 229              	TelemUART_SetTxInterruptMode:
 230              	.LFB6:
 313:.\Generated_Source\PSoC4/TelemUART.c **** 
 314:.\Generated_Source\PSoC4/TelemUART.c **** 
 315:.\Generated_Source\PSoC4/TelemUART.c **** #if(TelemUART_RX_ENABLED || TelemUART_HD_ENABLED)
 316:.\Generated_Source\PSoC4/TelemUART.c **** 
 317:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_RX_INTERRUPT_ENABLED)
 318:.\Generated_Source\PSoC4/TelemUART.c **** 
 319:.\Generated_Source\PSoC4/TelemUART.c ****         /*******************************************************************************
 320:.\Generated_Source\PSoC4/TelemUART.c ****         * Function Name: TelemUART_EnableRxInt
 321:.\Generated_Source\PSoC4/TelemUART.c ****         ********************************************************************************
 322:.\Generated_Source\PSoC4/TelemUART.c ****         *
 323:.\Generated_Source\PSoC4/TelemUART.c ****         * Summary:
 324:.\Generated_Source\PSoC4/TelemUART.c ****         *  Enable RX interrupt generation
 325:.\Generated_Source\PSoC4/TelemUART.c ****         *
 326:.\Generated_Source\PSoC4/TelemUART.c ****         * Parameters:
 327:.\Generated_Source\PSoC4/TelemUART.c ****         *  None.
 328:.\Generated_Source\PSoC4/TelemUART.c ****         *
 329:.\Generated_Source\PSoC4/TelemUART.c ****         * Return:
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 11


 330:.\Generated_Source\PSoC4/TelemUART.c ****         *  None.
 331:.\Generated_Source\PSoC4/TelemUART.c ****         *
 332:.\Generated_Source\PSoC4/TelemUART.c ****         * Theory:
 333:.\Generated_Source\PSoC4/TelemUART.c ****         *  Enable the interrupt output -or- the interrupt component itself
 334:.\Generated_Source\PSoC4/TelemUART.c ****         *
 335:.\Generated_Source\PSoC4/TelemUART.c ****         *******************************************************************************/
 336:.\Generated_Source\PSoC4/TelemUART.c ****         void TelemUART_EnableRxInt(void) 
 337:.\Generated_Source\PSoC4/TelemUART.c ****         {
 338:.\Generated_Source\PSoC4/TelemUART.c ****             CyIntEnable(TelemUART_RX_VECT_NUM);
 339:.\Generated_Source\PSoC4/TelemUART.c ****         }
 340:.\Generated_Source\PSoC4/TelemUART.c **** 
 341:.\Generated_Source\PSoC4/TelemUART.c **** 
 342:.\Generated_Source\PSoC4/TelemUART.c ****         /*******************************************************************************
 343:.\Generated_Source\PSoC4/TelemUART.c ****         * Function Name: TelemUART_DisableRxInt
 344:.\Generated_Source\PSoC4/TelemUART.c ****         ********************************************************************************
 345:.\Generated_Source\PSoC4/TelemUART.c ****         *
 346:.\Generated_Source\PSoC4/TelemUART.c ****         * Summary:
 347:.\Generated_Source\PSoC4/TelemUART.c ****         *  Disable RX interrupt generation
 348:.\Generated_Source\PSoC4/TelemUART.c ****         *
 349:.\Generated_Source\PSoC4/TelemUART.c ****         * Parameters:
 350:.\Generated_Source\PSoC4/TelemUART.c ****         *  None.
 351:.\Generated_Source\PSoC4/TelemUART.c ****         *
 352:.\Generated_Source\PSoC4/TelemUART.c ****         * Return:
 353:.\Generated_Source\PSoC4/TelemUART.c ****         *  None.
 354:.\Generated_Source\PSoC4/TelemUART.c ****         *
 355:.\Generated_Source\PSoC4/TelemUART.c ****         * Theory:
 356:.\Generated_Source\PSoC4/TelemUART.c ****         *  Disable the interrupt output -or- the interrupt component itself
 357:.\Generated_Source\PSoC4/TelemUART.c ****         *
 358:.\Generated_Source\PSoC4/TelemUART.c ****         *******************************************************************************/
 359:.\Generated_Source\PSoC4/TelemUART.c ****         void TelemUART_DisableRxInt(void) 
 360:.\Generated_Source\PSoC4/TelemUART.c ****         {
 361:.\Generated_Source\PSoC4/TelemUART.c ****             CyIntDisable(TelemUART_RX_VECT_NUM);
 362:.\Generated_Source\PSoC4/TelemUART.c ****         }
 363:.\Generated_Source\PSoC4/TelemUART.c **** 
 364:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* TelemUART_RX_INTERRUPT_ENABLED */
 365:.\Generated_Source\PSoC4/TelemUART.c **** 
 366:.\Generated_Source\PSoC4/TelemUART.c **** 
 367:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
 368:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_SetRxInterruptMode
 369:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
 370:.\Generated_Source\PSoC4/TelemUART.c ****     *
 371:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
 372:.\Generated_Source\PSoC4/TelemUART.c ****     *  Configure which status bits trigger an interrupt event
 373:.\Generated_Source\PSoC4/TelemUART.c ****     *
 374:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
 375:.\Generated_Source\PSoC4/TelemUART.c ****     *  IntSrc:  An or'd combination of the desired status bit masks (defined in
 376:.\Generated_Source\PSoC4/TelemUART.c ****     *           the header file)
 377:.\Generated_Source\PSoC4/TelemUART.c ****     *
 378:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
 379:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
 380:.\Generated_Source\PSoC4/TelemUART.c ****     *
 381:.\Generated_Source\PSoC4/TelemUART.c ****     * Theory:
 382:.\Generated_Source\PSoC4/TelemUART.c ****     *  Enables the output of specific status bits to the interrupt controller
 383:.\Generated_Source\PSoC4/TelemUART.c ****     *
 384:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
 385:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_SetRxInterruptMode(uint8 intSrc) 
 386:.\Generated_Source\PSoC4/TelemUART.c ****     {
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 12


 387:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_RXSTATUS_MASK_REG  = intSrc;
 388:.\Generated_Source\PSoC4/TelemUART.c ****     }
 389:.\Generated_Source\PSoC4/TelemUART.c **** 
 390:.\Generated_Source\PSoC4/TelemUART.c **** 
 391:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
 392:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_ReadRxData
 393:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
 394:.\Generated_Source\PSoC4/TelemUART.c ****     *
 395:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
 396:.\Generated_Source\PSoC4/TelemUART.c ****     *  Returns data in RX Data register without checking status register to
 397:.\Generated_Source\PSoC4/TelemUART.c ****     *  determine if data is valid
 398:.\Generated_Source\PSoC4/TelemUART.c ****     *
 399:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
 400:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
 401:.\Generated_Source\PSoC4/TelemUART.c ****     *
 402:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
 403:.\Generated_Source\PSoC4/TelemUART.c ****     *  Received data from RX register
 404:.\Generated_Source\PSoC4/TelemUART.c ****     *
 405:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
 406:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBuffer - RAM buffer pointer for save received data.
 407:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferWrite - cyclic index for write to rxBuffer,
 408:.\Generated_Source\PSoC4/TelemUART.c ****     *     checked to identify new data.
 409:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferRead - cyclic index for read from rxBuffer,
 410:.\Generated_Source\PSoC4/TelemUART.c ****     *     incremented after each byte has been read from buffer.
 411:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferLoopDetect - creared if loop condition was detected
 412:.\Generated_Source\PSoC4/TelemUART.c ****     *     in RX ISR.
 413:.\Generated_Source\PSoC4/TelemUART.c ****     *
 414:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
 415:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
 416:.\Generated_Source\PSoC4/TelemUART.c ****     *
 417:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
 418:.\Generated_Source\PSoC4/TelemUART.c ****     uint8 TelemUART_ReadRxData(void) 
 419:.\Generated_Source\PSoC4/TelemUART.c ****     {
 420:.\Generated_Source\PSoC4/TelemUART.c ****         uint8 rxData;
 421:.\Generated_Source\PSoC4/TelemUART.c **** 
 422:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH)
 423:.\Generated_Source\PSoC4/TelemUART.c ****             uint8 loc_rxBufferRead;
 424:.\Generated_Source\PSoC4/TelemUART.c ****             uint8 loc_rxBufferWrite;
 425:.\Generated_Source\PSoC4/TelemUART.c ****             /* Protect variables that could change on interrupt. */
 426:.\Generated_Source\PSoC4/TelemUART.c ****             /* Disable Rx interrupt. */
 427:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_RX_INTERRUPT_ENABLED)
 428:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_DisableRxInt();
 429:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* TelemUART_RX_INTERRUPT_ENABLED */
 430:.\Generated_Source\PSoC4/TelemUART.c ****             loc_rxBufferRead = TelemUART_rxBufferRead;
 431:.\Generated_Source\PSoC4/TelemUART.c ****             loc_rxBufferWrite = TelemUART_rxBufferWrite;
 432:.\Generated_Source\PSoC4/TelemUART.c **** 
 433:.\Generated_Source\PSoC4/TelemUART.c ****             if( (TelemUART_rxBufferLoopDetect != 0u) || (loc_rxBufferRead != loc_rxBufferWrite) )
 434:.\Generated_Source\PSoC4/TelemUART.c ****             {
 435:.\Generated_Source\PSoC4/TelemUART.c ****                 rxData = TelemUART_rxBuffer[loc_rxBufferRead];
 436:.\Generated_Source\PSoC4/TelemUART.c ****                 loc_rxBufferRead++;
 437:.\Generated_Source\PSoC4/TelemUART.c **** 
 438:.\Generated_Source\PSoC4/TelemUART.c ****                 if(loc_rxBufferRead >= TelemUART_RXBUFFERSIZE)
 439:.\Generated_Source\PSoC4/TelemUART.c ****                 {
 440:.\Generated_Source\PSoC4/TelemUART.c ****                     loc_rxBufferRead = 0u;
 441:.\Generated_Source\PSoC4/TelemUART.c ****                 }
 442:.\Generated_Source\PSoC4/TelemUART.c ****                 /* Update the real pointer */
 443:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_rxBufferRead = loc_rxBufferRead;
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 13


 444:.\Generated_Source\PSoC4/TelemUART.c **** 
 445:.\Generated_Source\PSoC4/TelemUART.c ****                 if(TelemUART_rxBufferLoopDetect != 0u )
 446:.\Generated_Source\PSoC4/TelemUART.c ****                 {
 447:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_rxBufferLoopDetect = 0u;
 448:.\Generated_Source\PSoC4/TelemUART.c ****                     #if( (TelemUART_RX_INTERRUPT_ENABLED) && (TelemUART_FLOW_CONTROL != 0u) && \
 449:.\Generated_Source\PSoC4/TelemUART.c ****                          (TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH) )
 450:.\Generated_Source\PSoC4/TelemUART.c ****                         /* When Hardware Flow Control selected - return RX mask */
 451:.\Generated_Source\PSoC4/TelemUART.c ****                         #if( TelemUART_HD_ENABLED )
 452:.\Generated_Source\PSoC4/TelemUART.c ****                             if((TelemUART_CONTROL_REG & TelemUART_CTRL_HD_SEND) == 0u)
 453:.\Generated_Source\PSoC4/TelemUART.c ****                             {   /* In Half duplex mode return RX mask only in RX
 454:.\Generated_Source\PSoC4/TelemUART.c ****                                 *  configuration set, otherwise
 455:.\Generated_Source\PSoC4/TelemUART.c ****                                 *  mask will be returned in LoadRxConfig() API.
 456:.\Generated_Source\PSoC4/TelemUART.c ****                                 */
 457:.\Generated_Source\PSoC4/TelemUART.c ****                                 TelemUART_RXSTATUS_MASK_REG  |= TelemUART_RX_STS_FIFO_NOTEMPTY;
 458:.\Generated_Source\PSoC4/TelemUART.c ****                             }
 459:.\Generated_Source\PSoC4/TelemUART.c ****                         #else
 460:.\Generated_Source\PSoC4/TelemUART.c ****                             TelemUART_RXSTATUS_MASK_REG  |= TelemUART_RX_STS_FIFO_NOTEMPTY;
 461:.\Generated_Source\PSoC4/TelemUART.c ****                         #endif /* end TelemUART_HD_ENABLED */
 462:.\Generated_Source\PSoC4/TelemUART.c ****                     #endif /* TelemUART_RX_INTERRUPT_ENABLED and Hardware flow control*/
 463:.\Generated_Source\PSoC4/TelemUART.c ****                 }
 464:.\Generated_Source\PSoC4/TelemUART.c ****             }
 465:.\Generated_Source\PSoC4/TelemUART.c ****             else
 466:.\Generated_Source\PSoC4/TelemUART.c ****             {   /* Needs to check status for RX_STS_FIFO_NOTEMPTY bit*/
 467:.\Generated_Source\PSoC4/TelemUART.c ****                 rxData = TelemUART_RXDATA_REG;
 468:.\Generated_Source\PSoC4/TelemUART.c ****             }
 469:.\Generated_Source\PSoC4/TelemUART.c **** 
 470:.\Generated_Source\PSoC4/TelemUART.c ****             /* Enable Rx interrupt. */
 471:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_RX_INTERRUPT_ENABLED)
 472:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_EnableRxInt();
 473:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_RX_INTERRUPT_ENABLED */
 474:.\Generated_Source\PSoC4/TelemUART.c **** 
 475:.\Generated_Source\PSoC4/TelemUART.c ****         #else /* TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH */
 476:.\Generated_Source\PSoC4/TelemUART.c **** 
 477:.\Generated_Source\PSoC4/TelemUART.c ****             /* Needs to check status for RX_STS_FIFO_NOTEMPTY bit*/
 478:.\Generated_Source\PSoC4/TelemUART.c ****             rxData = TelemUART_RXDATA_REG;
 479:.\Generated_Source\PSoC4/TelemUART.c **** 
 480:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH */
 481:.\Generated_Source\PSoC4/TelemUART.c **** 
 482:.\Generated_Source\PSoC4/TelemUART.c ****         return(rxData);
 483:.\Generated_Source\PSoC4/TelemUART.c ****     }
 484:.\Generated_Source\PSoC4/TelemUART.c **** 
 485:.\Generated_Source\PSoC4/TelemUART.c **** 
 486:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
 487:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_ReadRxStatus
 488:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
 489:.\Generated_Source\PSoC4/TelemUART.c ****     *
 490:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
 491:.\Generated_Source\PSoC4/TelemUART.c ****     *  Read the current state of the status register
 492:.\Generated_Source\PSoC4/TelemUART.c ****     *  And detect software buffer overflow.
 493:.\Generated_Source\PSoC4/TelemUART.c ****     *
 494:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
 495:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
 496:.\Generated_Source\PSoC4/TelemUART.c ****     *
 497:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
 498:.\Generated_Source\PSoC4/TelemUART.c ****     *  Current state of the status register.
 499:.\Generated_Source\PSoC4/TelemUART.c ****     *
 500:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 14


 501:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferOverflow - used to indicate overload condition.
 502:.\Generated_Source\PSoC4/TelemUART.c ****     *   It set to one in RX interrupt when there isn?t free space in
 503:.\Generated_Source\PSoC4/TelemUART.c ****     *   TelemUART_rxBufferRead to write new data. This condition returned
 504:.\Generated_Source\PSoC4/TelemUART.c ****     *   and cleared to zero by this API as an
 505:.\Generated_Source\PSoC4/TelemUART.c ****     *   TelemUART_RX_STS_SOFT_BUFF_OVER bit along with RX Status register
 506:.\Generated_Source\PSoC4/TelemUART.c ****     *   bits.
 507:.\Generated_Source\PSoC4/TelemUART.c ****     *
 508:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
 509:.\Generated_Source\PSoC4/TelemUART.c ****     uint8 TelemUART_ReadRxStatus(void) 
 510:.\Generated_Source\PSoC4/TelemUART.c ****     {
 511:.\Generated_Source\PSoC4/TelemUART.c ****         uint8 status;
 512:.\Generated_Source\PSoC4/TelemUART.c **** 
 513:.\Generated_Source\PSoC4/TelemUART.c ****         status = TelemUART_RXSTATUS_REG & TelemUART_RX_HW_MASK;
 514:.\Generated_Source\PSoC4/TelemUART.c **** 
 515:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH)
 516:.\Generated_Source\PSoC4/TelemUART.c ****             if( TelemUART_rxBufferOverflow != 0u )
 517:.\Generated_Source\PSoC4/TelemUART.c ****             {
 518:.\Generated_Source\PSoC4/TelemUART.c ****                 status |= TelemUART_RX_STS_SOFT_BUFF_OVER;
 519:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_rxBufferOverflow = 0u;
 520:.\Generated_Source\PSoC4/TelemUART.c ****             }
 521:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* TelemUART_RXBUFFERSIZE */
 522:.\Generated_Source\PSoC4/TelemUART.c **** 
 523:.\Generated_Source\PSoC4/TelemUART.c ****         return(status);
 524:.\Generated_Source\PSoC4/TelemUART.c ****     }
 525:.\Generated_Source\PSoC4/TelemUART.c **** 
 526:.\Generated_Source\PSoC4/TelemUART.c **** 
 527:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
 528:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_GetChar
 529:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
 530:.\Generated_Source\PSoC4/TelemUART.c ****     *
 531:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
 532:.\Generated_Source\PSoC4/TelemUART.c ****     *  Reads UART RX buffer immediately, if data is not available or an error
 533:.\Generated_Source\PSoC4/TelemUART.c ****     *  condition exists, zero is returned; otherwise, character is read and
 534:.\Generated_Source\PSoC4/TelemUART.c ****     *  returned.
 535:.\Generated_Source\PSoC4/TelemUART.c ****     *
 536:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
 537:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
 538:.\Generated_Source\PSoC4/TelemUART.c ****     *
 539:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
 540:.\Generated_Source\PSoC4/TelemUART.c ****     *  Character read from UART RX buffer. ASCII characters from 1 to 255 are valid.
 541:.\Generated_Source\PSoC4/TelemUART.c ****     *  A returned zero signifies an error condition or no data available.
 542:.\Generated_Source\PSoC4/TelemUART.c ****     *
 543:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
 544:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBuffer - RAM buffer pointer for save received data.
 545:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferWrite - cyclic index for write to rxBuffer,
 546:.\Generated_Source\PSoC4/TelemUART.c ****     *     checked to identify new data.
 547:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferRead - cyclic index for read from rxBuffer,
 548:.\Generated_Source\PSoC4/TelemUART.c ****     *     incremented after each byte has been read from buffer.
 549:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferLoopDetect - creared if loop condition was detected
 550:.\Generated_Source\PSoC4/TelemUART.c ****     *     in RX ISR.
 551:.\Generated_Source\PSoC4/TelemUART.c ****     *
 552:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
 553:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
 554:.\Generated_Source\PSoC4/TelemUART.c ****     *
 555:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
 556:.\Generated_Source\PSoC4/TelemUART.c ****     uint8 TelemUART_GetChar(void) 
 557:.\Generated_Source\PSoC4/TelemUART.c ****     {
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 15


 558:.\Generated_Source\PSoC4/TelemUART.c ****         uint8 rxData = 0u;
 559:.\Generated_Source\PSoC4/TelemUART.c ****         uint8 rxStatus;
 560:.\Generated_Source\PSoC4/TelemUART.c **** 
 561:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH)
 562:.\Generated_Source\PSoC4/TelemUART.c ****             uint8 loc_rxBufferRead;
 563:.\Generated_Source\PSoC4/TelemUART.c ****             uint8 loc_rxBufferWrite;
 564:.\Generated_Source\PSoC4/TelemUART.c ****             /* Protect variables that could change on interrupt. */
 565:.\Generated_Source\PSoC4/TelemUART.c ****             /* Disable Rx interrupt. */
 566:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_RX_INTERRUPT_ENABLED)
 567:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_DisableRxInt();
 568:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* TelemUART_RX_INTERRUPT_ENABLED */
 569:.\Generated_Source\PSoC4/TelemUART.c ****             loc_rxBufferRead = TelemUART_rxBufferRead;
 570:.\Generated_Source\PSoC4/TelemUART.c ****             loc_rxBufferWrite = TelemUART_rxBufferWrite;
 571:.\Generated_Source\PSoC4/TelemUART.c **** 
 572:.\Generated_Source\PSoC4/TelemUART.c ****             if( (TelemUART_rxBufferLoopDetect != 0u) || (loc_rxBufferRead != loc_rxBufferWrite) )
 573:.\Generated_Source\PSoC4/TelemUART.c ****             {
 574:.\Generated_Source\PSoC4/TelemUART.c ****                 rxData = TelemUART_rxBuffer[loc_rxBufferRead];
 575:.\Generated_Source\PSoC4/TelemUART.c ****                 loc_rxBufferRead++;
 576:.\Generated_Source\PSoC4/TelemUART.c ****                 if(loc_rxBufferRead >= TelemUART_RXBUFFERSIZE)
 577:.\Generated_Source\PSoC4/TelemUART.c ****                 {
 578:.\Generated_Source\PSoC4/TelemUART.c ****                     loc_rxBufferRead = 0u;
 579:.\Generated_Source\PSoC4/TelemUART.c ****                 }
 580:.\Generated_Source\PSoC4/TelemUART.c ****                 /* Update the real pointer */
 581:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_rxBufferRead = loc_rxBufferRead;
 582:.\Generated_Source\PSoC4/TelemUART.c **** 
 583:.\Generated_Source\PSoC4/TelemUART.c ****                 if(TelemUART_rxBufferLoopDetect > 0u )
 584:.\Generated_Source\PSoC4/TelemUART.c ****                 {
 585:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_rxBufferLoopDetect = 0u;
 586:.\Generated_Source\PSoC4/TelemUART.c ****                     #if( (TelemUART_RX_INTERRUPT_ENABLED) && (TelemUART_FLOW_CONTROL != 0u) )
 587:.\Generated_Source\PSoC4/TelemUART.c ****                         /* When Hardware Flow Control selected - return RX mask */
 588:.\Generated_Source\PSoC4/TelemUART.c ****                         #if( TelemUART_HD_ENABLED )
 589:.\Generated_Source\PSoC4/TelemUART.c ****                             if((TelemUART_CONTROL_REG & TelemUART_CTRL_HD_SEND) == 0u)
 590:.\Generated_Source\PSoC4/TelemUART.c ****                             {   /* In Half duplex mode return RX mask only if
 591:.\Generated_Source\PSoC4/TelemUART.c ****                                 *  RX configuration set, otherwise
 592:.\Generated_Source\PSoC4/TelemUART.c ****                                 *  mask will be returned in LoadRxConfig() API.
 593:.\Generated_Source\PSoC4/TelemUART.c ****                                 */
 594:.\Generated_Source\PSoC4/TelemUART.c ****                                 TelemUART_RXSTATUS_MASK_REG  |= TelemUART_RX_STS_FIFO_NOTEMPTY;
 595:.\Generated_Source\PSoC4/TelemUART.c ****                             }
 596:.\Generated_Source\PSoC4/TelemUART.c ****                         #else
 597:.\Generated_Source\PSoC4/TelemUART.c ****                             TelemUART_RXSTATUS_MASK_REG  |= TelemUART_RX_STS_FIFO_NOTEMPTY;
 598:.\Generated_Source\PSoC4/TelemUART.c ****                         #endif /* end TelemUART_HD_ENABLED */
 599:.\Generated_Source\PSoC4/TelemUART.c ****                     #endif /* TelemUART_RX_INTERRUPT_ENABLED and Hardware flow control*/
 600:.\Generated_Source\PSoC4/TelemUART.c ****                 }
 601:.\Generated_Source\PSoC4/TelemUART.c **** 
 602:.\Generated_Source\PSoC4/TelemUART.c ****             }
 603:.\Generated_Source\PSoC4/TelemUART.c ****             else
 604:.\Generated_Source\PSoC4/TelemUART.c ****             {   rxStatus = TelemUART_RXSTATUS_REG;
 605:.\Generated_Source\PSoC4/TelemUART.c ****                 if((rxStatus & TelemUART_RX_STS_FIFO_NOTEMPTY) != 0u)
 606:.\Generated_Source\PSoC4/TelemUART.c ****                 {   /* Read received data from FIFO*/
 607:.\Generated_Source\PSoC4/TelemUART.c ****                     rxData = TelemUART_RXDATA_REG;
 608:.\Generated_Source\PSoC4/TelemUART.c ****                     /*Check status on error*/
 609:.\Generated_Source\PSoC4/TelemUART.c ****                     if((rxStatus & (TelemUART_RX_STS_BREAK | TelemUART_RX_STS_PAR_ERROR |
 610:.\Generated_Source\PSoC4/TelemUART.c ****                                    TelemUART_RX_STS_STOP_ERROR | TelemUART_RX_STS_OVERRUN)) != 0u)
 611:.\Generated_Source\PSoC4/TelemUART.c ****                     {
 612:.\Generated_Source\PSoC4/TelemUART.c ****                         rxData = 0u;
 613:.\Generated_Source\PSoC4/TelemUART.c ****                     }
 614:.\Generated_Source\PSoC4/TelemUART.c ****                 }
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 16


 615:.\Generated_Source\PSoC4/TelemUART.c ****             }
 616:.\Generated_Source\PSoC4/TelemUART.c **** 
 617:.\Generated_Source\PSoC4/TelemUART.c ****             /* Enable Rx interrupt. */
 618:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_RX_INTERRUPT_ENABLED)
 619:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_EnableRxInt();
 620:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* TelemUART_RX_INTERRUPT_ENABLED */
 621:.\Generated_Source\PSoC4/TelemUART.c **** 
 622:.\Generated_Source\PSoC4/TelemUART.c ****         #else /* TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH */
 623:.\Generated_Source\PSoC4/TelemUART.c **** 
 624:.\Generated_Source\PSoC4/TelemUART.c ****             rxStatus =TelemUART_RXSTATUS_REG;
 625:.\Generated_Source\PSoC4/TelemUART.c ****             if((rxStatus & TelemUART_RX_STS_FIFO_NOTEMPTY) != 0u)
 626:.\Generated_Source\PSoC4/TelemUART.c ****             {   /* Read received data from FIFO*/
 627:.\Generated_Source\PSoC4/TelemUART.c ****                 rxData = TelemUART_RXDATA_REG;
 628:.\Generated_Source\PSoC4/TelemUART.c ****                 /*Check status on error*/
 629:.\Generated_Source\PSoC4/TelemUART.c ****                 if((rxStatus & (TelemUART_RX_STS_BREAK | TelemUART_RX_STS_PAR_ERROR |
 630:.\Generated_Source\PSoC4/TelemUART.c ****                                TelemUART_RX_STS_STOP_ERROR | TelemUART_RX_STS_OVERRUN)) != 0u)
 631:.\Generated_Source\PSoC4/TelemUART.c ****                 {
 632:.\Generated_Source\PSoC4/TelemUART.c ****                     rxData = 0u;
 633:.\Generated_Source\PSoC4/TelemUART.c ****                 }
 634:.\Generated_Source\PSoC4/TelemUART.c ****             }
 635:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH */
 636:.\Generated_Source\PSoC4/TelemUART.c **** 
 637:.\Generated_Source\PSoC4/TelemUART.c ****         return(rxData);
 638:.\Generated_Source\PSoC4/TelemUART.c ****     }
 639:.\Generated_Source\PSoC4/TelemUART.c **** 
 640:.\Generated_Source\PSoC4/TelemUART.c **** 
 641:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
 642:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_GetByte
 643:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
 644:.\Generated_Source\PSoC4/TelemUART.c ****     *
 645:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
 646:.\Generated_Source\PSoC4/TelemUART.c ****     *  Grab the next available byte of data from the recieve FIFO
 647:.\Generated_Source\PSoC4/TelemUART.c ****     *
 648:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
 649:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
 650:.\Generated_Source\PSoC4/TelemUART.c ****     *
 651:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
 652:.\Generated_Source\PSoC4/TelemUART.c ****     *  MSB contains Status Register and LSB contains UART RX data
 653:.\Generated_Source\PSoC4/TelemUART.c ****     *
 654:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
 655:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
 656:.\Generated_Source\PSoC4/TelemUART.c ****     *
 657:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
 658:.\Generated_Source\PSoC4/TelemUART.c ****     uint16 TelemUART_GetByte(void) 
 659:.\Generated_Source\PSoC4/TelemUART.c ****     {
 660:.\Generated_Source\PSoC4/TelemUART.c ****         return ( ((uint16)TelemUART_ReadRxStatus() << 8u) | TelemUART_ReadRxData() );
 661:.\Generated_Source\PSoC4/TelemUART.c ****     }
 662:.\Generated_Source\PSoC4/TelemUART.c **** 
 663:.\Generated_Source\PSoC4/TelemUART.c **** 
 664:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
 665:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_GetRxBufferSize
 666:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
 667:.\Generated_Source\PSoC4/TelemUART.c ****     *
 668:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
 669:.\Generated_Source\PSoC4/TelemUART.c ****     *  Determine the amount of bytes left in the RX buffer and return the count in
 670:.\Generated_Source\PSoC4/TelemUART.c ****     *  bytes
 671:.\Generated_Source\PSoC4/TelemUART.c ****     *
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 17


 672:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
 673:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
 674:.\Generated_Source\PSoC4/TelemUART.c ****     *
 675:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
 676:.\Generated_Source\PSoC4/TelemUART.c ****     *  uint8: Integer count of the number of bytes left
 677:.\Generated_Source\PSoC4/TelemUART.c ****     *  in the RX buffer
 678:.\Generated_Source\PSoC4/TelemUART.c ****     *
 679:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
 680:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferWrite - used to calculate left bytes.
 681:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferRead - used to calculate left bytes.
 682:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferLoopDetect - checked to decide left bytes amount.
 683:.\Generated_Source\PSoC4/TelemUART.c ****     *
 684:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
 685:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
 686:.\Generated_Source\PSoC4/TelemUART.c ****     *
 687:.\Generated_Source\PSoC4/TelemUART.c ****     * Theory:
 688:.\Generated_Source\PSoC4/TelemUART.c ****     *  Allows the user to find out how full the RX Buffer is.
 689:.\Generated_Source\PSoC4/TelemUART.c ****     *
 690:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
 691:.\Generated_Source\PSoC4/TelemUART.c ****     uint8 TelemUART_GetRxBufferSize(void)
 692:.\Generated_Source\PSoC4/TelemUART.c ****                                                             
 693:.\Generated_Source\PSoC4/TelemUART.c ****     {
 694:.\Generated_Source\PSoC4/TelemUART.c ****         uint8 size;
 695:.\Generated_Source\PSoC4/TelemUART.c **** 
 696:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH)
 697:.\Generated_Source\PSoC4/TelemUART.c **** 
 698:.\Generated_Source\PSoC4/TelemUART.c ****             /* Disable Rx interrupt. */
 699:.\Generated_Source\PSoC4/TelemUART.c ****             /* Protect variables that could change on interrupt. */
 700:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_RX_INTERRUPT_ENABLED)
 701:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_DisableRxInt();
 702:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* TelemUART_RX_INTERRUPT_ENABLED */
 703:.\Generated_Source\PSoC4/TelemUART.c **** 
 704:.\Generated_Source\PSoC4/TelemUART.c ****             if(TelemUART_rxBufferRead == TelemUART_rxBufferWrite)
 705:.\Generated_Source\PSoC4/TelemUART.c ****             {
 706:.\Generated_Source\PSoC4/TelemUART.c ****                 if(TelemUART_rxBufferLoopDetect > 0u)
 707:.\Generated_Source\PSoC4/TelemUART.c ****                 {
 708:.\Generated_Source\PSoC4/TelemUART.c ****                     size = TelemUART_RXBUFFERSIZE;
 709:.\Generated_Source\PSoC4/TelemUART.c ****                 }
 710:.\Generated_Source\PSoC4/TelemUART.c ****                 else
 711:.\Generated_Source\PSoC4/TelemUART.c ****                 {
 712:.\Generated_Source\PSoC4/TelemUART.c ****                     size = 0u;
 713:.\Generated_Source\PSoC4/TelemUART.c ****                 }
 714:.\Generated_Source\PSoC4/TelemUART.c ****             }
 715:.\Generated_Source\PSoC4/TelemUART.c ****             else if(TelemUART_rxBufferRead < TelemUART_rxBufferWrite)
 716:.\Generated_Source\PSoC4/TelemUART.c ****             {
 717:.\Generated_Source\PSoC4/TelemUART.c ****                 size = (TelemUART_rxBufferWrite - TelemUART_rxBufferRead);
 718:.\Generated_Source\PSoC4/TelemUART.c ****             }
 719:.\Generated_Source\PSoC4/TelemUART.c ****             else
 720:.\Generated_Source\PSoC4/TelemUART.c ****             {
 721:.\Generated_Source\PSoC4/TelemUART.c ****                 size = (TelemUART_RXBUFFERSIZE - TelemUART_rxBufferRead) + TelemUART_rxBufferWrite;
 722:.\Generated_Source\PSoC4/TelemUART.c ****             }
 723:.\Generated_Source\PSoC4/TelemUART.c **** 
 724:.\Generated_Source\PSoC4/TelemUART.c ****             /* Enable Rx interrupt. */
 725:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_RX_INTERRUPT_ENABLED)
 726:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_EnableRxInt();
 727:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_RX_INTERRUPT_ENABLED */
 728:.\Generated_Source\PSoC4/TelemUART.c **** 
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 18


 729:.\Generated_Source\PSoC4/TelemUART.c ****         #else /* TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH */
 730:.\Generated_Source\PSoC4/TelemUART.c **** 
 731:.\Generated_Source\PSoC4/TelemUART.c ****             /* We can only know if there is data in the fifo. */
 732:.\Generated_Source\PSoC4/TelemUART.c ****             size = ((TelemUART_RXSTATUS_REG & TelemUART_RX_STS_FIFO_NOTEMPTY) != 0u) ? 1u : 0u;
 733:.\Generated_Source\PSoC4/TelemUART.c **** 
 734:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH */
 735:.\Generated_Source\PSoC4/TelemUART.c **** 
 736:.\Generated_Source\PSoC4/TelemUART.c ****         return(size);
 737:.\Generated_Source\PSoC4/TelemUART.c ****     }
 738:.\Generated_Source\PSoC4/TelemUART.c **** 
 739:.\Generated_Source\PSoC4/TelemUART.c **** 
 740:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
 741:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_ClearRxBuffer
 742:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
 743:.\Generated_Source\PSoC4/TelemUART.c ****     *
 744:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
 745:.\Generated_Source\PSoC4/TelemUART.c ****     *  Clears the RX RAM buffer by setting the read and write pointers both to zero.
 746:.\Generated_Source\PSoC4/TelemUART.c ****     *  Clears hardware RX FIFO.
 747:.\Generated_Source\PSoC4/TelemUART.c ****     *
 748:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
 749:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
 750:.\Generated_Source\PSoC4/TelemUART.c ****     *
 751:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
 752:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
 753:.\Generated_Source\PSoC4/TelemUART.c ****     *
 754:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
 755:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferWrite - cleared to zero.
 756:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferRead - cleared to zero.
 757:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferLoopDetect - cleared to zero.
 758:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferOverflow - cleared to zero.
 759:.\Generated_Source\PSoC4/TelemUART.c ****     *
 760:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
 761:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
 762:.\Generated_Source\PSoC4/TelemUART.c ****     *
 763:.\Generated_Source\PSoC4/TelemUART.c ****     * Theory:
 764:.\Generated_Source\PSoC4/TelemUART.c ****     *  Setting the pointers to zero makes the system believe there is no data to
 765:.\Generated_Source\PSoC4/TelemUART.c ****     *  read and writing will resume at address 0 overwriting any data that may
 766:.\Generated_Source\PSoC4/TelemUART.c ****     *  have remained in the RAM.
 767:.\Generated_Source\PSoC4/TelemUART.c ****     *
 768:.\Generated_Source\PSoC4/TelemUART.c ****     * Side Effects:
 769:.\Generated_Source\PSoC4/TelemUART.c ****     *  Any received data not read from the RAM or FIFO buffer will be lost.
 770:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
 771:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_ClearRxBuffer(void) 
 772:.\Generated_Source\PSoC4/TelemUART.c ****     {
 773:.\Generated_Source\PSoC4/TelemUART.c ****         uint8 enableInterrupts;
 774:.\Generated_Source\PSoC4/TelemUART.c **** 
 775:.\Generated_Source\PSoC4/TelemUART.c ****         /* clear the HW FIFO */
 776:.\Generated_Source\PSoC4/TelemUART.c ****         /* Enter critical section */
 777:.\Generated_Source\PSoC4/TelemUART.c ****         enableInterrupts = CyEnterCriticalSection();
 778:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_RXDATA_AUX_CTL_REG |=  TelemUART_RX_FIFO_CLR;
 779:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_RXDATA_AUX_CTL_REG &= (uint8)~TelemUART_RX_FIFO_CLR;
 780:.\Generated_Source\PSoC4/TelemUART.c ****         /* Exit critical section */
 781:.\Generated_Source\PSoC4/TelemUART.c ****         CyExitCriticalSection(enableInterrupts);
 782:.\Generated_Source\PSoC4/TelemUART.c **** 
 783:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH)
 784:.\Generated_Source\PSoC4/TelemUART.c ****             /* Disable Rx interrupt. */
 785:.\Generated_Source\PSoC4/TelemUART.c ****             /* Protect variables that could change on interrupt. */
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 19


 786:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_RX_INTERRUPT_ENABLED)
 787:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_DisableRxInt();
 788:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_RX_INTERRUPT_ENABLED */
 789:.\Generated_Source\PSoC4/TelemUART.c **** 
 790:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_rxBufferRead = 0u;
 791:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_rxBufferWrite = 0u;
 792:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_rxBufferLoopDetect = 0u;
 793:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_rxBufferOverflow = 0u;
 794:.\Generated_Source\PSoC4/TelemUART.c **** 
 795:.\Generated_Source\PSoC4/TelemUART.c ****             /* Enable Rx interrupt. */
 796:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_RX_INTERRUPT_ENABLED)
 797:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_EnableRxInt();
 798:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_RX_INTERRUPT_ENABLED */
 799:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH */
 800:.\Generated_Source\PSoC4/TelemUART.c **** 
 801:.\Generated_Source\PSoC4/TelemUART.c ****     }
 802:.\Generated_Source\PSoC4/TelemUART.c **** 
 803:.\Generated_Source\PSoC4/TelemUART.c **** 
 804:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
 805:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_SetRxAddressMode
 806:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
 807:.\Generated_Source\PSoC4/TelemUART.c ****     *
 808:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
 809:.\Generated_Source\PSoC4/TelemUART.c ****     *  Set the receive addressing mode
 810:.\Generated_Source\PSoC4/TelemUART.c ****     *
 811:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
 812:.\Generated_Source\PSoC4/TelemUART.c ****     *  addressMode: Enumerated value indicating the mode of RX addressing
 813:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART__B_UART__AM_SW_BYTE_BYTE -  Software Byte-by-Byte address
 814:.\Generated_Source\PSoC4/TelemUART.c ****     *                                               detection
 815:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART__B_UART__AM_SW_DETECT_TO_BUFFER - Software Detect to Buffer
 816:.\Generated_Source\PSoC4/TelemUART.c ****     *                                               address detection
 817:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART__B_UART__AM_HW_BYTE_BY_BYTE - Hardware Byte-by-Byte address
 818:.\Generated_Source\PSoC4/TelemUART.c ****     *                                               detection
 819:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART__B_UART__AM_HW_DETECT_TO_BUFFER - Hardware Detect to Buffer
 820:.\Generated_Source\PSoC4/TelemUART.c ****     *                                               address detection
 821:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART__B_UART__AM_NONE - No address detection
 822:.\Generated_Source\PSoC4/TelemUART.c ****     *
 823:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
 824:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
 825:.\Generated_Source\PSoC4/TelemUART.c ****     *
 826:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
 827:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxAddressMode - the parameter stored in this variable for
 828:.\Generated_Source\PSoC4/TelemUART.c ****     *   the farther usage in RX ISR.
 829:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxAddressDetected - set to initial state (0).
 830:.\Generated_Source\PSoC4/TelemUART.c ****     *
 831:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
 832:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_SetRxAddressMode(uint8 addressMode)
 833:.\Generated_Source\PSoC4/TelemUART.c ****                                                         
 834:.\Generated_Source\PSoC4/TelemUART.c ****     {
 835:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_RXHW_ADDRESS_ENABLED)
 836:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_CONTROL_REG_REMOVED)
 837:.\Generated_Source\PSoC4/TelemUART.c ****                 if(addressMode != 0u) { }     /* release compiler warning */
 838:.\Generated_Source\PSoC4/TelemUART.c ****             #else /* TelemUART_CONTROL_REG_REMOVED */
 839:.\Generated_Source\PSoC4/TelemUART.c ****                 uint8 tmpCtrl;
 840:.\Generated_Source\PSoC4/TelemUART.c ****                 tmpCtrl = TelemUART_CONTROL_REG & (uint8)~TelemUART_CTRL_RXADDR_MODE_MASK;
 841:.\Generated_Source\PSoC4/TelemUART.c ****                 tmpCtrl |= (uint8)(addressMode << TelemUART_CTRL_RXADDR_MODE0_SHIFT);
 842:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_CONTROL_REG = tmpCtrl;
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 20


 843:.\Generated_Source\PSoC4/TelemUART.c ****                 #if(TelemUART_RX_INTERRUPT_ENABLED && \
 844:.\Generated_Source\PSoC4/TelemUART.c ****                    (TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH) )
 845:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_rxAddressMode = addressMode;
 846:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_rxAddressDetected = 0u;
 847:.\Generated_Source\PSoC4/TelemUART.c ****                 #endif /* End TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH*/
 848:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_CONTROL_REG_REMOVED */
 849:.\Generated_Source\PSoC4/TelemUART.c ****         #else /* TelemUART_RXHW_ADDRESS_ENABLED */
 850:.\Generated_Source\PSoC4/TelemUART.c ****             if(addressMode != 0u) { }     /* release compiler warning */
 851:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_RXHW_ADDRESS_ENABLED */
 852:.\Generated_Source\PSoC4/TelemUART.c ****     }
 853:.\Generated_Source\PSoC4/TelemUART.c **** 
 854:.\Generated_Source\PSoC4/TelemUART.c **** 
 855:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
 856:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_SetRxAddress1
 857:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
 858:.\Generated_Source\PSoC4/TelemUART.c ****     *
 859:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
 860:.\Generated_Source\PSoC4/TelemUART.c ****     *  Set the first hardware address compare value
 861:.\Generated_Source\PSoC4/TelemUART.c ****     *
 862:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
 863:.\Generated_Source\PSoC4/TelemUART.c ****     *  address
 864:.\Generated_Source\PSoC4/TelemUART.c ****     *
 865:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
 866:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
 867:.\Generated_Source\PSoC4/TelemUART.c ****     *
 868:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
 869:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_SetRxAddress1(uint8 address) 
 870:.\Generated_Source\PSoC4/TelemUART.c **** 
 871:.\Generated_Source\PSoC4/TelemUART.c ****     {
 872:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_RXADDRESS1_REG = address;
 873:.\Generated_Source\PSoC4/TelemUART.c ****     }
 874:.\Generated_Source\PSoC4/TelemUART.c **** 
 875:.\Generated_Source\PSoC4/TelemUART.c **** 
 876:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
 877:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_SetRxAddress2
 878:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
 879:.\Generated_Source\PSoC4/TelemUART.c ****     *
 880:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
 881:.\Generated_Source\PSoC4/TelemUART.c ****     *  Set the second hardware address compare value
 882:.\Generated_Source\PSoC4/TelemUART.c ****     *
 883:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
 884:.\Generated_Source\PSoC4/TelemUART.c ****     *  address
 885:.\Generated_Source\PSoC4/TelemUART.c ****     *
 886:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
 887:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
 888:.\Generated_Source\PSoC4/TelemUART.c ****     *
 889:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
 890:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_SetRxAddress2(uint8 address) 
 891:.\Generated_Source\PSoC4/TelemUART.c ****     {
 892:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_RXADDRESS2_REG = address;
 893:.\Generated_Source\PSoC4/TelemUART.c ****     }
 894:.\Generated_Source\PSoC4/TelemUART.c **** 
 895:.\Generated_Source\PSoC4/TelemUART.c **** #endif  /* TelemUART_RX_ENABLED || TelemUART_HD_ENABLED*/
 896:.\Generated_Source\PSoC4/TelemUART.c **** 
 897:.\Generated_Source\PSoC4/TelemUART.c **** 
 898:.\Generated_Source\PSoC4/TelemUART.c **** #if( (TelemUART_TX_ENABLED) || (TelemUART_HD_ENABLED) )
 899:.\Generated_Source\PSoC4/TelemUART.c **** 
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 21


 900:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_TX_INTERRUPT_ENABLED)
 901:.\Generated_Source\PSoC4/TelemUART.c **** 
 902:.\Generated_Source\PSoC4/TelemUART.c ****         /*******************************************************************************
 903:.\Generated_Source\PSoC4/TelemUART.c ****         * Function Name: TelemUART_EnableTxInt
 904:.\Generated_Source\PSoC4/TelemUART.c ****         ********************************************************************************
 905:.\Generated_Source\PSoC4/TelemUART.c ****         *
 906:.\Generated_Source\PSoC4/TelemUART.c ****         * Summary:
 907:.\Generated_Source\PSoC4/TelemUART.c ****         *  Enable TX interrupt generation
 908:.\Generated_Source\PSoC4/TelemUART.c ****         *
 909:.\Generated_Source\PSoC4/TelemUART.c ****         * Parameters:
 910:.\Generated_Source\PSoC4/TelemUART.c ****         *  None.
 911:.\Generated_Source\PSoC4/TelemUART.c ****         *
 912:.\Generated_Source\PSoC4/TelemUART.c ****         * Return:
 913:.\Generated_Source\PSoC4/TelemUART.c ****         *  None.
 914:.\Generated_Source\PSoC4/TelemUART.c ****         *
 915:.\Generated_Source\PSoC4/TelemUART.c ****         * Theory:
 916:.\Generated_Source\PSoC4/TelemUART.c ****         *  Enable the interrupt output -or- the interrupt component itself
 917:.\Generated_Source\PSoC4/TelemUART.c ****         *
 918:.\Generated_Source\PSoC4/TelemUART.c ****         *******************************************************************************/
 919:.\Generated_Source\PSoC4/TelemUART.c ****         void TelemUART_EnableTxInt(void) 
 920:.\Generated_Source\PSoC4/TelemUART.c ****         {
 921:.\Generated_Source\PSoC4/TelemUART.c ****             CyIntEnable(TelemUART_TX_VECT_NUM);
 922:.\Generated_Source\PSoC4/TelemUART.c ****         }
 923:.\Generated_Source\PSoC4/TelemUART.c **** 
 924:.\Generated_Source\PSoC4/TelemUART.c **** 
 925:.\Generated_Source\PSoC4/TelemUART.c ****         /*******************************************************************************
 926:.\Generated_Source\PSoC4/TelemUART.c ****         * Function Name: TelemUART_DisableTxInt
 927:.\Generated_Source\PSoC4/TelemUART.c ****         ********************************************************************************
 928:.\Generated_Source\PSoC4/TelemUART.c ****         *
 929:.\Generated_Source\PSoC4/TelemUART.c ****         * Summary:
 930:.\Generated_Source\PSoC4/TelemUART.c ****         *  Disable TX interrupt generation
 931:.\Generated_Source\PSoC4/TelemUART.c ****         *
 932:.\Generated_Source\PSoC4/TelemUART.c ****         * Parameters:
 933:.\Generated_Source\PSoC4/TelemUART.c ****         *  None.
 934:.\Generated_Source\PSoC4/TelemUART.c ****         *
 935:.\Generated_Source\PSoC4/TelemUART.c ****         * Return:
 936:.\Generated_Source\PSoC4/TelemUART.c ****         *  None.
 937:.\Generated_Source\PSoC4/TelemUART.c ****         *
 938:.\Generated_Source\PSoC4/TelemUART.c ****         * Theory:
 939:.\Generated_Source\PSoC4/TelemUART.c ****         *  Disable the interrupt output -or- the interrupt component itself
 940:.\Generated_Source\PSoC4/TelemUART.c ****         *
 941:.\Generated_Source\PSoC4/TelemUART.c ****         *******************************************************************************/
 942:.\Generated_Source\PSoC4/TelemUART.c ****         void TelemUART_DisableTxInt(void) 
 943:.\Generated_Source\PSoC4/TelemUART.c ****         {
 944:.\Generated_Source\PSoC4/TelemUART.c ****             CyIntDisable(TelemUART_TX_VECT_NUM);
 945:.\Generated_Source\PSoC4/TelemUART.c ****         }
 946:.\Generated_Source\PSoC4/TelemUART.c **** 
 947:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* TelemUART_TX_INTERRUPT_ENABLED */
 948:.\Generated_Source\PSoC4/TelemUART.c **** 
 949:.\Generated_Source\PSoC4/TelemUART.c **** 
 950:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
 951:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_SetTxInterruptMode
 952:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
 953:.\Generated_Source\PSoC4/TelemUART.c ****     *
 954:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
 955:.\Generated_Source\PSoC4/TelemUART.c ****     *  Configure which status bits trigger an interrupt event
 956:.\Generated_Source\PSoC4/TelemUART.c ****     *
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 22


 957:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
 958:.\Generated_Source\PSoC4/TelemUART.c ****     *  intSrc: An or'd combination of the desired status bit masks (defined in
 959:.\Generated_Source\PSoC4/TelemUART.c ****     *          the header file)
 960:.\Generated_Source\PSoC4/TelemUART.c ****     *
 961:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
 962:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
 963:.\Generated_Source\PSoC4/TelemUART.c ****     *
 964:.\Generated_Source\PSoC4/TelemUART.c ****     * Theory:
 965:.\Generated_Source\PSoC4/TelemUART.c ****     *  Enables the output of specific status bits to the interrupt controller
 966:.\Generated_Source\PSoC4/TelemUART.c ****     *
 967:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
 968:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_SetTxInterruptMode(uint8 intSrc) 
 969:.\Generated_Source\PSoC4/TelemUART.c ****     {
 231              		.loc 1 969 0
 232              		.cfi_startproc
 233              	.LVL13:
 970:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_TXSTATUS_MASK_REG = intSrc;
 234              		.loc 1 970 0
 235 0000 014B     		ldr	r3, .L18
 971:.\Generated_Source\PSoC4/TelemUART.c ****     }
 236              		.loc 1 971 0
 237              		@ sp needed for prologue
 970:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_TXSTATUS_MASK_REG = intSrc;
 238              		.loc 1 970 0
 239 0002 1870     		strb	r0, [r3]
 240              		.loc 1 971 0
 241 0004 7047     		bx	lr
 242              	.L19:
 243 0006 C046     		.align	2
 244              	.L18:
 245 0008 83000F40 		.word	1074724995
 246              		.cfi_endproc
 247              	.LFE6:
 248              		.size	TelemUART_SetTxInterruptMode, .-TelemUART_SetTxInterruptMode
 249              		.section	.text.TelemUART_WriteTxData,"ax",%progbits
 250              		.align	1
 251              		.global	TelemUART_WriteTxData
 252              		.code	16
 253              		.thumb_func
 254              		.type	TelemUART_WriteTxData, %function
 255              	TelemUART_WriteTxData:
 256              	.LFB7:
 972:.\Generated_Source\PSoC4/TelemUART.c **** 
 973:.\Generated_Source\PSoC4/TelemUART.c **** 
 974:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
 975:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_WriteTxData
 976:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
 977:.\Generated_Source\PSoC4/TelemUART.c ****     *
 978:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
 979:.\Generated_Source\PSoC4/TelemUART.c ****     *  Write a byte of data to the Transmit FIFO or TX buffer to be sent when the
 980:.\Generated_Source\PSoC4/TelemUART.c ****     *  bus is available. WriteTxData sends a byte without checking for buffer room
 981:.\Generated_Source\PSoC4/TelemUART.c ****     *  or status. It is up to the user to separately check status.
 982:.\Generated_Source\PSoC4/TelemUART.c ****     *
 983:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
 984:.\Generated_Source\PSoC4/TelemUART.c ****     *  TXDataByte: byte of data to place in the transmit FIFO
 985:.\Generated_Source\PSoC4/TelemUART.c ****     *
 986:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 23


 987:.\Generated_Source\PSoC4/TelemUART.c ****     * void
 988:.\Generated_Source\PSoC4/TelemUART.c ****     *
 989:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
 990:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_txBuffer - RAM buffer pointer for save data for transmission
 991:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_txBufferWrite - cyclic index for write to txBuffer,
 992:.\Generated_Source\PSoC4/TelemUART.c ****     *    incremented after each byte saved to buffer.
 993:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_txBufferRead - cyclic index for read from txBuffer,
 994:.\Generated_Source\PSoC4/TelemUART.c ****     *    checked to identify the condition to write to FIFO directly or to TX buffer
 995:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_initVar - checked to identify that the component has been
 996:.\Generated_Source\PSoC4/TelemUART.c ****     *    initialized.
 997:.\Generated_Source\PSoC4/TelemUART.c ****     *
 998:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
 999:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
1000:.\Generated_Source\PSoC4/TelemUART.c ****     *
1001:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
1002:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_WriteTxData(uint8 txDataByte) 
1003:.\Generated_Source\PSoC4/TelemUART.c ****     {
 257              		.loc 1 1003 0
 258              		.cfi_startproc
 259              	.LVL14:
 260 0000 00B5     		push	{lr}
 261              	.LCFI3:
 262              		.cfi_def_cfa_offset 4
 263              		.cfi_offset 14, -4
1004:.\Generated_Source\PSoC4/TelemUART.c ****         /* If not Initialized then skip this function*/
1005:.\Generated_Source\PSoC4/TelemUART.c ****         if(TelemUART_initVar != 0u)
 264              		.loc 1 1005 0
 265 0002 034B     		ldr	r3, .L25
 266 0004 1978     		ldrb	r1, [r3]
 267 0006 0029     		cmp	r1, #0
 268 0008 01D0     		beq	.L20
1006:.\Generated_Source\PSoC4/TelemUART.c ****         {
1007:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH)
1008:.\Generated_Source\PSoC4/TelemUART.c **** 
1009:.\Generated_Source\PSoC4/TelemUART.c ****                 /* Disable Tx interrupt. */
1010:.\Generated_Source\PSoC4/TelemUART.c ****                 /* Protect variables that could change on interrupt. */
1011:.\Generated_Source\PSoC4/TelemUART.c ****                 #if(TelemUART_TX_INTERRUPT_ENABLED)
1012:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_DisableTxInt();
1013:.\Generated_Source\PSoC4/TelemUART.c ****                 #endif /* End TelemUART_TX_INTERRUPT_ENABLED */
1014:.\Generated_Source\PSoC4/TelemUART.c **** 
1015:.\Generated_Source\PSoC4/TelemUART.c ****                 if( (TelemUART_txBufferRead == TelemUART_txBufferWrite) &&
1016:.\Generated_Source\PSoC4/TelemUART.c ****                     ((TelemUART_TXSTATUS_REG & TelemUART_TX_STS_FIFO_FULL) == 0u) )
1017:.\Generated_Source\PSoC4/TelemUART.c ****                 {
1018:.\Generated_Source\PSoC4/TelemUART.c ****                     /* Add directly to the FIFO. */
1019:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_TXDATA_REG = txDataByte;
1020:.\Generated_Source\PSoC4/TelemUART.c ****                 }
1021:.\Generated_Source\PSoC4/TelemUART.c ****                 else
1022:.\Generated_Source\PSoC4/TelemUART.c ****                 {
1023:.\Generated_Source\PSoC4/TelemUART.c ****                     if(TelemUART_txBufferWrite >= TelemUART_TXBUFFERSIZE)
1024:.\Generated_Source\PSoC4/TelemUART.c ****                     {
1025:.\Generated_Source\PSoC4/TelemUART.c ****                         TelemUART_txBufferWrite = 0u;
1026:.\Generated_Source\PSoC4/TelemUART.c ****                     }
1027:.\Generated_Source\PSoC4/TelemUART.c **** 
1028:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_txBuffer[TelemUART_txBufferWrite] = txDataByte;
1029:.\Generated_Source\PSoC4/TelemUART.c **** 
1030:.\Generated_Source\PSoC4/TelemUART.c ****                     /* Add to the software buffer. */
1031:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_txBufferWrite++;
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 24


1032:.\Generated_Source\PSoC4/TelemUART.c **** 
1033:.\Generated_Source\PSoC4/TelemUART.c ****                 }
1034:.\Generated_Source\PSoC4/TelemUART.c **** 
1035:.\Generated_Source\PSoC4/TelemUART.c ****                 /* Enable Tx interrupt. */
1036:.\Generated_Source\PSoC4/TelemUART.c ****                 #if(TelemUART_TX_INTERRUPT_ENABLED)
1037:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_EnableTxInt();
1038:.\Generated_Source\PSoC4/TelemUART.c ****                 #endif /* End TelemUART_TX_INTERRUPT_ENABLED */
1039:.\Generated_Source\PSoC4/TelemUART.c **** 
1040:.\Generated_Source\PSoC4/TelemUART.c ****             #else /* TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH */
1041:.\Generated_Source\PSoC4/TelemUART.c **** 
1042:.\Generated_Source\PSoC4/TelemUART.c ****                 /* Add directly to the FIFO. */
1043:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_TXDATA_REG = txDataByte;
 269              		.loc 1 1043 0
 270 000a 024A     		ldr	r2, .L25+4
 271 000c 1070     		strb	r0, [r2]
 272              	.L20:
1044:.\Generated_Source\PSoC4/TelemUART.c **** 
1045:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH */
1046:.\Generated_Source\PSoC4/TelemUART.c ****         }
1047:.\Generated_Source\PSoC4/TelemUART.c ****     }
 273              		.loc 1 1047 0
 274              		@ sp needed for prologue
 275 000e 00BD     		pop	{pc}
 276              	.L26:
 277              		.align	2
 278              	.L25:
 279 0010 00000000 		.word	.LANCHOR0
 280 0014 43000F40 		.word	1074724931
 281              		.cfi_endproc
 282              	.LFE7:
 283              		.size	TelemUART_WriteTxData, .-TelemUART_WriteTxData
 284              		.section	.text.TelemUART_ReadTxStatus,"ax",%progbits
 285              		.align	1
 286              		.global	TelemUART_ReadTxStatus
 287              		.code	16
 288              		.thumb_func
 289              		.type	TelemUART_ReadTxStatus, %function
 290              	TelemUART_ReadTxStatus:
 291              	.LFB8:
1048:.\Generated_Source\PSoC4/TelemUART.c **** 
1049:.\Generated_Source\PSoC4/TelemUART.c **** 
1050:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
1051:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_ReadTxStatus
1052:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
1053:.\Generated_Source\PSoC4/TelemUART.c ****     *
1054:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
1055:.\Generated_Source\PSoC4/TelemUART.c ****     *  Read the status register for the component
1056:.\Generated_Source\PSoC4/TelemUART.c ****     *
1057:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
1058:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
1059:.\Generated_Source\PSoC4/TelemUART.c ****     *
1060:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
1061:.\Generated_Source\PSoC4/TelemUART.c ****     *  Contents of the status register
1062:.\Generated_Source\PSoC4/TelemUART.c ****     *
1063:.\Generated_Source\PSoC4/TelemUART.c ****     * Theory:
1064:.\Generated_Source\PSoC4/TelemUART.c ****     *  This function reads the status register which is clear on read. It is up to
1065:.\Generated_Source\PSoC4/TelemUART.c ****     *  the user to handle all bits in this return value accordingly, even if the bit
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 25


1066:.\Generated_Source\PSoC4/TelemUART.c ****     *  was not enabled as an interrupt source the event happened and must be handled
1067:.\Generated_Source\PSoC4/TelemUART.c ****     *  accordingly.
1068:.\Generated_Source\PSoC4/TelemUART.c ****     *
1069:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
1070:.\Generated_Source\PSoC4/TelemUART.c ****     uint8 TelemUART_ReadTxStatus(void) 
1071:.\Generated_Source\PSoC4/TelemUART.c ****     {
 292              		.loc 1 1071 0
 293              		.cfi_startproc
1072:.\Generated_Source\PSoC4/TelemUART.c ****         return(TelemUART_TXSTATUS_REG);
 294              		.loc 1 1072 0
 295 0000 014B     		ldr	r3, .L28
1073:.\Generated_Source\PSoC4/TelemUART.c ****     }
 296              		.loc 1 1073 0
 297              		@ sp needed for prologue
1072:.\Generated_Source\PSoC4/TelemUART.c ****         return(TelemUART_TXSTATUS_REG);
 298              		.loc 1 1072 0
 299 0002 1878     		ldrb	r0, [r3]
 300              		.loc 1 1073 0
 301 0004 7047     		bx	lr
 302              	.L29:
 303 0006 C046     		.align	2
 304              	.L28:
 305 0008 63000F40 		.word	1074724963
 306              		.cfi_endproc
 307              	.LFE8:
 308              		.size	TelemUART_ReadTxStatus, .-TelemUART_ReadTxStatus
 309              		.section	.text.TelemUART_PutChar,"ax",%progbits
 310              		.align	1
 311              		.global	TelemUART_PutChar
 312              		.code	16
 313              		.thumb_func
 314              		.type	TelemUART_PutChar, %function
 315              	TelemUART_PutChar:
 316              	.LFB9:
1074:.\Generated_Source\PSoC4/TelemUART.c **** 
1075:.\Generated_Source\PSoC4/TelemUART.c **** 
1076:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
1077:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_PutChar
1078:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
1079:.\Generated_Source\PSoC4/TelemUART.c ****     *
1080:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
1081:.\Generated_Source\PSoC4/TelemUART.c ****     *  Wait to send byte until TX register or buffer has room.
1082:.\Generated_Source\PSoC4/TelemUART.c ****     *
1083:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
1084:.\Generated_Source\PSoC4/TelemUART.c ****     *  txDataByte: The 8-bit data value to send across the UART.
1085:.\Generated_Source\PSoC4/TelemUART.c ****     *
1086:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
1087:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
1088:.\Generated_Source\PSoC4/TelemUART.c ****     *
1089:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
1090:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_txBuffer - RAM buffer pointer for save data for transmission
1091:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_txBufferWrite - cyclic index for write to txBuffer,
1092:.\Generated_Source\PSoC4/TelemUART.c ****     *     checked to identify free space in txBuffer and incremented after each byte
1093:.\Generated_Source\PSoC4/TelemUART.c ****     *     saved to buffer.
1094:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_txBufferRead - cyclic index for read from txBuffer,
1095:.\Generated_Source\PSoC4/TelemUART.c ****     *     checked to identify free space in txBuffer.
1096:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_initVar - checked to identify that the component has been
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 26


1097:.\Generated_Source\PSoC4/TelemUART.c ****     *     initialized.
1098:.\Generated_Source\PSoC4/TelemUART.c ****     *
1099:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
1100:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
1101:.\Generated_Source\PSoC4/TelemUART.c ****     *
1102:.\Generated_Source\PSoC4/TelemUART.c ****     * Theory:
1103:.\Generated_Source\PSoC4/TelemUART.c ****     *  Allows the user to transmit any byte of data in a single transfer
1104:.\Generated_Source\PSoC4/TelemUART.c ****     *
1105:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
1106:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_PutChar(uint8 txDataByte) 
1107:.\Generated_Source\PSoC4/TelemUART.c ****     {
 317              		.loc 1 1107 0
 318              		.cfi_startproc
 319              	.LVL15:
 320 0000 00B5     		push	{lr}
 321              	.LCFI4:
 322              		.cfi_def_cfa_offset 4
 323              		.cfi_offset 14, -4
 324              	.L31:
1108:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH)
1109:.\Generated_Source\PSoC4/TelemUART.c ****                 /* The temporary output pointer is used since it takes two instructions
1110:.\Generated_Source\PSoC4/TelemUART.c ****                 *  to increment with a wrap, and we can't risk doing that with the real
1111:.\Generated_Source\PSoC4/TelemUART.c ****                 *  pointer and getting an interrupt in between instructions.
1112:.\Generated_Source\PSoC4/TelemUART.c ****                 */
1113:.\Generated_Source\PSoC4/TelemUART.c ****                 uint8 loc_txBufferWrite;
1114:.\Generated_Source\PSoC4/TelemUART.c ****                 uint8 loc_txBufferRead;
1115:.\Generated_Source\PSoC4/TelemUART.c **** 
1116:.\Generated_Source\PSoC4/TelemUART.c ****                 do{
1117:.\Generated_Source\PSoC4/TelemUART.c ****                     /* Block if software buffer is full, so we don't overwrite. */
1118:.\Generated_Source\PSoC4/TelemUART.c ****                     #if ((TelemUART_TXBUFFERSIZE > TelemUART_MAX_BYTE_VALUE) && (CY_PSOC3))
1119:.\Generated_Source\PSoC4/TelemUART.c ****                         /* Disable TX interrupt to protect variables that could change on interrupt
1120:.\Generated_Source\PSoC4/TelemUART.c ****                         CyIntDisable(TelemUART_TX_VECT_NUM);
1121:.\Generated_Source\PSoC4/TelemUART.c ****                     #endif /* End TXBUFFERSIZE > 255 */
1122:.\Generated_Source\PSoC4/TelemUART.c ****                     loc_txBufferWrite = TelemUART_txBufferWrite;
1123:.\Generated_Source\PSoC4/TelemUART.c ****                     loc_txBufferRead = TelemUART_txBufferRead;
1124:.\Generated_Source\PSoC4/TelemUART.c ****                     #if ((TelemUART_TXBUFFERSIZE > TelemUART_MAX_BYTE_VALUE) && (CY_PSOC3))
1125:.\Generated_Source\PSoC4/TelemUART.c ****                         /* Enable interrupt to continue transmission */
1126:.\Generated_Source\PSoC4/TelemUART.c ****                         CyIntEnable(TelemUART_TX_VECT_NUM);
1127:.\Generated_Source\PSoC4/TelemUART.c ****                     #endif /* End TXBUFFERSIZE > 255 */
1128:.\Generated_Source\PSoC4/TelemUART.c ****                 }while( (loc_txBufferWrite < loc_txBufferRead) ? (loc_txBufferWrite == (loc_txBuffe
1129:.\Generated_Source\PSoC4/TelemUART.c ****                                         ((loc_txBufferWrite - loc_txBufferRead) ==
1130:.\Generated_Source\PSoC4/TelemUART.c ****                                         (uint8)(TelemUART_TXBUFFERSIZE - 1u)) );
1131:.\Generated_Source\PSoC4/TelemUART.c **** 
1132:.\Generated_Source\PSoC4/TelemUART.c ****                 if( (loc_txBufferRead == loc_txBufferWrite) &&
1133:.\Generated_Source\PSoC4/TelemUART.c ****                     ((TelemUART_TXSTATUS_REG & TelemUART_TX_STS_FIFO_FULL) == 0u) )
1134:.\Generated_Source\PSoC4/TelemUART.c ****                 {
1135:.\Generated_Source\PSoC4/TelemUART.c ****                     /* Add directly to the FIFO. */
1136:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_TXDATA_REG = txDataByte;
1137:.\Generated_Source\PSoC4/TelemUART.c ****                 }
1138:.\Generated_Source\PSoC4/TelemUART.c ****                 else
1139:.\Generated_Source\PSoC4/TelemUART.c ****                 {
1140:.\Generated_Source\PSoC4/TelemUART.c ****                     if(loc_txBufferWrite >= TelemUART_TXBUFFERSIZE)
1141:.\Generated_Source\PSoC4/TelemUART.c ****                     {
1142:.\Generated_Source\PSoC4/TelemUART.c ****                         loc_txBufferWrite = 0u;
1143:.\Generated_Source\PSoC4/TelemUART.c ****                     }
1144:.\Generated_Source\PSoC4/TelemUART.c ****                     /* Add to the software buffer. */
1145:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_txBuffer[loc_txBufferWrite] = txDataByte;
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 27


1146:.\Generated_Source\PSoC4/TelemUART.c ****                     loc_txBufferWrite++;
1147:.\Generated_Source\PSoC4/TelemUART.c **** 
1148:.\Generated_Source\PSoC4/TelemUART.c ****                     /* Finally, update the real output pointer */
1149:.\Generated_Source\PSoC4/TelemUART.c ****                     #if ((TelemUART_TXBUFFERSIZE > TelemUART_MAX_BYTE_VALUE) && (CY_PSOC3))
1150:.\Generated_Source\PSoC4/TelemUART.c ****                         CyIntDisable(TelemUART_TX_VECT_NUM);
1151:.\Generated_Source\PSoC4/TelemUART.c ****                     #endif /* End TXBUFFERSIZE > 255 */
1152:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_txBufferWrite = loc_txBufferWrite;
1153:.\Generated_Source\PSoC4/TelemUART.c ****                     #if ((TelemUART_TXBUFFERSIZE > TelemUART_MAX_BYTE_VALUE) && (CY_PSOC3))
1154:.\Generated_Source\PSoC4/TelemUART.c ****                         CyIntEnable(TelemUART_TX_VECT_NUM);
1155:.\Generated_Source\PSoC4/TelemUART.c ****                     #endif /* End TXBUFFERSIZE > 255 */
1156:.\Generated_Source\PSoC4/TelemUART.c ****                 }
1157:.\Generated_Source\PSoC4/TelemUART.c **** 
1158:.\Generated_Source\PSoC4/TelemUART.c ****             #else /* TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH */
1159:.\Generated_Source\PSoC4/TelemUART.c **** 
1160:.\Generated_Source\PSoC4/TelemUART.c ****                 while((TelemUART_TXSTATUS_REG & TelemUART_TX_STS_FIFO_FULL) != 0u)
 325              		.loc 1 1160 0 discriminator 1
 326 0002 034B     		ldr	r3, .L33
 327 0004 1978     		ldrb	r1, [r3]
 328 0006 4A07     		lsl	r2, r1, #29
 329 0008 FBD4     		bmi	.L31
1161:.\Generated_Source\PSoC4/TelemUART.c ****                 {
1162:.\Generated_Source\PSoC4/TelemUART.c ****                     ; /* Wait for room in the FIFO. */
1163:.\Generated_Source\PSoC4/TelemUART.c ****                 }
1164:.\Generated_Source\PSoC4/TelemUART.c **** 
1165:.\Generated_Source\PSoC4/TelemUART.c ****                 /* Add directly to the FIFO. */
1166:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_TXDATA_REG = txDataByte;
 330              		.loc 1 1166 0
 331 000a 024A     		ldr	r2, .L33+4
1167:.\Generated_Source\PSoC4/TelemUART.c **** 
1168:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH */
1169:.\Generated_Source\PSoC4/TelemUART.c ****     }
 332              		.loc 1 1169 0
 333              		@ sp needed for prologue
1166:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_TXDATA_REG = txDataByte;
 334              		.loc 1 1166 0
 335 000c 1070     		strb	r0, [r2]
 336              		.loc 1 1169 0
 337 000e 00BD     		pop	{pc}
 338              	.L34:
 339              		.align	2
 340              	.L33:
 341 0010 63000F40 		.word	1074724963
 342 0014 43000F40 		.word	1074724931
 343              		.cfi_endproc
 344              	.LFE9:
 345              		.size	TelemUART_PutChar, .-TelemUART_PutChar
 346              		.section	.text.TelemUART_PutString,"ax",%progbits
 347              		.align	1
 348              		.global	TelemUART_PutString
 349              		.code	16
 350              		.thumb_func
 351              		.type	TelemUART_PutString, %function
 352              	TelemUART_PutString:
 353              	.LFB10:
1170:.\Generated_Source\PSoC4/TelemUART.c **** 
1171:.\Generated_Source\PSoC4/TelemUART.c **** 
1172:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 28


1173:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_PutString
1174:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
1175:.\Generated_Source\PSoC4/TelemUART.c ****     *
1176:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
1177:.\Generated_Source\PSoC4/TelemUART.c ****     *  Write a Sequence of bytes on the Transmit line. Data comes from RAM or ROM.
1178:.\Generated_Source\PSoC4/TelemUART.c ****     *
1179:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
1180:.\Generated_Source\PSoC4/TelemUART.c ****     *  string: char pointer to character string of Data to Send.
1181:.\Generated_Source\PSoC4/TelemUART.c ****     *
1182:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
1183:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
1184:.\Generated_Source\PSoC4/TelemUART.c ****     *
1185:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
1186:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_initVar - checked to identify that the component has been
1187:.\Generated_Source\PSoC4/TelemUART.c ****     *     initialized.
1188:.\Generated_Source\PSoC4/TelemUART.c ****     *
1189:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
1190:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
1191:.\Generated_Source\PSoC4/TelemUART.c ****     *
1192:.\Generated_Source\PSoC4/TelemUART.c ****     * Theory:
1193:.\Generated_Source\PSoC4/TelemUART.c ****     *  This function will block if there is not enough memory to place the whole
1194:.\Generated_Source\PSoC4/TelemUART.c ****     *  string, it will block until the entire string has been written to the
1195:.\Generated_Source\PSoC4/TelemUART.c ****     *  transmit buffer.
1196:.\Generated_Source\PSoC4/TelemUART.c ****     *
1197:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
1198:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_PutString(const char8 string[]) 
1199:.\Generated_Source\PSoC4/TelemUART.c ****     {
 354              		.loc 1 1199 0
 355              		.cfi_startproc
 356              	.LVL16:
 357 0000 38B5     		push	{r3, r4, r5, lr}
 358              	.LCFI5:
 359              		.cfi_def_cfa_offset 16
 360              		.cfi_offset 3, -16
 361              		.cfi_offset 4, -12
 362              		.cfi_offset 5, -8
 363              		.cfi_offset 14, -4
1200:.\Generated_Source\PSoC4/TelemUART.c ****         uint16 buf_index = 0u;
1201:.\Generated_Source\PSoC4/TelemUART.c ****         /* If not Initialized then skip this function*/
1202:.\Generated_Source\PSoC4/TelemUART.c ****         if(TelemUART_initVar != 0u)
 364              		.loc 1 1202 0
 365 0002 074B     		ldr	r3, .L41
1199:.\Generated_Source\PSoC4/TelemUART.c ****     {
 366              		.loc 1 1199 0
 367 0004 051C     		mov	r5, r0
 368              		.loc 1 1202 0
 369 0006 1878     		ldrb	r0, [r3]
 370              	.LVL17:
 371 0008 0024     		mov	r4, #0
 372 000a A042     		cmp	r0, r4
 373 000c 07D0     		beq	.L35
 374              	.LVL18:
 375              	.L40:
1203:.\Generated_Source\PSoC4/TelemUART.c ****         {
1204:.\Generated_Source\PSoC4/TelemUART.c ****             /* This is a blocking function, it will not exit until all data is sent*/
1205:.\Generated_Source\PSoC4/TelemUART.c ****             while(string[buf_index] != (char8)0)
 376              		.loc 1 1205 0 discriminator 1
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 29


 377 000e 285D     		ldrb	r0, [r5, r4]
 378 0010 0028     		cmp	r0, #0
 379 0012 04D0     		beq	.L35
 380              	.L37:
1206:.\Generated_Source\PSoC4/TelemUART.c ****             {
1207:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_PutChar((uint8)string[buf_index]);
1208:.\Generated_Source\PSoC4/TelemUART.c ****                 buf_index++;
 381              		.loc 1 1208 0
 382 0014 0134     		add	r4, r4, #1
 383              	.LVL19:
1207:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_PutChar((uint8)string[buf_index]);
 384              		.loc 1 1207 0
 385 0016 FFF7FEFF 		bl	TelemUART_PutChar
 386              	.LVL20:
 387              		.loc 1 1208 0
 388 001a A4B2     		uxth	r4, r4
 389              	.LVL21:
 390 001c F7E7     		b	.L40
 391              	.LVL22:
 392              	.L35:
1209:.\Generated_Source\PSoC4/TelemUART.c ****             }
1210:.\Generated_Source\PSoC4/TelemUART.c ****         }
1211:.\Generated_Source\PSoC4/TelemUART.c ****     }
 393              		.loc 1 1211 0
 394              		@ sp needed for prologue
 395              	.LVL23:
 396 001e 38BD     		pop	{r3, r4, r5, pc}
 397              	.L42:
 398              		.align	2
 399              	.L41:
 400 0020 00000000 		.word	.LANCHOR0
 401              		.cfi_endproc
 402              	.LFE10:
 403              		.size	TelemUART_PutString, .-TelemUART_PutString
 404              		.section	.text.TelemUART_PutArray,"ax",%progbits
 405              		.align	1
 406              		.global	TelemUART_PutArray
 407              		.code	16
 408              		.thumb_func
 409              		.type	TelemUART_PutArray, %function
 410              	TelemUART_PutArray:
 411              	.LFB11:
1212:.\Generated_Source\PSoC4/TelemUART.c **** 
1213:.\Generated_Source\PSoC4/TelemUART.c **** 
1214:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
1215:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_PutArray
1216:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
1217:.\Generated_Source\PSoC4/TelemUART.c ****     *
1218:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
1219:.\Generated_Source\PSoC4/TelemUART.c ****     *  Write a Sequence of bytes on the Transmit line. Data comes from RAM or ROM.
1220:.\Generated_Source\PSoC4/TelemUART.c ****     *
1221:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
1222:.\Generated_Source\PSoC4/TelemUART.c ****     *  string: Address of the memory array residing in RAM or ROM.
1223:.\Generated_Source\PSoC4/TelemUART.c ****     *  byteCount: Number of Bytes to be transmitted.
1224:.\Generated_Source\PSoC4/TelemUART.c ****     *
1225:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
1226:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 30


1227:.\Generated_Source\PSoC4/TelemUART.c ****     *
1228:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
1229:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_initVar - checked to identify that the component has been
1230:.\Generated_Source\PSoC4/TelemUART.c ****     *     initialized.
1231:.\Generated_Source\PSoC4/TelemUART.c ****     *
1232:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
1233:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
1234:.\Generated_Source\PSoC4/TelemUART.c ****     *
1235:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
1236:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_PutArray(const uint8 string[], uint8 byteCount)
1237:.\Generated_Source\PSoC4/TelemUART.c ****                                                                     
1238:.\Generated_Source\PSoC4/TelemUART.c ****     {
 412              		.loc 1 1238 0
 413              		.cfi_startproc
 414              	.LVL24:
 415 0000 70B5     		push	{r4, r5, r6, lr}
 416              	.LCFI6:
 417              		.cfi_def_cfa_offset 16
 418              		.cfi_offset 4, -16
 419              		.cfi_offset 5, -12
 420              		.cfi_offset 6, -8
 421              		.cfi_offset 14, -4
1239:.\Generated_Source\PSoC4/TelemUART.c ****         uint8 buf_index = 0u;
1240:.\Generated_Source\PSoC4/TelemUART.c ****         /* If not Initialized then skip this function*/
1241:.\Generated_Source\PSoC4/TelemUART.c ****         if(TelemUART_initVar != 0u)
 422              		.loc 1 1241 0
 423 0002 084B     		ldr	r3, .L49
1238:.\Generated_Source\PSoC4/TelemUART.c ****     {
 424              		.loc 1 1238 0
 425 0004 051C     		mov	r5, r0
 426              		.loc 1 1241 0
 427 0006 1878     		ldrb	r0, [r3]
 428              	.LVL25:
1238:.\Generated_Source\PSoC4/TelemUART.c ****     {
 429              		.loc 1 1238 0
 430 0008 0E1C     		mov	r6, r1
 431              		.loc 1 1241 0
 432 000a 2C1C     		mov	r4, r5
 433 000c 0028     		cmp	r0, #0
 434 000e 07D0     		beq	.L43
 435              	.LVL26:
 436              	.L47:
1242:.\Generated_Source\PSoC4/TelemUART.c ****         {
1243:.\Generated_Source\PSoC4/TelemUART.c ****             do
1244:.\Generated_Source\PSoC4/TelemUART.c ****             {
1245:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_PutChar(string[buf_index]);
 437              		.loc 1 1245 0 discriminator 1
 438 0010 2078     		ldrb	r0, [r4]
 439 0012 0134     		add	r4, r4, #1
 440 0014 FFF7FEFF 		bl	TelemUART_PutChar
 441              	.LVL27:
1246:.\Generated_Source\PSoC4/TelemUART.c ****                 buf_index++;
1247:.\Generated_Source\PSoC4/TelemUART.c ****             }while(buf_index < byteCount);
 442              		.loc 1 1247 0 discriminator 1
 443 0018 611B     		sub	r1, r4, r5
 444 001a CAB2     		uxtb	r2, r1
 445 001c B242     		cmp	r2, r6
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 31


 446 001e F7D3     		bcc	.L47
 447              	.L43:
1248:.\Generated_Source\PSoC4/TelemUART.c ****         }
1249:.\Generated_Source\PSoC4/TelemUART.c ****     }
 448              		.loc 1 1249 0
 449              		@ sp needed for prologue
 450              	.LVL28:
 451 0020 70BD     		pop	{r4, r5, r6, pc}
 452              	.L50:
 453 0022 C046     		.align	2
 454              	.L49:
 455 0024 00000000 		.word	.LANCHOR0
 456              		.cfi_endproc
 457              	.LFE11:
 458              		.size	TelemUART_PutArray, .-TelemUART_PutArray
 459              		.section	.text.TelemUART_PutCRLF,"ax",%progbits
 460              		.align	1
 461              		.global	TelemUART_PutCRLF
 462              		.code	16
 463              		.thumb_func
 464              		.type	TelemUART_PutCRLF, %function
 465              	TelemUART_PutCRLF:
 466              	.LFB12:
1250:.\Generated_Source\PSoC4/TelemUART.c **** 
1251:.\Generated_Source\PSoC4/TelemUART.c **** 
1252:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
1253:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_PutCRLF
1254:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
1255:.\Generated_Source\PSoC4/TelemUART.c ****     *
1256:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
1257:.\Generated_Source\PSoC4/TelemUART.c ****     *  Write a character and then carriage return and line feed.
1258:.\Generated_Source\PSoC4/TelemUART.c ****     *
1259:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
1260:.\Generated_Source\PSoC4/TelemUART.c ****     *  txDataByte: uint8 Character to send.
1261:.\Generated_Source\PSoC4/TelemUART.c ****     *
1262:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
1263:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
1264:.\Generated_Source\PSoC4/TelemUART.c ****     *
1265:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
1266:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_initVar - checked to identify that the component has been
1267:.\Generated_Source\PSoC4/TelemUART.c ****     *     initialized.
1268:.\Generated_Source\PSoC4/TelemUART.c ****     *
1269:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
1270:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
1271:.\Generated_Source\PSoC4/TelemUART.c ****     *
1272:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
1273:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_PutCRLF(uint8 txDataByte) 
1274:.\Generated_Source\PSoC4/TelemUART.c ****     {
 467              		.loc 1 1274 0
 468              		.cfi_startproc
 469              	.LVL29:
 470 0000 08B5     		push	{r3, lr}
 471              	.LCFI7:
 472              		.cfi_def_cfa_offset 8
 473              		.cfi_offset 3, -8
 474              		.cfi_offset 14, -4
1275:.\Generated_Source\PSoC4/TelemUART.c ****         /* If not Initialized then skip this function*/
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 32


1276:.\Generated_Source\PSoC4/TelemUART.c ****         if(TelemUART_initVar != 0u)
 475              		.loc 1 1276 0
 476 0002 064B     		ldr	r3, .L56
 477 0004 1978     		ldrb	r1, [r3]
 478 0006 0029     		cmp	r1, #0
 479 0008 07D0     		beq	.L51
1277:.\Generated_Source\PSoC4/TelemUART.c ****         {
1278:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_PutChar(txDataByte);
 480              		.loc 1 1278 0
 481 000a FFF7FEFF 		bl	TelemUART_PutChar
 482              	.LVL30:
1279:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_PutChar(0x0Du);
 483              		.loc 1 1279 0
 484 000e 0D20     		mov	r0, #13
 485 0010 FFF7FEFF 		bl	TelemUART_PutChar
 486              	.LVL31:
1280:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_PutChar(0x0Au);
 487              		.loc 1 1280 0
 488 0014 0A20     		mov	r0, #10
 489 0016 FFF7FEFF 		bl	TelemUART_PutChar
 490              	.LVL32:
 491              	.L51:
1281:.\Generated_Source\PSoC4/TelemUART.c ****         }
1282:.\Generated_Source\PSoC4/TelemUART.c ****     }
 492              		.loc 1 1282 0
 493              		@ sp needed for prologue
 494 001a 08BD     		pop	{r3, pc}
 495              	.L57:
 496              		.align	2
 497              	.L56:
 498 001c 00000000 		.word	.LANCHOR0
 499              		.cfi_endproc
 500              	.LFE12:
 501              		.size	TelemUART_PutCRLF, .-TelemUART_PutCRLF
 502              		.section	.text.TelemUART_GetTxBufferSize,"ax",%progbits
 503              		.align	1
 504              		.global	TelemUART_GetTxBufferSize
 505              		.code	16
 506              		.thumb_func
 507              		.type	TelemUART_GetTxBufferSize, %function
 508              	TelemUART_GetTxBufferSize:
 509              	.LFB13:
1283:.\Generated_Source\PSoC4/TelemUART.c **** 
1284:.\Generated_Source\PSoC4/TelemUART.c **** 
1285:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
1286:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_GetTxBufferSize
1287:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
1288:.\Generated_Source\PSoC4/TelemUART.c ****     *
1289:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
1290:.\Generated_Source\PSoC4/TelemUART.c ****     *  Determine the amount of space left in the TX buffer and return the count in
1291:.\Generated_Source\PSoC4/TelemUART.c ****     *  bytes
1292:.\Generated_Source\PSoC4/TelemUART.c ****     *
1293:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
1294:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
1295:.\Generated_Source\PSoC4/TelemUART.c ****     *
1296:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
1297:.\Generated_Source\PSoC4/TelemUART.c ****     *  Integer count of the number of bytes left in the TX buffer
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 33


1298:.\Generated_Source\PSoC4/TelemUART.c ****     *
1299:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
1300:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_txBufferWrite - used to calculate left space.
1301:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_txBufferRead - used to calculate left space.
1302:.\Generated_Source\PSoC4/TelemUART.c ****     *
1303:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
1304:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
1305:.\Generated_Source\PSoC4/TelemUART.c ****     *
1306:.\Generated_Source\PSoC4/TelemUART.c ****     * Theory:
1307:.\Generated_Source\PSoC4/TelemUART.c ****     *  Allows the user to find out how full the TX Buffer is.
1308:.\Generated_Source\PSoC4/TelemUART.c ****     *
1309:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
1310:.\Generated_Source\PSoC4/TelemUART.c ****     uint8 TelemUART_GetTxBufferSize(void)
1311:.\Generated_Source\PSoC4/TelemUART.c ****                                                             
1312:.\Generated_Source\PSoC4/TelemUART.c ****     {
 510              		.loc 1 1312 0
 511              		.cfi_startproc
 512 0000 00B5     		push	{lr}
 513              	.LCFI8:
 514              		.cfi_def_cfa_offset 4
 515              		.cfi_offset 14, -4
1313:.\Generated_Source\PSoC4/TelemUART.c ****         uint8 size;
1314:.\Generated_Source\PSoC4/TelemUART.c **** 
1315:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH)
1316:.\Generated_Source\PSoC4/TelemUART.c **** 
1317:.\Generated_Source\PSoC4/TelemUART.c ****             /* Disable Tx interrupt. */
1318:.\Generated_Source\PSoC4/TelemUART.c ****             /* Protect variables that could change on interrupt. */
1319:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_TX_INTERRUPT_ENABLED)
1320:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_DisableTxInt();
1321:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_TX_INTERRUPT_ENABLED */
1322:.\Generated_Source\PSoC4/TelemUART.c **** 
1323:.\Generated_Source\PSoC4/TelemUART.c ****             if(TelemUART_txBufferRead == TelemUART_txBufferWrite)
1324:.\Generated_Source\PSoC4/TelemUART.c ****             {
1325:.\Generated_Source\PSoC4/TelemUART.c ****                 size = 0u;
1326:.\Generated_Source\PSoC4/TelemUART.c ****             }
1327:.\Generated_Source\PSoC4/TelemUART.c ****             else if(TelemUART_txBufferRead < TelemUART_txBufferWrite)
1328:.\Generated_Source\PSoC4/TelemUART.c ****             {
1329:.\Generated_Source\PSoC4/TelemUART.c ****                 size = (TelemUART_txBufferWrite - TelemUART_txBufferRead);
1330:.\Generated_Source\PSoC4/TelemUART.c ****             }
1331:.\Generated_Source\PSoC4/TelemUART.c ****             else
1332:.\Generated_Source\PSoC4/TelemUART.c ****             {
1333:.\Generated_Source\PSoC4/TelemUART.c ****                 size = (TelemUART_TXBUFFERSIZE - TelemUART_txBufferRead) + TelemUART_txBufferWrite;
1334:.\Generated_Source\PSoC4/TelemUART.c ****             }
1335:.\Generated_Source\PSoC4/TelemUART.c **** 
1336:.\Generated_Source\PSoC4/TelemUART.c ****             /* Enable Tx interrupt. */
1337:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_TX_INTERRUPT_ENABLED)
1338:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_EnableTxInt();
1339:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_TX_INTERRUPT_ENABLED */
1340:.\Generated_Source\PSoC4/TelemUART.c **** 
1341:.\Generated_Source\PSoC4/TelemUART.c ****         #else /* TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH */
1342:.\Generated_Source\PSoC4/TelemUART.c **** 
1343:.\Generated_Source\PSoC4/TelemUART.c ****             size = TelemUART_TXSTATUS_REG;
 516              		.loc 1 1343 0
 517 0002 044B     		ldr	r3, .L61
1344:.\Generated_Source\PSoC4/TelemUART.c **** 
1345:.\Generated_Source\PSoC4/TelemUART.c ****             /* Is the fifo is full. */
1346:.\Generated_Source\PSoC4/TelemUART.c ****             if((size & TelemUART_TX_STS_FIFO_FULL) != 0u)
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 34


1347:.\Generated_Source\PSoC4/TelemUART.c ****             {
1348:.\Generated_Source\PSoC4/TelemUART.c ****                 size = TelemUART_FIFO_LENGTH;
 518              		.loc 1 1348 0
 519 0004 0420     		mov	r0, #4
1343:.\Generated_Source\PSoC4/TelemUART.c ****             size = TelemUART_TXSTATUS_REG;
 520              		.loc 1 1343 0
 521 0006 1978     		ldrb	r1, [r3]
 522              	.LVL33:
1346:.\Generated_Source\PSoC4/TelemUART.c ****             if((size & TelemUART_TX_STS_FIFO_FULL) != 0u)
 523              		.loc 1 1346 0
 524 0008 0142     		tst	r1, r0
 525 000a 02D1     		bne	.L59
1349:.\Generated_Source\PSoC4/TelemUART.c ****             }
1350:.\Generated_Source\PSoC4/TelemUART.c ****             else if((size & TelemUART_TX_STS_FIFO_EMPTY) != 0u)
 526              		.loc 1 1350 0
 527 000c 4A08     		lsr	r2, r1, #1
 528 000e 0120     		mov	r0, #1
 529 0010 9043     		bic	r0, r2
 530              	.L59:
 531              	.LVL34:
1351:.\Generated_Source\PSoC4/TelemUART.c ****             {
1352:.\Generated_Source\PSoC4/TelemUART.c ****                 size = 0u;
1353:.\Generated_Source\PSoC4/TelemUART.c ****             }
1354:.\Generated_Source\PSoC4/TelemUART.c ****             else
1355:.\Generated_Source\PSoC4/TelemUART.c ****             {
1356:.\Generated_Source\PSoC4/TelemUART.c ****                 /* We only know there is data in the fifo. */
1357:.\Generated_Source\PSoC4/TelemUART.c ****                 size = 1u;
1358:.\Generated_Source\PSoC4/TelemUART.c ****             }
1359:.\Generated_Source\PSoC4/TelemUART.c **** 
1360:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH */
1361:.\Generated_Source\PSoC4/TelemUART.c **** 
1362:.\Generated_Source\PSoC4/TelemUART.c ****         return(size);
1363:.\Generated_Source\PSoC4/TelemUART.c ****     }
 532              		.loc 1 1363 0
 533              		@ sp needed for prologue
 534 0012 00BD     		pop	{pc}
 535              	.L62:
 536              		.align	2
 537              	.L61:
 538 0014 63000F40 		.word	1074724963
 539              		.cfi_endproc
 540              	.LFE13:
 541              		.size	TelemUART_GetTxBufferSize, .-TelemUART_GetTxBufferSize
 542              		.section	.text.TelemUART_ClearTxBuffer,"ax",%progbits
 543              		.align	1
 544              		.global	TelemUART_ClearTxBuffer
 545              		.code	16
 546              		.thumb_func
 547              		.type	TelemUART_ClearTxBuffer, %function
 548              	TelemUART_ClearTxBuffer:
 549              	.LFB14:
1364:.\Generated_Source\PSoC4/TelemUART.c **** 
1365:.\Generated_Source\PSoC4/TelemUART.c **** 
1366:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
1367:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_ClearTxBuffer
1368:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
1369:.\Generated_Source\PSoC4/TelemUART.c ****     *
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 35


1370:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
1371:.\Generated_Source\PSoC4/TelemUART.c ****     *  Clears the TX RAM buffer by setting the read and write pointers both to zero.
1372:.\Generated_Source\PSoC4/TelemUART.c ****     *  Clears the hardware TX FIFO.  Any data present in the FIFO will not be sent.
1373:.\Generated_Source\PSoC4/TelemUART.c ****     *
1374:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
1375:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
1376:.\Generated_Source\PSoC4/TelemUART.c ****     *
1377:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
1378:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
1379:.\Generated_Source\PSoC4/TelemUART.c ****     *
1380:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
1381:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_txBufferWrite - cleared to zero.
1382:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_txBufferRead - cleared to zero.
1383:.\Generated_Source\PSoC4/TelemUART.c ****     *
1384:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
1385:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
1386:.\Generated_Source\PSoC4/TelemUART.c ****     *
1387:.\Generated_Source\PSoC4/TelemUART.c ****     * Theory:
1388:.\Generated_Source\PSoC4/TelemUART.c ****     *  Setting the pointers to zero makes the system believe there is no data to
1389:.\Generated_Source\PSoC4/TelemUART.c ****     *  read and writing will resume at address 0 overwriting any data that may have
1390:.\Generated_Source\PSoC4/TelemUART.c ****     *  remained in the RAM.
1391:.\Generated_Source\PSoC4/TelemUART.c ****     *
1392:.\Generated_Source\PSoC4/TelemUART.c ****     * Side Effects:
1393:.\Generated_Source\PSoC4/TelemUART.c ****     *  Any received data not read from the RAM buffer will be lost when overwritten.
1394:.\Generated_Source\PSoC4/TelemUART.c ****     *
1395:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
1396:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_ClearTxBuffer(void) 
1397:.\Generated_Source\PSoC4/TelemUART.c ****     {
 550              		.loc 1 1397 0
 551              		.cfi_startproc
 552 0000 08B5     		push	{r3, lr}
 553              	.LCFI9:
 554              		.cfi_def_cfa_offset 8
 555              		.cfi_offset 3, -8
 556              		.cfi_offset 14, -4
1398:.\Generated_Source\PSoC4/TelemUART.c ****         uint8 enableInterrupts;
1399:.\Generated_Source\PSoC4/TelemUART.c **** 
1400:.\Generated_Source\PSoC4/TelemUART.c ****         /* Enter critical section */
1401:.\Generated_Source\PSoC4/TelemUART.c ****         enableInterrupts = CyEnterCriticalSection();
 557              		.loc 1 1401 0
 558 0002 FFF7FEFF 		bl	CyEnterCriticalSection
 559              	.LVL35:
1402:.\Generated_Source\PSoC4/TelemUART.c ****         /* clear the HW FIFO */
1403:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_TXDATA_AUX_CTL_REG |=  TelemUART_TX_FIFO_CLR;
 560              		.loc 1 1403 0
 561 0006 054B     		ldr	r3, .L64
 562 0008 0122     		mov	r2, #1
 563 000a 1978     		ldrb	r1, [r3]
1404:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_TXDATA_AUX_CTL_REG &= (uint8)~TelemUART_TX_FIFO_CLR;
1405:.\Generated_Source\PSoC4/TelemUART.c ****         /* Exit critical section */
1406:.\Generated_Source\PSoC4/TelemUART.c ****         CyExitCriticalSection(enableInterrupts);
1407:.\Generated_Source\PSoC4/TelemUART.c **** 
1408:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH)
1409:.\Generated_Source\PSoC4/TelemUART.c **** 
1410:.\Generated_Source\PSoC4/TelemUART.c ****             /* Disable Tx interrupt. */
1411:.\Generated_Source\PSoC4/TelemUART.c ****             /* Protect variables that could change on interrupt. */
1412:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_TX_INTERRUPT_ENABLED)
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 36


1413:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_DisableTxInt();
1414:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_TX_INTERRUPT_ENABLED */
1415:.\Generated_Source\PSoC4/TelemUART.c **** 
1416:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_txBufferRead = 0u;
1417:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_txBufferWrite = 0u;
1418:.\Generated_Source\PSoC4/TelemUART.c **** 
1419:.\Generated_Source\PSoC4/TelemUART.c ****             /* Enable Tx interrupt. */
1420:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_TX_INTERRUPT_ENABLED)
1421:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_EnableTxInt();
1422:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_TX_INTERRUPT_ENABLED */
1423:.\Generated_Source\PSoC4/TelemUART.c **** 
1424:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH */
1425:.\Generated_Source\PSoC4/TelemUART.c ****     }
 564              		.loc 1 1425 0
 565              		@ sp needed for prologue
1403:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_TXDATA_AUX_CTL_REG |=  TelemUART_TX_FIFO_CLR;
 566              		.loc 1 1403 0
 567 000c 1143     		orr	r1, r2
 568 000e 1970     		strb	r1, [r3]
1404:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_TXDATA_AUX_CTL_REG &= (uint8)~TelemUART_TX_FIFO_CLR;
 569              		.loc 1 1404 0
 570 0010 1978     		ldrb	r1, [r3]
 571 0012 9143     		bic	r1, r2
 572 0014 1970     		strb	r1, [r3]
1406:.\Generated_Source\PSoC4/TelemUART.c ****         CyExitCriticalSection(enableInterrupts);
 573              		.loc 1 1406 0
 574 0016 FFF7FEFF 		bl	CyExitCriticalSection
 575              	.LVL36:
 576              		.loc 1 1425 0
 577 001a 08BD     		pop	{r3, pc}
 578              	.L65:
 579              		.align	2
 580              	.L64:
 581 001c 93000F40 		.word	1074725011
 582              		.cfi_endproc
 583              	.LFE14:
 584              		.size	TelemUART_ClearTxBuffer, .-TelemUART_ClearTxBuffer
 585              		.section	.text.TelemUART_SendBreak,"ax",%progbits
 586              		.align	1
 587              		.global	TelemUART_SendBreak
 588              		.code	16
 589              		.thumb_func
 590              		.type	TelemUART_SendBreak, %function
 591              	TelemUART_SendBreak:
 592              	.LFB15:
1426:.\Generated_Source\PSoC4/TelemUART.c **** 
1427:.\Generated_Source\PSoC4/TelemUART.c **** 
1428:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
1429:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_SendBreak
1430:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
1431:.\Generated_Source\PSoC4/TelemUART.c ****     *
1432:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
1433:.\Generated_Source\PSoC4/TelemUART.c ****     *  Write a Break command to the UART
1434:.\Generated_Source\PSoC4/TelemUART.c ****     *
1435:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
1436:.\Generated_Source\PSoC4/TelemUART.c ****     *  uint8 retMode:  Wait mode,
1437:.\Generated_Source\PSoC4/TelemUART.c ****     *   0 - Initialize registers for Break, sends the Break signal and return
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 37


1438:.\Generated_Source\PSoC4/TelemUART.c ****     *       imediately.
1439:.\Generated_Source\PSoC4/TelemUART.c ****     *   1 - Wait until Break sending is complete, reinitialize registers to normal
1440:.\Generated_Source\PSoC4/TelemUART.c ****     *       transmission mode then return.
1441:.\Generated_Source\PSoC4/TelemUART.c ****     *   2 - Reinitialize registers to normal transmission mode then return.
1442:.\Generated_Source\PSoC4/TelemUART.c ****     *   3 - both steps: 0 and 1
1443:.\Generated_Source\PSoC4/TelemUART.c ****     *       init registers for Break, send Break signal
1444:.\Generated_Source\PSoC4/TelemUART.c ****     *       wait until Break sending is complete, reinit registers to normal
1445:.\Generated_Source\PSoC4/TelemUART.c ****     *       transmission mode then return.
1446:.\Generated_Source\PSoC4/TelemUART.c ****     *
1447:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
1448:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
1449:.\Generated_Source\PSoC4/TelemUART.c ****     *
1450:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
1451:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_initVar - checked to identify that the component has been
1452:.\Generated_Source\PSoC4/TelemUART.c ****     *     initialized.
1453:.\Generated_Source\PSoC4/TelemUART.c ****     *  tx_period - static variable, used for keeping TX period configuration.
1454:.\Generated_Source\PSoC4/TelemUART.c ****     *
1455:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
1456:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
1457:.\Generated_Source\PSoC4/TelemUART.c ****     *
1458:.\Generated_Source\PSoC4/TelemUART.c ****     * Theory:
1459:.\Generated_Source\PSoC4/TelemUART.c ****     *  SendBreak function initializes registers to send 13-bit break signal. It is
1460:.\Generated_Source\PSoC4/TelemUART.c ****     *  important to return the registers configuration to normal for continue 8-bit
1461:.\Generated_Source\PSoC4/TelemUART.c ****     *  operation.
1462:.\Generated_Source\PSoC4/TelemUART.c ****     *  Trere are 3 variants for this API usage:
1463:.\Generated_Source\PSoC4/TelemUART.c ****     *  1) SendBreak(3) - function will send the Break signal and take care on the
1464:.\Generated_Source\PSoC4/TelemUART.c ****     *     configuration returning. Funcition will block CPU untill transmition
1465:.\Generated_Source\PSoC4/TelemUART.c ****     *     complete.
1466:.\Generated_Source\PSoC4/TelemUART.c ****     *  2) User may want to use bloking time if UART configured to the low speed
1467:.\Generated_Source\PSoC4/TelemUART.c ****     *     operation
1468:.\Generated_Source\PSoC4/TelemUART.c ****     *     Emample for this case:
1469:.\Generated_Source\PSoC4/TelemUART.c ****     *     SendBreak(0);     - init Break signal transmition
1470:.\Generated_Source\PSoC4/TelemUART.c ****     *         Add your code here to use CPU time
1471:.\Generated_Source\PSoC4/TelemUART.c ****     *     SendBreak(1);     - complete Break operation
1472:.\Generated_Source\PSoC4/TelemUART.c ****     *  3) Same to 2) but user may want to init and use the interrupt for complete
1473:.\Generated_Source\PSoC4/TelemUART.c ****     *     break operation.
1474:.\Generated_Source\PSoC4/TelemUART.c ****     *     Example for this case:
1475:.\Generated_Source\PSoC4/TelemUART.c ****     *     Init TX interrupt whith "TX - On TX Complete" parameter
1476:.\Generated_Source\PSoC4/TelemUART.c ****     *     SendBreak(0);     - init Break signal transmition
1477:.\Generated_Source\PSoC4/TelemUART.c ****     *         Add your code here to use CPU time
1478:.\Generated_Source\PSoC4/TelemUART.c ****     *     When interrupt appear with UART_TX_STS_COMPLETE status:
1479:.\Generated_Source\PSoC4/TelemUART.c ****     *     SendBreak(2);     - complete Break operation
1480:.\Generated_Source\PSoC4/TelemUART.c ****     *
1481:.\Generated_Source\PSoC4/TelemUART.c ****     * Side Effects:
1482:.\Generated_Source\PSoC4/TelemUART.c ****     *   Uses static variable to keep registers configuration.
1483:.\Generated_Source\PSoC4/TelemUART.c ****     *
1484:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
1485:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_SendBreak(uint8 retMode) 
1486:.\Generated_Source\PSoC4/TelemUART.c ****     {
 593              		.loc 1 1486 0
 594              		.cfi_startproc
 595              	.LVL37:
 596 0000 00B5     		push	{lr}
 597              	.LCFI10:
 598              		.cfi_def_cfa_offset 4
 599              		.cfi_offset 14, -4
1487:.\Generated_Source\PSoC4/TelemUART.c **** 
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 38


1488:.\Generated_Source\PSoC4/TelemUART.c ****         /* If not Initialized then skip this function*/
1489:.\Generated_Source\PSoC4/TelemUART.c ****         if(TelemUART_initVar != 0u)
 600              		.loc 1 1489 0
 601 0002 134B     		ldr	r3, .L89
 602 0004 1A78     		ldrb	r2, [r3]
 603 0006 002A     		cmp	r2, #0
 604 0008 21D0     		beq	.L66
 605              	.LBB2:
1490:.\Generated_Source\PSoC4/TelemUART.c ****         {
1491:.\Generated_Source\PSoC4/TelemUART.c ****             /*Set the Counter to 13-bits and transmit a 00 byte*/
1492:.\Generated_Source\PSoC4/TelemUART.c ****             /*When that is done then reset the counter value back*/
1493:.\Generated_Source\PSoC4/TelemUART.c ****             uint8 tmpStat;
1494:.\Generated_Source\PSoC4/TelemUART.c **** 
1495:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_HD_ENABLED) /* Half Duplex mode*/
1496:.\Generated_Source\PSoC4/TelemUART.c **** 
1497:.\Generated_Source\PSoC4/TelemUART.c ****                 if( (retMode == TelemUART_SEND_BREAK) ||
1498:.\Generated_Source\PSoC4/TelemUART.c ****                     (retMode == TelemUART_SEND_WAIT_REINIT ) )
1499:.\Generated_Source\PSoC4/TelemUART.c ****                 {
1500:.\Generated_Source\PSoC4/TelemUART.c ****                     /* CTRL_HD_SEND_BREAK - sends break bits in HD mode*/
1501:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_WriteControlRegister(TelemUART_ReadControlRegister() |
1502:.\Generated_Source\PSoC4/TelemUART.c ****                                                           TelemUART_CTRL_HD_SEND_BREAK);
1503:.\Generated_Source\PSoC4/TelemUART.c ****                     /* Send zeros*/
1504:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_TXDATA_REG = 0u;
1505:.\Generated_Source\PSoC4/TelemUART.c **** 
1506:.\Generated_Source\PSoC4/TelemUART.c ****                     do /*wait until transmit starts*/
1507:.\Generated_Source\PSoC4/TelemUART.c ****                     {
1508:.\Generated_Source\PSoC4/TelemUART.c ****                         tmpStat = TelemUART_TXSTATUS_REG;
1509:.\Generated_Source\PSoC4/TelemUART.c ****                     }while((tmpStat & TelemUART_TX_STS_FIFO_EMPTY) != 0u);
1510:.\Generated_Source\PSoC4/TelemUART.c ****                 }
1511:.\Generated_Source\PSoC4/TelemUART.c **** 
1512:.\Generated_Source\PSoC4/TelemUART.c ****                 if( (retMode == TelemUART_WAIT_FOR_COMPLETE_REINIT) ||
1513:.\Generated_Source\PSoC4/TelemUART.c ****                     (retMode == TelemUART_SEND_WAIT_REINIT) )
1514:.\Generated_Source\PSoC4/TelemUART.c ****                 {
1515:.\Generated_Source\PSoC4/TelemUART.c ****                     do /*wait until transmit complete*/
1516:.\Generated_Source\PSoC4/TelemUART.c ****                     {
1517:.\Generated_Source\PSoC4/TelemUART.c ****                         tmpStat = TelemUART_TXSTATUS_REG;
1518:.\Generated_Source\PSoC4/TelemUART.c ****                     }while(((uint8)~tmpStat & TelemUART_TX_STS_COMPLETE) != 0u);
1519:.\Generated_Source\PSoC4/TelemUART.c ****                 }
1520:.\Generated_Source\PSoC4/TelemUART.c **** 
1521:.\Generated_Source\PSoC4/TelemUART.c ****                 if( (retMode == TelemUART_WAIT_FOR_COMPLETE_REINIT) ||
1522:.\Generated_Source\PSoC4/TelemUART.c ****                     (retMode == TelemUART_REINIT) ||
1523:.\Generated_Source\PSoC4/TelemUART.c ****                     (retMode == TelemUART_SEND_WAIT_REINIT) )
1524:.\Generated_Source\PSoC4/TelemUART.c ****                 {
1525:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_WriteControlRegister(TelemUART_ReadControlRegister() &
1526:.\Generated_Source\PSoC4/TelemUART.c ****                                                   (uint8)~TelemUART_CTRL_HD_SEND_BREAK);
1527:.\Generated_Source\PSoC4/TelemUART.c ****                 }
1528:.\Generated_Source\PSoC4/TelemUART.c **** 
1529:.\Generated_Source\PSoC4/TelemUART.c ****             #else /* TelemUART_HD_ENABLED Full Duplex mode */
1530:.\Generated_Source\PSoC4/TelemUART.c **** 
1531:.\Generated_Source\PSoC4/TelemUART.c ****                 static uint8 tx_period;
1532:.\Generated_Source\PSoC4/TelemUART.c **** 
1533:.\Generated_Source\PSoC4/TelemUART.c ****                 if( (retMode == TelemUART_SEND_BREAK) ||
 606              		.loc 1 1533 0
 607 000a 0028     		cmp	r0, #0
 608 000c 01D0     		beq	.L69
 609              		.loc 1 1533 0 is_stmt 0 discriminator 1
 610 000e 0328     		cmp	r0, #3
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 39


 611 0010 16D1     		bne	.L70
 612              	.L69:
1534:.\Generated_Source\PSoC4/TelemUART.c ****                     (retMode == TelemUART_SEND_WAIT_REINIT) )
1535:.\Generated_Source\PSoC4/TelemUART.c ****                 {
1536:.\Generated_Source\PSoC4/TelemUART.c ****                     /* CTRL_HD_SEND_BREAK - skip to send parity bit at Break signal in Full Duplex 
1537:.\Generated_Source\PSoC4/TelemUART.c ****                     #if( (TelemUART_PARITY_TYPE != TelemUART__B_UART__NONE_REVB) || \
1538:.\Generated_Source\PSoC4/TelemUART.c ****                                         (TelemUART_PARITY_TYPE_SW != 0u) )
1539:.\Generated_Source\PSoC4/TelemUART.c ****                         TelemUART_WriteControlRegister(TelemUART_ReadControlRegister() |
1540:.\Generated_Source\PSoC4/TelemUART.c ****                                                               TelemUART_CTRL_HD_SEND_BREAK);
1541:.\Generated_Source\PSoC4/TelemUART.c ****                     #endif /* End TelemUART_PARITY_TYPE != TelemUART__B_UART__NONE_REVB  */
1542:.\Generated_Source\PSoC4/TelemUART.c **** 
1543:.\Generated_Source\PSoC4/TelemUART.c ****                     #if(TelemUART_TXCLKGEN_DP)
1544:.\Generated_Source\PSoC4/TelemUART.c ****                         tx_period = TelemUART_TXBITCLKTX_COMPLETE_REG;
 613              		.loc 1 1544 0 is_stmt 1
 614 0012 104A     		ldr	r2, .L89+4
 615 0014 1178     		ldrb	r1, [r2]
 616 0016 5970     		strb	r1, [r3, #1]
1545:.\Generated_Source\PSoC4/TelemUART.c ****                         TelemUART_TXBITCLKTX_COMPLETE_REG = TelemUART_TXBITCTR_BREAKBITS;
 617              		.loc 1 1545 0
 618 0018 6721     		mov	r1, #103
 619 001a 1170     		strb	r1, [r2]
1546:.\Generated_Source\PSoC4/TelemUART.c ****                     #else
1547:.\Generated_Source\PSoC4/TelemUART.c ****                         tx_period = TelemUART_TXBITCTR_PERIOD_REG;
1548:.\Generated_Source\PSoC4/TelemUART.c ****                         TelemUART_TXBITCTR_PERIOD_REG = TelemUART_TXBITCTR_BREAKBITS8X;
1549:.\Generated_Source\PSoC4/TelemUART.c ****                     #endif /* End TelemUART_TXCLKGEN_DP */
1550:.\Generated_Source\PSoC4/TelemUART.c **** 
1551:.\Generated_Source\PSoC4/TelemUART.c ****                     /* Send zeros*/
1552:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_TXDATA_REG = 0u;
 620              		.loc 1 1552 0
 621 001c 0E4A     		ldr	r2, .L89+8
 622 001e 0021     		mov	r1, #0
 623 0020 1170     		strb	r1, [r2]
 624              	.L71:
1553:.\Generated_Source\PSoC4/TelemUART.c **** 
1554:.\Generated_Source\PSoC4/TelemUART.c ****                     do /* wait until transmit starts */
1555:.\Generated_Source\PSoC4/TelemUART.c ****                     {
1556:.\Generated_Source\PSoC4/TelemUART.c ****                         tmpStat = TelemUART_TXSTATUS_REG;
 625              		.loc 1 1556 0 discriminator 1
 626 0022 0E49     		ldr	r1, .L89+12
 627 0024 0A78     		ldrb	r2, [r1]
 628              	.LVL38:
1557:.\Generated_Source\PSoC4/TelemUART.c ****                     }while((tmpStat & TelemUART_TX_STS_FIFO_EMPTY) != 0u);
 629              		.loc 1 1557 0 discriminator 1
 630 0026 9107     		lsl	r1, r2, #30
 631 0028 FBD4     		bmi	.L71
1558:.\Generated_Source\PSoC4/TelemUART.c ****                 }
1559:.\Generated_Source\PSoC4/TelemUART.c **** 
1560:.\Generated_Source\PSoC4/TelemUART.c ****                 if( (retMode == TelemUART_WAIT_FOR_COMPLETE_REINIT) ||
 632              		.loc 1 1560 0
 633 002a 0128     		cmp	r0, #1
 634 002c 0AD0     		beq	.L83
 635              		.loc 1 1560 0 is_stmt 0 discriminator 1
 636 002e 0328     		cmp	r0, #3
 637 0030 08D0     		beq	.L83
 638              	.LVL39:
 639              	.L76:
1561:.\Generated_Source\PSoC4/TelemUART.c ****                     (retMode == TelemUART_SEND_WAIT_REINIT) )
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 40


1562:.\Generated_Source\PSoC4/TelemUART.c ****                 {
1563:.\Generated_Source\PSoC4/TelemUART.c ****                     do /*wait until transmit complete*/
1564:.\Generated_Source\PSoC4/TelemUART.c ****                     {
1565:.\Generated_Source\PSoC4/TelemUART.c ****                         tmpStat = TelemUART_TXSTATUS_REG;
1566:.\Generated_Source\PSoC4/TelemUART.c ****                     }while(((uint8)~tmpStat & TelemUART_TX_STS_COMPLETE) != 0u);
1567:.\Generated_Source\PSoC4/TelemUART.c ****                 }
1568:.\Generated_Source\PSoC4/TelemUART.c **** 
1569:.\Generated_Source\PSoC4/TelemUART.c ****                 if( (retMode == TelemUART_WAIT_FOR_COMPLETE_REINIT) ||
 640              		.loc 1 1569 0 is_stmt 1
 641 0032 0138     		sub	r0, r0, #1
 642              	.LVL40:
 643 0034 0228     		cmp	r0, #2
 644 0036 0AD8     		bhi	.L66
1570:.\Generated_Source\PSoC4/TelemUART.c ****                     (retMode == TelemUART_REINIT) ||
1571:.\Generated_Source\PSoC4/TelemUART.c ****                     (retMode == TelemUART_SEND_WAIT_REINIT) )
1572:.\Generated_Source\PSoC4/TelemUART.c ****                 {
1573:.\Generated_Source\PSoC4/TelemUART.c **** 
1574:.\Generated_Source\PSoC4/TelemUART.c ****                     #if(TelemUART_TXCLKGEN_DP)
1575:.\Generated_Source\PSoC4/TelemUART.c ****                         TelemUART_TXBITCLKTX_COMPLETE_REG = tx_period;
 645              		.loc 1 1575 0
 646 0038 5878     		ldrb	r0, [r3, #1]
 647 003a 064B     		ldr	r3, .L89+4
 648 003c 1870     		strb	r0, [r3]
 649 003e 06E0     		b	.L66
 650              	.LVL41:
 651              	.L70:
1560:.\Generated_Source\PSoC4/TelemUART.c ****                 if( (retMode == TelemUART_WAIT_FOR_COMPLETE_REINIT) ||
 652              		.loc 1 1560 0
 653 0040 0128     		cmp	r0, #1
 654 0042 F6D1     		bne	.L76
 655              	.L83:
1565:.\Generated_Source\PSoC4/TelemUART.c ****                         tmpStat = TelemUART_TXSTATUS_REG;
 656              		.loc 1 1565 0 discriminator 1
 657 0044 0549     		ldr	r1, .L89+12
 658 0046 0A78     		ldrb	r2, [r1]
 659              	.LVL42:
1566:.\Generated_Source\PSoC4/TelemUART.c ****                     }while(((uint8)~tmpStat & TelemUART_TX_STS_COMPLETE) != 0u);
 660              		.loc 1 1566 0 discriminator 1
 661 0048 D107     		lsl	r1, r2, #31
 662 004a FBD5     		bpl	.L83
 663 004c F1E7     		b	.L76
 664              	.LVL43:
 665              	.L66:
 666              	.LBE2:
1576:.\Generated_Source\PSoC4/TelemUART.c ****                     #else
1577:.\Generated_Source\PSoC4/TelemUART.c ****                         TelemUART_TXBITCTR_PERIOD_REG = tx_period;
1578:.\Generated_Source\PSoC4/TelemUART.c ****                     #endif /* End TelemUART_TXCLKGEN_DP */
1579:.\Generated_Source\PSoC4/TelemUART.c **** 
1580:.\Generated_Source\PSoC4/TelemUART.c ****                     #if( (TelemUART_PARITY_TYPE != TelemUART__B_UART__NONE_REVB) || \
1581:.\Generated_Source\PSoC4/TelemUART.c ****                          (TelemUART_PARITY_TYPE_SW != 0u) )
1582:.\Generated_Source\PSoC4/TelemUART.c ****                         TelemUART_WriteControlRegister(TelemUART_ReadControlRegister() &
1583:.\Generated_Source\PSoC4/TelemUART.c ****                                                       (uint8)~TelemUART_CTRL_HD_SEND_BREAK);
1584:.\Generated_Source\PSoC4/TelemUART.c ****                     #endif /* End TelemUART_PARITY_TYPE != NONE */
1585:.\Generated_Source\PSoC4/TelemUART.c ****                 }
1586:.\Generated_Source\PSoC4/TelemUART.c ****             #endif    /* End TelemUART_HD_ENABLED */
1587:.\Generated_Source\PSoC4/TelemUART.c ****         }
1588:.\Generated_Source\PSoC4/TelemUART.c ****     }
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 41


 667              		.loc 1 1588 0
 668              		@ sp needed for prologue
 669 004e 00BD     		pop	{pc}
 670              	.L90:
 671              		.align	2
 672              	.L89:
 673 0050 00000000 		.word	.LANCHOR0
 674 0054 32000F40 		.word	1074724914
 675 0058 43000F40 		.word	1074724931
 676 005c 63000F40 		.word	1074724963
 677              		.cfi_endproc
 678              	.LFE15:
 679              		.size	TelemUART_SendBreak, .-TelemUART_SendBreak
 680              		.section	.text.TelemUART_SetTxAddressMode,"ax",%progbits
 681              		.align	1
 682              		.global	TelemUART_SetTxAddressMode
 683              		.code	16
 684              		.thumb_func
 685              		.type	TelemUART_SetTxAddressMode, %function
 686              	TelemUART_SetTxAddressMode:
 687              	.LFB16:
1589:.\Generated_Source\PSoC4/TelemUART.c **** 
1590:.\Generated_Source\PSoC4/TelemUART.c **** 
1591:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
1592:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_SetTxAddressMode
1593:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
1594:.\Generated_Source\PSoC4/TelemUART.c ****     *
1595:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
1596:.\Generated_Source\PSoC4/TelemUART.c ****     *  Set the transmit addressing mode
1597:.\Generated_Source\PSoC4/TelemUART.c ****     *
1598:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
1599:.\Generated_Source\PSoC4/TelemUART.c ****     *  addressMode: 0 -> Space
1600:.\Generated_Source\PSoC4/TelemUART.c ****     *               1 -> Mark
1601:.\Generated_Source\PSoC4/TelemUART.c ****     *
1602:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
1603:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
1604:.\Generated_Source\PSoC4/TelemUART.c ****     *
1605:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
1606:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_SetTxAddressMode(uint8 addressMode) 
1607:.\Generated_Source\PSoC4/TelemUART.c ****     {
 688              		.loc 1 1607 0
 689              		.cfi_startproc
 690              	.LVL44:
1608:.\Generated_Source\PSoC4/TelemUART.c ****         /* Mark/Space sending enable*/
1609:.\Generated_Source\PSoC4/TelemUART.c ****         if(addressMode != 0u)
1610:.\Generated_Source\PSoC4/TelemUART.c ****         {
1611:.\Generated_Source\PSoC4/TelemUART.c ****             #if( TelemUART_CONTROL_REG_REMOVED == 0u )
1612:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_WriteControlRegister(TelemUART_ReadControlRegister() |
1613:.\Generated_Source\PSoC4/TelemUART.c ****                                                       TelemUART_CTRL_MARK);
1614:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_CONTROL_REG_REMOVED == 0u */
1615:.\Generated_Source\PSoC4/TelemUART.c ****         }
1616:.\Generated_Source\PSoC4/TelemUART.c ****         else
1617:.\Generated_Source\PSoC4/TelemUART.c ****         {
1618:.\Generated_Source\PSoC4/TelemUART.c ****             #if( TelemUART_CONTROL_REG_REMOVED == 0u )
1619:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_WriteControlRegister(TelemUART_ReadControlRegister() &
1620:.\Generated_Source\PSoC4/TelemUART.c ****                                                     (uint8)~TelemUART_CTRL_MARK);
1621:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_CONTROL_REG_REMOVED == 0u */
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 42


1622:.\Generated_Source\PSoC4/TelemUART.c ****         }
1623:.\Generated_Source\PSoC4/TelemUART.c ****     }
 691              		.loc 1 1623 0
 692              		@ sp needed for prologue
 693 0000 7047     		bx	lr
 694              		.cfi_endproc
 695              	.LFE16:
 696              		.size	TelemUART_SetTxAddressMode, .-TelemUART_SetTxAddressMode
 697              		.global	TelemUART_initVar
 698              		.bss
 699              		.set	.LANCHOR0,. + 0
 700              		.type	TelemUART_initVar, %object
 701              		.size	TelemUART_initVar, 1
 702              	TelemUART_initVar:
 703 0000 00       		.space	1
 704              		.type	tx_period.4704, %object
 705              		.size	tx_period.4704, 1
 706              	tx_period.4704:
 707 0001 00       		.space	1
 708              		.text
 709              	.Letext0:
 710              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 711              		.file 3 ".\\Generated_Source\\PSoC4\\TelemUART_IntClock.h"
 712              		.file 4 ".\\Generated_Source\\PSoC4\\CyLib.h"
 713              		.section	.debug_info,"",%progbits
 714              	.Ldebug_info0:
 715 0000 AB040000 		.4byte	0x4ab
 716 0004 0200     		.2byte	0x2
 717 0006 00000000 		.4byte	.Ldebug_abbrev0
 718 000a 04       		.byte	0x4
 719 000b 01       		.uleb128 0x1
 720 000c 00030000 		.4byte	.LASF46
 721 0010 01       		.byte	0x1
 722 0011 0E000000 		.4byte	.LASF47
 723 0015 55000000 		.4byte	.LASF48
 724 0019 00000000 		.4byte	.Ldebug_ranges0+0
 725 001d 00000000 		.4byte	0
 726 0021 00000000 		.4byte	0
 727 0025 00000000 		.4byte	.Ldebug_line0
 728 0029 02       		.uleb128 0x2
 729 002a 01       		.byte	0x1
 730 002b 06       		.byte	0x6
 731 002c AA030000 		.4byte	.LASF0
 732 0030 02       		.uleb128 0x2
 733 0031 01       		.byte	0x1
 734 0032 08       		.byte	0x8
 735 0033 B7020000 		.4byte	.LASF1
 736 0037 02       		.uleb128 0x2
 737 0038 02       		.byte	0x2
 738 0039 05       		.byte	0x5
 739 003a F6020000 		.4byte	.LASF2
 740 003e 02       		.uleb128 0x2
 741 003f 02       		.byte	0x2
 742 0040 07       		.byte	0x7
 743 0041 3B000000 		.4byte	.LASF3
 744 0045 02       		.uleb128 0x2
 745 0046 04       		.byte	0x4
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 43


 746 0047 05       		.byte	0x5
 747 0048 63030000 		.4byte	.LASF4
 748 004c 02       		.uleb128 0x2
 749 004d 04       		.byte	0x4
 750 004e 07       		.byte	0x7
 751 004f FD000000 		.4byte	.LASF5
 752 0053 02       		.uleb128 0x2
 753 0054 08       		.byte	0x8
 754 0055 05       		.byte	0x5
 755 0056 00000000 		.4byte	.LASF6
 756 005a 02       		.uleb128 0x2
 757 005b 08       		.byte	0x8
 758 005c 07       		.byte	0x7
 759 005d AD000000 		.4byte	.LASF7
 760 0061 03       		.uleb128 0x3
 761 0062 04       		.byte	0x4
 762 0063 05       		.byte	0x5
 763 0064 696E7400 		.ascii	"int\000"
 764 0068 02       		.uleb128 0x2
 765 0069 04       		.byte	0x4
 766 006a 07       		.byte	0x7
 767 006b 1F020000 		.4byte	.LASF8
 768 006f 04       		.uleb128 0x4
 769 0070 0F010000 		.4byte	.LASF9
 770 0074 02       		.byte	0x2
 771 0075 5B       		.byte	0x5b
 772 0076 30000000 		.4byte	0x30
 773 007a 04       		.uleb128 0x4
 774 007b D9010000 		.4byte	.LASF10
 775 007f 02       		.byte	0x2
 776 0080 5C       		.byte	0x5c
 777 0081 3E000000 		.4byte	0x3e
 778 0085 02       		.uleb128 0x2
 779 0086 04       		.byte	0x4
 780 0087 04       		.byte	0x4
 781 0088 A7000000 		.4byte	.LASF11
 782 008c 02       		.uleb128 0x2
 783 008d 08       		.byte	0x8
 784 008e 04       		.byte	0x4
 785 008f 96010000 		.4byte	.LASF12
 786 0093 04       		.uleb128 0x4
 787 0094 CE020000 		.4byte	.LASF13
 788 0098 02       		.byte	0x2
 789 0099 6C       		.byte	0x6c
 790 009a 9E000000 		.4byte	0x9e
 791 009e 02       		.uleb128 0x2
 792 009f 01       		.byte	0x1
 793 00a0 08       		.byte	0x8
 794 00a1 E9020000 		.4byte	.LASF14
 795 00a5 04       		.uleb128 0x4
 796 00a6 E8000000 		.4byte	.LASF15
 797 00aa 02       		.byte	0x2
 798 00ab F0       		.byte	0xf0
 799 00ac B0000000 		.4byte	0xb0
 800 00b0 05       		.uleb128 0x5
 801 00b1 6F000000 		.4byte	0x6f
 802 00b5 02       		.uleb128 0x2
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 44


 803 00b6 04       		.byte	0x4
 804 00b7 07       		.byte	0x7
 805 00b8 C5020000 		.4byte	.LASF16
 806 00bc 06       		.uleb128 0x6
 807 00bd 01       		.byte	0x1
 808 00be 95020000 		.4byte	.LASF49
 809 00c2 01       		.byte	0x1
 810 00c3 65       		.byte	0x65
 811 00c4 01       		.byte	0x1
 812 00c5 00000000 		.4byte	.LFB1
 813 00c9 20000000 		.4byte	.LFE1
 814 00cd 02       		.byte	0x2
 815 00ce 7D       		.byte	0x7d
 816 00cf 00       		.sleb128 0
 817 00d0 01       		.byte	0x1
 818 00d1 07       		.uleb128 0x7
 819 00d2 01       		.byte	0x1
 820 00d3 80030000 		.4byte	.LASF17
 821 00d7 01       		.byte	0x1
 822 00d8 AE       		.byte	0xae
 823 00d9 01       		.byte	0x1
 824 00da 00000000 		.4byte	.LFB2
 825 00de 24000000 		.4byte	.LFE2
 826 00e2 00000000 		.4byte	.LLST0
 827 00e6 01       		.byte	0x1
 828 00e7 1D010000 		.4byte	0x11d
 829 00eb 08       		.uleb128 0x8
 830 00ec 39010000 		.4byte	.LASF20
 831 00f0 01       		.byte	0x1
 832 00f1 B0       		.byte	0xb0
 833 00f2 6F000000 		.4byte	0x6f
 834 00f6 20000000 		.4byte	.LLST1
 835 00fa 09       		.uleb128 0x9
 836 00fb 06000000 		.4byte	.LVL0
 837 00ff 78040000 		.4byte	0x478
 838 0103 09       		.uleb128 0x9
 839 0104 16000000 		.4byte	.LVL2
 840 0108 86040000 		.4byte	0x486
 841 010c 0A       		.uleb128 0xa
 842 010d 1C000000 		.4byte	.LVL3
 843 0111 90040000 		.4byte	0x490
 844 0115 0B       		.uleb128 0xb
 845 0116 01       		.byte	0x1
 846 0117 50       		.byte	0x50
 847 0118 02       		.byte	0x2
 848 0119 74       		.byte	0x74
 849 011a 00       		.sleb128 0
 850 011b 00       		.byte	0
 851 011c 00       		.byte	0
 852 011d 07       		.uleb128 0x7
 853 011e 01       		.byte	0x1
 854 011f ED000000 		.4byte	.LASF18
 855 0123 01       		.byte	0x1
 856 0124 49       		.byte	0x49
 857 0125 01       		.byte	0x1
 858 0126 00000000 		.4byte	.LFB0
 859 012a 1C000000 		.4byte	.LFE0
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 45


 860 012e 3E000000 		.4byte	.LLST2
 861 0132 01       		.byte	0x1
 862 0133 4A010000 		.4byte	0x14a
 863 0137 09       		.uleb128 0x9
 864 0138 0E000000 		.4byte	.LVL5
 865 013c BC000000 		.4byte	0xbc
 866 0140 09       		.uleb128 0x9
 867 0141 16000000 		.4byte	.LVL6
 868 0145 D1000000 		.4byte	0xd1
 869 0149 00       		.byte	0
 870 014a 07       		.uleb128 0x7
 871 014b 01       		.byte	0x1
 872 014c BB030000 		.4byte	.LASF19
 873 0150 01       		.byte	0x1
 874 0151 E3       		.byte	0xe3
 875 0152 01       		.byte	0x1
 876 0153 00000000 		.4byte	.LFB3
 877 0157 24000000 		.4byte	.LFE3
 878 015b 5E000000 		.4byte	.LLST3
 879 015f 01       		.byte	0x1
 880 0160 96010000 		.4byte	0x196
 881 0164 08       		.uleb128 0x8
 882 0165 39010000 		.4byte	.LASF20
 883 0169 01       		.byte	0x1
 884 016a E5       		.byte	0xe5
 885 016b 6F000000 		.4byte	0x6f
 886 016f 7E000000 		.4byte	.LLST4
 887 0173 09       		.uleb128 0x9
 888 0174 06000000 		.4byte	.LVL7
 889 0178 78040000 		.4byte	0x478
 890 017c 09       		.uleb128 0x9
 891 017d 0C000000 		.4byte	.LVL9
 892 0181 A4040000 		.4byte	0x4a4
 893 0185 0A       		.uleb128 0xa
 894 0186 1C000000 		.4byte	.LVL10
 895 018a 90040000 		.4byte	0x490
 896 018e 0B       		.uleb128 0xb
 897 018f 01       		.byte	0x1
 898 0190 50       		.byte	0x50
 899 0191 02       		.byte	0x2
 900 0192 74       		.byte	0x74
 901 0193 00       		.sleb128 0
 902 0194 00       		.byte	0
 903 0195 00       		.byte	0
 904 0196 0C       		.uleb128 0xc
 905 0197 01       		.byte	0x1
 906 0198 77020000 		.4byte	.LASF27
 907 019c 01       		.byte	0x1
 908 019d 1901     		.2byte	0x119
 909 019f 01       		.byte	0x1
 910 01a0 6F000000 		.4byte	0x6f
 911 01a4 00000000 		.4byte	.LFB4
 912 01a8 04000000 		.4byte	.LFE4
 913 01ac 02       		.byte	0x2
 914 01ad 7D       		.byte	0x7d
 915 01ae 00       		.sleb128 0
 916 01af 01       		.byte	0x1
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 46


 917 01b0 0D       		.uleb128 0xd
 918 01b1 01       		.byte	0x1
 919 01b2 65010000 		.4byte	.LASF21
 920 01b6 01       		.byte	0x1
 921 01b7 3101     		.2byte	0x131
 922 01b9 01       		.byte	0x1
 923 01ba 00000000 		.4byte	.LFB5
 924 01be 02000000 		.4byte	.LFE5
 925 01c2 02       		.byte	0x2
 926 01c3 7D       		.byte	0x7d
 927 01c4 00       		.sleb128 0
 928 01c5 01       		.byte	0x1
 929 01c6 D9010000 		.4byte	0x1d9
 930 01ca 0E       		.uleb128 0xe
 931 01cb 15010000 		.4byte	.LASF23
 932 01cf 01       		.byte	0x1
 933 01d0 3101     		.2byte	0x131
 934 01d2 6F000000 		.4byte	0x6f
 935 01d6 01       		.byte	0x1
 936 01d7 50       		.byte	0x50
 937 01d8 00       		.byte	0
 938 01d9 0D       		.uleb128 0xd
 939 01da 01       		.byte	0x1
 940 01db 2C020000 		.4byte	.LASF22
 941 01df 01       		.byte	0x1
 942 01e0 C803     		.2byte	0x3c8
 943 01e2 01       		.byte	0x1
 944 01e3 00000000 		.4byte	.LFB6
 945 01e7 0C000000 		.4byte	.LFE6
 946 01eb 02       		.byte	0x2
 947 01ec 7D       		.byte	0x7d
 948 01ed 00       		.sleb128 0
 949 01ee 01       		.byte	0x1
 950 01ef 02020000 		.4byte	0x202
 951 01f3 0E       		.uleb128 0xe
 952 01f4 B4010000 		.4byte	.LASF24
 953 01f8 01       		.byte	0x1
 954 01f9 C803     		.2byte	0x3c8
 955 01fb 6F000000 		.4byte	0x6f
 956 01ff 01       		.byte	0x1
 957 0200 50       		.byte	0x50
 958 0201 00       		.byte	0
 959 0202 0F       		.uleb128 0xf
 960 0203 01       		.byte	0x1
 961 0204 09020000 		.4byte	.LASF25
 962 0208 01       		.byte	0x1
 963 0209 EA03     		.2byte	0x3ea
 964 020b 01       		.byte	0x1
 965 020c 00000000 		.4byte	.LFB7
 966 0210 18000000 		.4byte	.LFE7
 967 0214 9C000000 		.4byte	.LLST5
 968 0218 01       		.byte	0x1
 969 0219 2C020000 		.4byte	0x22c
 970 021d 0E       		.uleb128 0xe
 971 021e D4020000 		.4byte	.LASF26
 972 0222 01       		.byte	0x1
 973 0223 EA03     		.2byte	0x3ea
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 47


 974 0225 6F000000 		.4byte	0x6f
 975 0229 01       		.byte	0x1
 976 022a 50       		.byte	0x50
 977 022b 00       		.byte	0
 978 022c 0C       		.uleb128 0xc
 979 022d 01       		.byte	0x1
 980 022e 9D010000 		.4byte	.LASF28
 981 0232 01       		.byte	0x1
 982 0233 2E04     		.2byte	0x42e
 983 0235 01       		.byte	0x1
 984 0236 6F000000 		.4byte	0x6f
 985 023a 00000000 		.4byte	.LFB8
 986 023e 0C000000 		.4byte	.LFE8
 987 0242 02       		.byte	0x2
 988 0243 7D       		.byte	0x7d
 989 0244 00       		.sleb128 0
 990 0245 01       		.byte	0x1
 991 0246 0F       		.uleb128 0xf
 992 0247 01       		.byte	0x1
 993 0248 84010000 		.4byte	.LASF29
 994 024c 01       		.byte	0x1
 995 024d 5204     		.2byte	0x452
 996 024f 01       		.byte	0x1
 997 0250 00000000 		.4byte	.LFB9
 998 0254 18000000 		.4byte	.LFE9
 999 0258 BC000000 		.4byte	.LLST6
 1000 025c 01       		.byte	0x1
 1001 025d 70020000 		.4byte	0x270
 1002 0261 0E       		.uleb128 0xe
 1003 0262 D4020000 		.4byte	.LASF26
 1004 0266 01       		.byte	0x1
 1005 0267 5204     		.2byte	0x452
 1006 0269 6F000000 		.4byte	0x6f
 1007 026d 01       		.byte	0x1
 1008 026e 50       		.byte	0x50
 1009 026f 00       		.byte	0
 1010 0270 0F       		.uleb128 0xf
 1011 0271 01       		.byte	0x1
 1012 0272 6C030000 		.4byte	.LASF30
 1013 0276 01       		.byte	0x1
 1014 0277 AE04     		.2byte	0x4ae
 1015 0279 01       		.byte	0x1
 1016 027a 00000000 		.4byte	.LFB10
 1017 027e 24000000 		.4byte	.LFE10
 1018 0282 DC000000 		.4byte	.LLST7
 1019 0286 01       		.byte	0x1
 1020 0287 B5020000 		.4byte	0x2b5
 1021 028b 10       		.uleb128 0x10
 1022 028c 4E000000 		.4byte	.LASF31
 1023 0290 01       		.byte	0x1
 1024 0291 AE04     		.2byte	0x4ae
 1025 0293 B5020000 		.4byte	0x2b5
 1026 0297 FC000000 		.4byte	.LLST8
 1027 029b 11       		.uleb128 0x11
 1028 029c CF010000 		.4byte	.LASF32
 1029 02a0 01       		.byte	0x1
 1030 02a1 B004     		.2byte	0x4b0
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 48


 1031 02a3 7A000000 		.4byte	0x7a
 1032 02a7 28010000 		.4byte	.LLST9
 1033 02ab 09       		.uleb128 0x9
 1034 02ac 1A000000 		.4byte	.LVL20
 1035 02b0 46020000 		.4byte	0x246
 1036 02b4 00       		.byte	0
 1037 02b5 12       		.uleb128 0x12
 1038 02b6 04       		.byte	0x4
 1039 02b7 BB020000 		.4byte	0x2bb
 1040 02bb 13       		.uleb128 0x13
 1041 02bc 93000000 		.4byte	0x93
 1042 02c0 0F       		.uleb128 0xf
 1043 02c1 01       		.byte	0x1
 1044 02c2 A4020000 		.4byte	.LASF33
 1045 02c6 01       		.byte	0x1
 1046 02c7 D404     		.2byte	0x4d4
 1047 02c9 01       		.byte	0x1
 1048 02ca 00000000 		.4byte	.LFB11
 1049 02ce 28000000 		.4byte	.LFE11
 1050 02d2 5F010000 		.4byte	.LLST10
 1051 02d6 01       		.byte	0x1
 1052 02d7 15030000 		.4byte	0x315
 1053 02db 10       		.uleb128 0x10
 1054 02dc 4E000000 		.4byte	.LASF31
 1055 02e0 01       		.byte	0x1
 1056 02e1 D404     		.2byte	0x4d4
 1057 02e3 15030000 		.4byte	0x315
 1058 02e7 7F010000 		.4byte	.LLST11
 1059 02eb 10       		.uleb128 0x10
 1060 02ec 2F010000 		.4byte	.LASF34
 1061 02f0 01       		.byte	0x1
 1062 02f1 D404     		.2byte	0x4d4
 1063 02f3 6F000000 		.4byte	0x6f
 1064 02f7 AB010000 		.4byte	.LLST12
 1065 02fb 11       		.uleb128 0x11
 1066 02fc CF010000 		.4byte	.LASF32
 1067 0300 01       		.byte	0x1
 1068 0301 D704     		.2byte	0x4d7
 1069 0303 6F000000 		.4byte	0x6f
 1070 0307 CC010000 		.4byte	.LLST13
 1071 030b 09       		.uleb128 0x9
 1072 030c 18000000 		.4byte	.LVL27
 1073 0310 46020000 		.4byte	0x246
 1074 0314 00       		.byte	0
 1075 0315 12       		.uleb128 0x12
 1076 0316 04       		.byte	0x4
 1077 0317 1B030000 		.4byte	0x31b
 1078 031b 13       		.uleb128 0x13
 1079 031c 6F000000 		.4byte	0x6f
 1080 0320 0F       		.uleb128 0xf
 1081 0321 01       		.byte	0x1
 1082 0322 1D010000 		.4byte	.LASF35
 1083 0326 01       		.byte	0x1
 1084 0327 F904     		.2byte	0x4f9
 1085 0329 01       		.byte	0x1
 1086 032a 00000000 		.4byte	.LFB12
 1087 032e 20000000 		.4byte	.LFE12
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 49


 1088 0332 E0010000 		.4byte	.LLST14
 1089 0336 01       		.byte	0x1
 1090 0337 77030000 		.4byte	0x377
 1091 033b 10       		.uleb128 0x10
 1092 033c D4020000 		.4byte	.LASF26
 1093 0340 01       		.byte	0x1
 1094 0341 F904     		.2byte	0x4f9
 1095 0343 6F000000 		.4byte	0x6f
 1096 0347 00020000 		.4byte	.LLST15
 1097 034b 09       		.uleb128 0x9
 1098 034c 0E000000 		.4byte	.LVL30
 1099 0350 46020000 		.4byte	0x246
 1100 0354 14       		.uleb128 0x14
 1101 0355 14000000 		.4byte	.LVL31
 1102 0359 46020000 		.4byte	0x246
 1103 035d 67030000 		.4byte	0x367
 1104 0361 0B       		.uleb128 0xb
 1105 0362 01       		.byte	0x1
 1106 0363 50       		.byte	0x50
 1107 0364 01       		.byte	0x1
 1108 0365 3D       		.byte	0x3d
 1109 0366 00       		.byte	0
 1110 0367 0A       		.uleb128 0xa
 1111 0368 1A000000 		.4byte	.LVL32
 1112 036c 46020000 		.4byte	0x246
 1113 0370 0B       		.uleb128 0xb
 1114 0371 01       		.byte	0x1
 1115 0372 50       		.byte	0x50
 1116 0373 01       		.byte	0x1
 1117 0374 3A       		.byte	0x3a
 1118 0375 00       		.byte	0
 1119 0376 00       		.byte	0
 1120 0377 15       		.uleb128 0x15
 1121 0378 01       		.byte	0x1
 1122 0379 49030000 		.4byte	.LASF50
 1123 037d 01       		.byte	0x1
 1124 037e 1E05     		.2byte	0x51e
 1125 0380 01       		.byte	0x1
 1126 0381 6F000000 		.4byte	0x6f
 1127 0385 00000000 		.4byte	.LFB13
 1128 0389 18000000 		.4byte	.LFE13
 1129 038d 21020000 		.4byte	.LLST16
 1130 0391 01       		.byte	0x1
 1131 0392 A7030000 		.4byte	0x3a7
 1132 0396 11       		.uleb128 0x11
 1133 0397 B6030000 		.4byte	.LASF36
 1134 039b 01       		.byte	0x1
 1135 039c 2105     		.2byte	0x521
 1136 039e 6F000000 		.4byte	0x6f
 1137 03a2 41020000 		.4byte	.LLST17
 1138 03a6 00       		.byte	0
 1139 03a7 0F       		.uleb128 0xf
 1140 03a8 01       		.byte	0x1
 1141 03a9 49020000 		.4byte	.LASF37
 1142 03ad 01       		.byte	0x1
 1143 03ae 7405     		.2byte	0x574
 1144 03b0 01       		.byte	0x1
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 50


 1145 03b1 00000000 		.4byte	.LFB14
 1146 03b5 20000000 		.4byte	.LFE14
 1147 03b9 5F020000 		.4byte	.LLST18
 1148 03bd 01       		.byte	0x1
 1149 03be E5030000 		.4byte	0x3e5
 1150 03c2 11       		.uleb128 0x11
 1151 03c3 39010000 		.4byte	.LASF20
 1152 03c7 01       		.byte	0x1
 1153 03c8 7605     		.2byte	0x576
 1154 03ca 6F000000 		.4byte	0x6f
 1155 03ce 7F020000 		.4byte	.LLST19
 1156 03d2 09       		.uleb128 0x9
 1157 03d3 06000000 		.4byte	.LVL35
 1158 03d7 78040000 		.4byte	0x478
 1159 03db 09       		.uleb128 0x9
 1160 03dc 1A000000 		.4byte	.LVL36
 1161 03e0 90040000 		.4byte	0x490
 1162 03e4 00       		.byte	0
 1163 03e5 0F       		.uleb128 0xf
 1164 03e6 01       		.byte	0x1
 1165 03e7 BB010000 		.4byte	.LASF38
 1166 03eb 01       		.byte	0x1
 1167 03ec CD05     		.2byte	0x5cd
 1168 03ee 01       		.byte	0x1
 1169 03ef 00000000 		.4byte	.LFB15
 1170 03f3 60000000 		.4byte	.LFE15
 1171 03f7 92020000 		.4byte	.LLST20
 1172 03fb 01       		.byte	0x1
 1173 03fc 3D040000 		.4byte	0x43d
 1174 0400 10       		.uleb128 0x10
 1175 0401 EE020000 		.4byte	.LASF39
 1176 0405 01       		.byte	0x1
 1177 0406 CD05     		.2byte	0x5cd
 1178 0408 6F000000 		.4byte	0x6f
 1179 040c B2020000 		.4byte	.LLST21
 1180 0410 16       		.uleb128 0x16
 1181 0411 0A000000 		.4byte	.LBB2
 1182 0415 4E000000 		.4byte	.LBE2
 1183 0419 11       		.uleb128 0x11
 1184 041a 33000000 		.4byte	.LASF40
 1185 041e 01       		.byte	0x1
 1186 041f D505     		.2byte	0x5d5
 1187 0421 6F000000 		.4byte	0x6f
 1188 0425 EC020000 		.4byte	.LLST22
 1189 0429 17       		.uleb128 0x17
 1190 042a DF020000 		.4byte	.LASF41
 1191 042e 01       		.byte	0x1
 1192 042f FB05     		.2byte	0x5fb
 1193 0431 6F000000 		.4byte	0x6f
 1194 0435 05       		.byte	0x5
 1195 0436 03       		.byte	0x3
 1196 0437 01000000 		.4byte	tx_period.4704
 1197 043b 00       		.byte	0
 1198 043c 00       		.byte	0
 1199 043d 0D       		.uleb128 0xd
 1200 043e 01       		.byte	0x1
 1201 043f 4A010000 		.4byte	.LASF42
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 51


 1202 0443 01       		.byte	0x1
 1203 0444 4606     		.2byte	0x646
 1204 0446 01       		.byte	0x1
 1205 0447 00000000 		.4byte	.LFB16
 1206 044b 02000000 		.4byte	.LFE16
 1207 044f 02       		.byte	0x2
 1208 0450 7D       		.byte	0x7d
 1209 0451 00       		.sleb128 0
 1210 0452 01       		.byte	0x1
 1211 0453 66040000 		.4byte	0x466
 1212 0457 0E       		.uleb128 0xe
 1213 0458 DC000000 		.4byte	.LASF43
 1214 045c 01       		.byte	0x1
 1215 045d 4606     		.2byte	0x646
 1216 045f 6F000000 		.4byte	0x6f
 1217 0463 01       		.byte	0x1
 1218 0464 50       		.byte	0x50
 1219 0465 00       		.byte	0
 1220 0466 18       		.uleb128 0x18
 1221 0467 E0010000 		.4byte	.LASF51
 1222 046b 01       		.byte	0x1
 1223 046c 1C       		.byte	0x1c
 1224 046d 6F000000 		.4byte	0x6f
 1225 0471 01       		.byte	0x1
 1226 0472 05       		.byte	0x5
 1227 0473 03       		.byte	0x3
 1228 0474 00000000 		.4byte	TelemUART_initVar
 1229 0478 19       		.uleb128 0x19
 1230 0479 01       		.byte	0x1
 1231 047a F2010000 		.4byte	.LASF52
 1232 047e 04       		.byte	0x4
 1233 047f 73       		.byte	0x73
 1234 0480 01       		.byte	0x1
 1235 0481 6F000000 		.4byte	0x6f
 1236 0485 01       		.byte	0x1
 1237 0486 1A       		.uleb128 0x1a
 1238 0487 01       		.byte	0x1
 1239 0488 91030000 		.4byte	.LASF44
 1240 048c 03       		.byte	0x3
 1241 048d 23       		.byte	0x23
 1242 048e 01       		.byte	0x1
 1243 048f 01       		.byte	0x1
 1244 0490 1B       		.uleb128 0x1b
 1245 0491 01       		.byte	0x1
 1246 0492 61020000 		.4byte	.LASF53
 1247 0496 04       		.byte	0x4
 1248 0497 74       		.byte	0x74
 1249 0498 01       		.byte	0x1
 1250 0499 01       		.byte	0x1
 1251 049a A4040000 		.4byte	0x4a4
 1252 049e 1C       		.uleb128 0x1c
 1253 049f 6F000000 		.4byte	0x6f
 1254 04a3 00       		.byte	0
 1255 04a4 1A       		.uleb128 0x1a
 1256 04a5 01       		.byte	0x1
 1257 04a6 C4000000 		.4byte	.LASF45
 1258 04aa 03       		.byte	0x3
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 52


 1259 04ab 27       		.byte	0x27
 1260 04ac 01       		.byte	0x1
 1261 04ad 01       		.byte	0x1
 1262 04ae 00       		.byte	0
 1263              		.section	.debug_abbrev,"",%progbits
 1264              	.Ldebug_abbrev0:
 1265 0000 01       		.uleb128 0x1
 1266 0001 11       		.uleb128 0x11
 1267 0002 01       		.byte	0x1
 1268 0003 25       		.uleb128 0x25
 1269 0004 0E       		.uleb128 0xe
 1270 0005 13       		.uleb128 0x13
 1271 0006 0B       		.uleb128 0xb
 1272 0007 03       		.uleb128 0x3
 1273 0008 0E       		.uleb128 0xe
 1274 0009 1B       		.uleb128 0x1b
 1275 000a 0E       		.uleb128 0xe
 1276 000b 55       		.uleb128 0x55
 1277 000c 06       		.uleb128 0x6
 1278 000d 11       		.uleb128 0x11
 1279 000e 01       		.uleb128 0x1
 1280 000f 52       		.uleb128 0x52
 1281 0010 01       		.uleb128 0x1
 1282 0011 10       		.uleb128 0x10
 1283 0012 06       		.uleb128 0x6
 1284 0013 00       		.byte	0
 1285 0014 00       		.byte	0
 1286 0015 02       		.uleb128 0x2
 1287 0016 24       		.uleb128 0x24
 1288 0017 00       		.byte	0
 1289 0018 0B       		.uleb128 0xb
 1290 0019 0B       		.uleb128 0xb
 1291 001a 3E       		.uleb128 0x3e
 1292 001b 0B       		.uleb128 0xb
 1293 001c 03       		.uleb128 0x3
 1294 001d 0E       		.uleb128 0xe
 1295 001e 00       		.byte	0
 1296 001f 00       		.byte	0
 1297 0020 03       		.uleb128 0x3
 1298 0021 24       		.uleb128 0x24
 1299 0022 00       		.byte	0
 1300 0023 0B       		.uleb128 0xb
 1301 0024 0B       		.uleb128 0xb
 1302 0025 3E       		.uleb128 0x3e
 1303 0026 0B       		.uleb128 0xb
 1304 0027 03       		.uleb128 0x3
 1305 0028 08       		.uleb128 0x8
 1306 0029 00       		.byte	0
 1307 002a 00       		.byte	0
 1308 002b 04       		.uleb128 0x4
 1309 002c 16       		.uleb128 0x16
 1310 002d 00       		.byte	0
 1311 002e 03       		.uleb128 0x3
 1312 002f 0E       		.uleb128 0xe
 1313 0030 3A       		.uleb128 0x3a
 1314 0031 0B       		.uleb128 0xb
 1315 0032 3B       		.uleb128 0x3b
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 53


 1316 0033 0B       		.uleb128 0xb
 1317 0034 49       		.uleb128 0x49
 1318 0035 13       		.uleb128 0x13
 1319 0036 00       		.byte	0
 1320 0037 00       		.byte	0
 1321 0038 05       		.uleb128 0x5
 1322 0039 35       		.uleb128 0x35
 1323 003a 00       		.byte	0
 1324 003b 49       		.uleb128 0x49
 1325 003c 13       		.uleb128 0x13
 1326 003d 00       		.byte	0
 1327 003e 00       		.byte	0
 1328 003f 06       		.uleb128 0x6
 1329 0040 2E       		.uleb128 0x2e
 1330 0041 00       		.byte	0
 1331 0042 3F       		.uleb128 0x3f
 1332 0043 0C       		.uleb128 0xc
 1333 0044 03       		.uleb128 0x3
 1334 0045 0E       		.uleb128 0xe
 1335 0046 3A       		.uleb128 0x3a
 1336 0047 0B       		.uleb128 0xb
 1337 0048 3B       		.uleb128 0x3b
 1338 0049 0B       		.uleb128 0xb
 1339 004a 27       		.uleb128 0x27
 1340 004b 0C       		.uleb128 0xc
 1341 004c 11       		.uleb128 0x11
 1342 004d 01       		.uleb128 0x1
 1343 004e 12       		.uleb128 0x12
 1344 004f 01       		.uleb128 0x1
 1345 0050 40       		.uleb128 0x40
 1346 0051 0A       		.uleb128 0xa
 1347 0052 9742     		.uleb128 0x2117
 1348 0054 0C       		.uleb128 0xc
 1349 0055 00       		.byte	0
 1350 0056 00       		.byte	0
 1351 0057 07       		.uleb128 0x7
 1352 0058 2E       		.uleb128 0x2e
 1353 0059 01       		.byte	0x1
 1354 005a 3F       		.uleb128 0x3f
 1355 005b 0C       		.uleb128 0xc
 1356 005c 03       		.uleb128 0x3
 1357 005d 0E       		.uleb128 0xe
 1358 005e 3A       		.uleb128 0x3a
 1359 005f 0B       		.uleb128 0xb
 1360 0060 3B       		.uleb128 0x3b
 1361 0061 0B       		.uleb128 0xb
 1362 0062 27       		.uleb128 0x27
 1363 0063 0C       		.uleb128 0xc
 1364 0064 11       		.uleb128 0x11
 1365 0065 01       		.uleb128 0x1
 1366 0066 12       		.uleb128 0x12
 1367 0067 01       		.uleb128 0x1
 1368 0068 40       		.uleb128 0x40
 1369 0069 06       		.uleb128 0x6
 1370 006a 9742     		.uleb128 0x2117
 1371 006c 0C       		.uleb128 0xc
 1372 006d 01       		.uleb128 0x1
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 54


 1373 006e 13       		.uleb128 0x13
 1374 006f 00       		.byte	0
 1375 0070 00       		.byte	0
 1376 0071 08       		.uleb128 0x8
 1377 0072 34       		.uleb128 0x34
 1378 0073 00       		.byte	0
 1379 0074 03       		.uleb128 0x3
 1380 0075 0E       		.uleb128 0xe
 1381 0076 3A       		.uleb128 0x3a
 1382 0077 0B       		.uleb128 0xb
 1383 0078 3B       		.uleb128 0x3b
 1384 0079 0B       		.uleb128 0xb
 1385 007a 49       		.uleb128 0x49
 1386 007b 13       		.uleb128 0x13
 1387 007c 02       		.uleb128 0x2
 1388 007d 06       		.uleb128 0x6
 1389 007e 00       		.byte	0
 1390 007f 00       		.byte	0
 1391 0080 09       		.uleb128 0x9
 1392 0081 898201   		.uleb128 0x4109
 1393 0084 00       		.byte	0
 1394 0085 11       		.uleb128 0x11
 1395 0086 01       		.uleb128 0x1
 1396 0087 31       		.uleb128 0x31
 1397 0088 13       		.uleb128 0x13
 1398 0089 00       		.byte	0
 1399 008a 00       		.byte	0
 1400 008b 0A       		.uleb128 0xa
 1401 008c 898201   		.uleb128 0x4109
 1402 008f 01       		.byte	0x1
 1403 0090 11       		.uleb128 0x11
 1404 0091 01       		.uleb128 0x1
 1405 0092 31       		.uleb128 0x31
 1406 0093 13       		.uleb128 0x13
 1407 0094 00       		.byte	0
 1408 0095 00       		.byte	0
 1409 0096 0B       		.uleb128 0xb
 1410 0097 8A8201   		.uleb128 0x410a
 1411 009a 00       		.byte	0
 1412 009b 02       		.uleb128 0x2
 1413 009c 0A       		.uleb128 0xa
 1414 009d 9142     		.uleb128 0x2111
 1415 009f 0A       		.uleb128 0xa
 1416 00a0 00       		.byte	0
 1417 00a1 00       		.byte	0
 1418 00a2 0C       		.uleb128 0xc
 1419 00a3 2E       		.uleb128 0x2e
 1420 00a4 00       		.byte	0
 1421 00a5 3F       		.uleb128 0x3f
 1422 00a6 0C       		.uleb128 0xc
 1423 00a7 03       		.uleb128 0x3
 1424 00a8 0E       		.uleb128 0xe
 1425 00a9 3A       		.uleb128 0x3a
 1426 00aa 0B       		.uleb128 0xb
 1427 00ab 3B       		.uleb128 0x3b
 1428 00ac 05       		.uleb128 0x5
 1429 00ad 27       		.uleb128 0x27
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 55


 1430 00ae 0C       		.uleb128 0xc
 1431 00af 49       		.uleb128 0x49
 1432 00b0 13       		.uleb128 0x13
 1433 00b1 11       		.uleb128 0x11
 1434 00b2 01       		.uleb128 0x1
 1435 00b3 12       		.uleb128 0x12
 1436 00b4 01       		.uleb128 0x1
 1437 00b5 40       		.uleb128 0x40
 1438 00b6 0A       		.uleb128 0xa
 1439 00b7 9742     		.uleb128 0x2117
 1440 00b9 0C       		.uleb128 0xc
 1441 00ba 00       		.byte	0
 1442 00bb 00       		.byte	0
 1443 00bc 0D       		.uleb128 0xd
 1444 00bd 2E       		.uleb128 0x2e
 1445 00be 01       		.byte	0x1
 1446 00bf 3F       		.uleb128 0x3f
 1447 00c0 0C       		.uleb128 0xc
 1448 00c1 03       		.uleb128 0x3
 1449 00c2 0E       		.uleb128 0xe
 1450 00c3 3A       		.uleb128 0x3a
 1451 00c4 0B       		.uleb128 0xb
 1452 00c5 3B       		.uleb128 0x3b
 1453 00c6 05       		.uleb128 0x5
 1454 00c7 27       		.uleb128 0x27
 1455 00c8 0C       		.uleb128 0xc
 1456 00c9 11       		.uleb128 0x11
 1457 00ca 01       		.uleb128 0x1
 1458 00cb 12       		.uleb128 0x12
 1459 00cc 01       		.uleb128 0x1
 1460 00cd 40       		.uleb128 0x40
 1461 00ce 0A       		.uleb128 0xa
 1462 00cf 9742     		.uleb128 0x2117
 1463 00d1 0C       		.uleb128 0xc
 1464 00d2 01       		.uleb128 0x1
 1465 00d3 13       		.uleb128 0x13
 1466 00d4 00       		.byte	0
 1467 00d5 00       		.byte	0
 1468 00d6 0E       		.uleb128 0xe
 1469 00d7 05       		.uleb128 0x5
 1470 00d8 00       		.byte	0
 1471 00d9 03       		.uleb128 0x3
 1472 00da 0E       		.uleb128 0xe
 1473 00db 3A       		.uleb128 0x3a
 1474 00dc 0B       		.uleb128 0xb
 1475 00dd 3B       		.uleb128 0x3b
 1476 00de 05       		.uleb128 0x5
 1477 00df 49       		.uleb128 0x49
 1478 00e0 13       		.uleb128 0x13
 1479 00e1 02       		.uleb128 0x2
 1480 00e2 0A       		.uleb128 0xa
 1481 00e3 00       		.byte	0
 1482 00e4 00       		.byte	0
 1483 00e5 0F       		.uleb128 0xf
 1484 00e6 2E       		.uleb128 0x2e
 1485 00e7 01       		.byte	0x1
 1486 00e8 3F       		.uleb128 0x3f
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 56


 1487 00e9 0C       		.uleb128 0xc
 1488 00ea 03       		.uleb128 0x3
 1489 00eb 0E       		.uleb128 0xe
 1490 00ec 3A       		.uleb128 0x3a
 1491 00ed 0B       		.uleb128 0xb
 1492 00ee 3B       		.uleb128 0x3b
 1493 00ef 05       		.uleb128 0x5
 1494 00f0 27       		.uleb128 0x27
 1495 00f1 0C       		.uleb128 0xc
 1496 00f2 11       		.uleb128 0x11
 1497 00f3 01       		.uleb128 0x1
 1498 00f4 12       		.uleb128 0x12
 1499 00f5 01       		.uleb128 0x1
 1500 00f6 40       		.uleb128 0x40
 1501 00f7 06       		.uleb128 0x6
 1502 00f8 9742     		.uleb128 0x2117
 1503 00fa 0C       		.uleb128 0xc
 1504 00fb 01       		.uleb128 0x1
 1505 00fc 13       		.uleb128 0x13
 1506 00fd 00       		.byte	0
 1507 00fe 00       		.byte	0
 1508 00ff 10       		.uleb128 0x10
 1509 0100 05       		.uleb128 0x5
 1510 0101 00       		.byte	0
 1511 0102 03       		.uleb128 0x3
 1512 0103 0E       		.uleb128 0xe
 1513 0104 3A       		.uleb128 0x3a
 1514 0105 0B       		.uleb128 0xb
 1515 0106 3B       		.uleb128 0x3b
 1516 0107 05       		.uleb128 0x5
 1517 0108 49       		.uleb128 0x49
 1518 0109 13       		.uleb128 0x13
 1519 010a 02       		.uleb128 0x2
 1520 010b 06       		.uleb128 0x6
 1521 010c 00       		.byte	0
 1522 010d 00       		.byte	0
 1523 010e 11       		.uleb128 0x11
 1524 010f 34       		.uleb128 0x34
 1525 0110 00       		.byte	0
 1526 0111 03       		.uleb128 0x3
 1527 0112 0E       		.uleb128 0xe
 1528 0113 3A       		.uleb128 0x3a
 1529 0114 0B       		.uleb128 0xb
 1530 0115 3B       		.uleb128 0x3b
 1531 0116 05       		.uleb128 0x5
 1532 0117 49       		.uleb128 0x49
 1533 0118 13       		.uleb128 0x13
 1534 0119 02       		.uleb128 0x2
 1535 011a 06       		.uleb128 0x6
 1536 011b 00       		.byte	0
 1537 011c 00       		.byte	0
 1538 011d 12       		.uleb128 0x12
 1539 011e 0F       		.uleb128 0xf
 1540 011f 00       		.byte	0
 1541 0120 0B       		.uleb128 0xb
 1542 0121 0B       		.uleb128 0xb
 1543 0122 49       		.uleb128 0x49
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 57


 1544 0123 13       		.uleb128 0x13
 1545 0124 00       		.byte	0
 1546 0125 00       		.byte	0
 1547 0126 13       		.uleb128 0x13
 1548 0127 26       		.uleb128 0x26
 1549 0128 00       		.byte	0
 1550 0129 49       		.uleb128 0x49
 1551 012a 13       		.uleb128 0x13
 1552 012b 00       		.byte	0
 1553 012c 00       		.byte	0
 1554 012d 14       		.uleb128 0x14
 1555 012e 898201   		.uleb128 0x4109
 1556 0131 01       		.byte	0x1
 1557 0132 11       		.uleb128 0x11
 1558 0133 01       		.uleb128 0x1
 1559 0134 31       		.uleb128 0x31
 1560 0135 13       		.uleb128 0x13
 1561 0136 01       		.uleb128 0x1
 1562 0137 13       		.uleb128 0x13
 1563 0138 00       		.byte	0
 1564 0139 00       		.byte	0
 1565 013a 15       		.uleb128 0x15
 1566 013b 2E       		.uleb128 0x2e
 1567 013c 01       		.byte	0x1
 1568 013d 3F       		.uleb128 0x3f
 1569 013e 0C       		.uleb128 0xc
 1570 013f 03       		.uleb128 0x3
 1571 0140 0E       		.uleb128 0xe
 1572 0141 3A       		.uleb128 0x3a
 1573 0142 0B       		.uleb128 0xb
 1574 0143 3B       		.uleb128 0x3b
 1575 0144 05       		.uleb128 0x5
 1576 0145 27       		.uleb128 0x27
 1577 0146 0C       		.uleb128 0xc
 1578 0147 49       		.uleb128 0x49
 1579 0148 13       		.uleb128 0x13
 1580 0149 11       		.uleb128 0x11
 1581 014a 01       		.uleb128 0x1
 1582 014b 12       		.uleb128 0x12
 1583 014c 01       		.uleb128 0x1
 1584 014d 40       		.uleb128 0x40
 1585 014e 06       		.uleb128 0x6
 1586 014f 9742     		.uleb128 0x2117
 1587 0151 0C       		.uleb128 0xc
 1588 0152 01       		.uleb128 0x1
 1589 0153 13       		.uleb128 0x13
 1590 0154 00       		.byte	0
 1591 0155 00       		.byte	0
 1592 0156 16       		.uleb128 0x16
 1593 0157 0B       		.uleb128 0xb
 1594 0158 01       		.byte	0x1
 1595 0159 11       		.uleb128 0x11
 1596 015a 01       		.uleb128 0x1
 1597 015b 12       		.uleb128 0x12
 1598 015c 01       		.uleb128 0x1
 1599 015d 00       		.byte	0
 1600 015e 00       		.byte	0
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 58


 1601 015f 17       		.uleb128 0x17
 1602 0160 34       		.uleb128 0x34
 1603 0161 00       		.byte	0
 1604 0162 03       		.uleb128 0x3
 1605 0163 0E       		.uleb128 0xe
 1606 0164 3A       		.uleb128 0x3a
 1607 0165 0B       		.uleb128 0xb
 1608 0166 3B       		.uleb128 0x3b
 1609 0167 05       		.uleb128 0x5
 1610 0168 49       		.uleb128 0x49
 1611 0169 13       		.uleb128 0x13
 1612 016a 02       		.uleb128 0x2
 1613 016b 0A       		.uleb128 0xa
 1614 016c 00       		.byte	0
 1615 016d 00       		.byte	0
 1616 016e 18       		.uleb128 0x18
 1617 016f 34       		.uleb128 0x34
 1618 0170 00       		.byte	0
 1619 0171 03       		.uleb128 0x3
 1620 0172 0E       		.uleb128 0xe
 1621 0173 3A       		.uleb128 0x3a
 1622 0174 0B       		.uleb128 0xb
 1623 0175 3B       		.uleb128 0x3b
 1624 0176 0B       		.uleb128 0xb
 1625 0177 49       		.uleb128 0x49
 1626 0178 13       		.uleb128 0x13
 1627 0179 3F       		.uleb128 0x3f
 1628 017a 0C       		.uleb128 0xc
 1629 017b 02       		.uleb128 0x2
 1630 017c 0A       		.uleb128 0xa
 1631 017d 00       		.byte	0
 1632 017e 00       		.byte	0
 1633 017f 19       		.uleb128 0x19
 1634 0180 2E       		.uleb128 0x2e
 1635 0181 00       		.byte	0
 1636 0182 3F       		.uleb128 0x3f
 1637 0183 0C       		.uleb128 0xc
 1638 0184 03       		.uleb128 0x3
 1639 0185 0E       		.uleb128 0xe
 1640 0186 3A       		.uleb128 0x3a
 1641 0187 0B       		.uleb128 0xb
 1642 0188 3B       		.uleb128 0x3b
 1643 0189 0B       		.uleb128 0xb
 1644 018a 27       		.uleb128 0x27
 1645 018b 0C       		.uleb128 0xc
 1646 018c 49       		.uleb128 0x49
 1647 018d 13       		.uleb128 0x13
 1648 018e 3C       		.uleb128 0x3c
 1649 018f 0C       		.uleb128 0xc
 1650 0190 00       		.byte	0
 1651 0191 00       		.byte	0
 1652 0192 1A       		.uleb128 0x1a
 1653 0193 2E       		.uleb128 0x2e
 1654 0194 00       		.byte	0
 1655 0195 3F       		.uleb128 0x3f
 1656 0196 0C       		.uleb128 0xc
 1657 0197 03       		.uleb128 0x3
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 59


 1658 0198 0E       		.uleb128 0xe
 1659 0199 3A       		.uleb128 0x3a
 1660 019a 0B       		.uleb128 0xb
 1661 019b 3B       		.uleb128 0x3b
 1662 019c 0B       		.uleb128 0xb
 1663 019d 27       		.uleb128 0x27
 1664 019e 0C       		.uleb128 0xc
 1665 019f 3C       		.uleb128 0x3c
 1666 01a0 0C       		.uleb128 0xc
 1667 01a1 00       		.byte	0
 1668 01a2 00       		.byte	0
 1669 01a3 1B       		.uleb128 0x1b
 1670 01a4 2E       		.uleb128 0x2e
 1671 01a5 01       		.byte	0x1
 1672 01a6 3F       		.uleb128 0x3f
 1673 01a7 0C       		.uleb128 0xc
 1674 01a8 03       		.uleb128 0x3
 1675 01a9 0E       		.uleb128 0xe
 1676 01aa 3A       		.uleb128 0x3a
 1677 01ab 0B       		.uleb128 0xb
 1678 01ac 3B       		.uleb128 0x3b
 1679 01ad 0B       		.uleb128 0xb
 1680 01ae 27       		.uleb128 0x27
 1681 01af 0C       		.uleb128 0xc
 1682 01b0 3C       		.uleb128 0x3c
 1683 01b1 0C       		.uleb128 0xc
 1684 01b2 01       		.uleb128 0x1
 1685 01b3 13       		.uleb128 0x13
 1686 01b4 00       		.byte	0
 1687 01b5 00       		.byte	0
 1688 01b6 1C       		.uleb128 0x1c
 1689 01b7 05       		.uleb128 0x5
 1690 01b8 00       		.byte	0
 1691 01b9 49       		.uleb128 0x49
 1692 01ba 13       		.uleb128 0x13
 1693 01bb 00       		.byte	0
 1694 01bc 00       		.byte	0
 1695 01bd 00       		.byte	0
 1696              		.section	.debug_loc,"",%progbits
 1697              	.Ldebug_loc0:
 1698              	.LLST0:
 1699 0000 00000000 		.4byte	.LFB2
 1700 0004 02000000 		.4byte	.LCFI0
 1701 0008 0200     		.2byte	0x2
 1702 000a 7D       		.byte	0x7d
 1703 000b 00       		.sleb128 0
 1704 000c 02000000 		.4byte	.LCFI0
 1705 0010 24000000 		.4byte	.LFE2
 1706 0014 0200     		.2byte	0x2
 1707 0016 7D       		.byte	0x7d
 1708 0017 08       		.sleb128 8
 1709 0018 00000000 		.4byte	0
 1710 001c 00000000 		.4byte	0
 1711              	.LLST1:
 1712 0020 0E000000 		.4byte	.LVL1
 1713 0024 15000000 		.4byte	.LVL2-1
 1714 0028 0100     		.2byte	0x1
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 60


 1715 002a 50       		.byte	0x50
 1716 002b 15000000 		.4byte	.LVL2-1
 1717 002f 1C000000 		.4byte	.LVL4
 1718 0033 0100     		.2byte	0x1
 1719 0035 54       		.byte	0x54
 1720 0036 00000000 		.4byte	0
 1721 003a 00000000 		.4byte	0
 1722              	.LLST2:
 1723 003e 00000000 		.4byte	.LFB0
 1724 0042 02000000 		.4byte	.LCFI1
 1725 0046 0200     		.2byte	0x2
 1726 0048 7D       		.byte	0x7d
 1727 0049 00       		.sleb128 0
 1728 004a 02000000 		.4byte	.LCFI1
 1729 004e 1C000000 		.4byte	.LFE0
 1730 0052 0200     		.2byte	0x2
 1731 0054 7D       		.byte	0x7d
 1732 0055 08       		.sleb128 8
 1733 0056 00000000 		.4byte	0
 1734 005a 00000000 		.4byte	0
 1735              	.LLST3:
 1736 005e 00000000 		.4byte	.LFB3
 1737 0062 02000000 		.4byte	.LCFI2
 1738 0066 0200     		.2byte	0x2
 1739 0068 7D       		.byte	0x7d
 1740 0069 00       		.sleb128 0
 1741 006a 02000000 		.4byte	.LCFI2
 1742 006e 24000000 		.4byte	.LFE3
 1743 0072 0200     		.2byte	0x2
 1744 0074 7D       		.byte	0x7d
 1745 0075 08       		.sleb128 8
 1746 0076 00000000 		.4byte	0
 1747 007a 00000000 		.4byte	0
 1748              	.LLST4:
 1749 007e 08000000 		.4byte	.LVL8
 1750 0082 0B000000 		.4byte	.LVL9-1
 1751 0086 0100     		.2byte	0x1
 1752 0088 50       		.byte	0x50
 1753 0089 0B000000 		.4byte	.LVL9-1
 1754 008d 1C000000 		.4byte	.LVL11
 1755 0091 0100     		.2byte	0x1
 1756 0093 54       		.byte	0x54
 1757 0094 00000000 		.4byte	0
 1758 0098 00000000 		.4byte	0
 1759              	.LLST5:
 1760 009c 00000000 		.4byte	.LFB7
 1761 00a0 02000000 		.4byte	.LCFI3
 1762 00a4 0200     		.2byte	0x2
 1763 00a6 7D       		.byte	0x7d
 1764 00a7 00       		.sleb128 0
 1765 00a8 02000000 		.4byte	.LCFI3
 1766 00ac 18000000 		.4byte	.LFE7
 1767 00b0 0200     		.2byte	0x2
 1768 00b2 7D       		.byte	0x7d
 1769 00b3 04       		.sleb128 4
 1770 00b4 00000000 		.4byte	0
 1771 00b8 00000000 		.4byte	0
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 61


 1772              	.LLST6:
 1773 00bc 00000000 		.4byte	.LFB9
 1774 00c0 02000000 		.4byte	.LCFI4
 1775 00c4 0200     		.2byte	0x2
 1776 00c6 7D       		.byte	0x7d
 1777 00c7 00       		.sleb128 0
 1778 00c8 02000000 		.4byte	.LCFI4
 1779 00cc 18000000 		.4byte	.LFE9
 1780 00d0 0200     		.2byte	0x2
 1781 00d2 7D       		.byte	0x7d
 1782 00d3 04       		.sleb128 4
 1783 00d4 00000000 		.4byte	0
 1784 00d8 00000000 		.4byte	0
 1785              	.LLST7:
 1786 00dc 00000000 		.4byte	.LFB10
 1787 00e0 02000000 		.4byte	.LCFI5
 1788 00e4 0200     		.2byte	0x2
 1789 00e6 7D       		.byte	0x7d
 1790 00e7 00       		.sleb128 0
 1791 00e8 02000000 		.4byte	.LCFI5
 1792 00ec 24000000 		.4byte	.LFE10
 1793 00f0 0200     		.2byte	0x2
 1794 00f2 7D       		.byte	0x7d
 1795 00f3 10       		.sleb128 16
 1796 00f4 00000000 		.4byte	0
 1797 00f8 00000000 		.4byte	0
 1798              	.LLST8:
 1799 00fc 00000000 		.4byte	.LVL16
 1800 0100 08000000 		.4byte	.LVL17
 1801 0104 0100     		.2byte	0x1
 1802 0106 50       		.byte	0x50
 1803 0107 08000000 		.4byte	.LVL17
 1804 010b 1E000000 		.4byte	.LVL23
 1805 010f 0100     		.2byte	0x1
 1806 0111 55       		.byte	0x55
 1807 0112 1E000000 		.4byte	.LVL23
 1808 0116 24000000 		.4byte	.LFE10
 1809 011a 0400     		.2byte	0x4
 1810 011c F3       		.byte	0xf3
 1811 011d 01       		.uleb128 0x1
 1812 011e 50       		.byte	0x50
 1813 011f 9F       		.byte	0x9f
 1814 0120 00000000 		.4byte	0
 1815 0124 00000000 		.4byte	0
 1816              	.LLST9:
 1817 0128 00000000 		.4byte	.LVL16
 1818 012c 0E000000 		.4byte	.LVL18
 1819 0130 0200     		.2byte	0x2
 1820 0132 30       		.byte	0x30
 1821 0133 9F       		.byte	0x9f
 1822 0134 0E000000 		.4byte	.LVL18
 1823 0138 16000000 		.4byte	.LVL19
 1824 013c 0100     		.2byte	0x1
 1825 013e 54       		.byte	0x54
 1826 013f 16000000 		.4byte	.LVL19
 1827 0143 1C000000 		.4byte	.LVL21
 1828 0147 0300     		.2byte	0x3
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 62


 1829 0149 74       		.byte	0x74
 1830 014a 7F       		.sleb128 -1
 1831 014b 9F       		.byte	0x9f
 1832 014c 1C000000 		.4byte	.LVL21
 1833 0150 1E000000 		.4byte	.LVL22
 1834 0154 0100     		.2byte	0x1
 1835 0156 54       		.byte	0x54
 1836 0157 00000000 		.4byte	0
 1837 015b 00000000 		.4byte	0
 1838              	.LLST10:
 1839 015f 00000000 		.4byte	.LFB11
 1840 0163 02000000 		.4byte	.LCFI6
 1841 0167 0200     		.2byte	0x2
 1842 0169 7D       		.byte	0x7d
 1843 016a 00       		.sleb128 0
 1844 016b 02000000 		.4byte	.LCFI6
 1845 016f 28000000 		.4byte	.LFE11
 1846 0173 0200     		.2byte	0x2
 1847 0175 7D       		.byte	0x7d
 1848 0176 10       		.sleb128 16
 1849 0177 00000000 		.4byte	0
 1850 017b 00000000 		.4byte	0
 1851              	.LLST11:
 1852 017f 00000000 		.4byte	.LVL24
 1853 0183 08000000 		.4byte	.LVL25
 1854 0187 0100     		.2byte	0x1
 1855 0189 50       		.byte	0x50
 1856 018a 08000000 		.4byte	.LVL25
 1857 018e 20000000 		.4byte	.LVL28
 1858 0192 0100     		.2byte	0x1
 1859 0194 55       		.byte	0x55
 1860 0195 20000000 		.4byte	.LVL28
 1861 0199 28000000 		.4byte	.LFE11
 1862 019d 0400     		.2byte	0x4
 1863 019f F3       		.byte	0xf3
 1864 01a0 01       		.uleb128 0x1
 1865 01a1 50       		.byte	0x50
 1866 01a2 9F       		.byte	0x9f
 1867 01a3 00000000 		.4byte	0
 1868 01a7 00000000 		.4byte	0
 1869              	.LLST12:
 1870 01ab 00000000 		.4byte	.LVL24
 1871 01af 10000000 		.4byte	.LVL26
 1872 01b3 0100     		.2byte	0x1
 1873 01b5 51       		.byte	0x51
 1874 01b6 10000000 		.4byte	.LVL26
 1875 01ba 28000000 		.4byte	.LFE11
 1876 01be 0400     		.2byte	0x4
 1877 01c0 F3       		.byte	0xf3
 1878 01c1 01       		.uleb128 0x1
 1879 01c2 51       		.byte	0x51
 1880 01c3 9F       		.byte	0x9f
 1881 01c4 00000000 		.4byte	0
 1882 01c8 00000000 		.4byte	0
 1883              	.LLST13:
 1884 01cc 00000000 		.4byte	.LVL24
 1885 01d0 10000000 		.4byte	.LVL26
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 63


 1886 01d4 0200     		.2byte	0x2
 1887 01d6 30       		.byte	0x30
 1888 01d7 9F       		.byte	0x9f
 1889 01d8 00000000 		.4byte	0
 1890 01dc 00000000 		.4byte	0
 1891              	.LLST14:
 1892 01e0 00000000 		.4byte	.LFB12
 1893 01e4 02000000 		.4byte	.LCFI7
 1894 01e8 0200     		.2byte	0x2
 1895 01ea 7D       		.byte	0x7d
 1896 01eb 00       		.sleb128 0
 1897 01ec 02000000 		.4byte	.LCFI7
 1898 01f0 20000000 		.4byte	.LFE12
 1899 01f4 0200     		.2byte	0x2
 1900 01f6 7D       		.byte	0x7d
 1901 01f7 08       		.sleb128 8
 1902 01f8 00000000 		.4byte	0
 1903 01fc 00000000 		.4byte	0
 1904              	.LLST15:
 1905 0200 00000000 		.4byte	.LVL29
 1906 0204 0D000000 		.4byte	.LVL30-1
 1907 0208 0100     		.2byte	0x1
 1908 020a 50       		.byte	0x50
 1909 020b 0D000000 		.4byte	.LVL30-1
 1910 020f 20000000 		.4byte	.LFE12
 1911 0213 0400     		.2byte	0x4
 1912 0215 F3       		.byte	0xf3
 1913 0216 01       		.uleb128 0x1
 1914 0217 50       		.byte	0x50
 1915 0218 9F       		.byte	0x9f
 1916 0219 00000000 		.4byte	0
 1917 021d 00000000 		.4byte	0
 1918              	.LLST16:
 1919 0221 00000000 		.4byte	.LFB13
 1920 0225 02000000 		.4byte	.LCFI8
 1921 0229 0200     		.2byte	0x2
 1922 022b 7D       		.byte	0x7d
 1923 022c 00       		.sleb128 0
 1924 022d 02000000 		.4byte	.LCFI8
 1925 0231 18000000 		.4byte	.LFE13
 1926 0235 0200     		.2byte	0x2
 1927 0237 7D       		.byte	0x7d
 1928 0238 04       		.sleb128 4
 1929 0239 00000000 		.4byte	0
 1930 023d 00000000 		.4byte	0
 1931              	.LLST17:
 1932 0241 08000000 		.4byte	.LVL33
 1933 0245 12000000 		.4byte	.LVL34
 1934 0249 0100     		.2byte	0x1
 1935 024b 51       		.byte	0x51
 1936 024c 12000000 		.4byte	.LVL34
 1937 0250 18000000 		.4byte	.LFE13
 1938 0254 0100     		.2byte	0x1
 1939 0256 50       		.byte	0x50
 1940 0257 00000000 		.4byte	0
 1941 025b 00000000 		.4byte	0
 1942              	.LLST18:
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 64


 1943 025f 00000000 		.4byte	.LFB14
 1944 0263 02000000 		.4byte	.LCFI9
 1945 0267 0200     		.2byte	0x2
 1946 0269 7D       		.byte	0x7d
 1947 026a 00       		.sleb128 0
 1948 026b 02000000 		.4byte	.LCFI9
 1949 026f 20000000 		.4byte	.LFE14
 1950 0273 0200     		.2byte	0x2
 1951 0275 7D       		.byte	0x7d
 1952 0276 08       		.sleb128 8
 1953 0277 00000000 		.4byte	0
 1954 027b 00000000 		.4byte	0
 1955              	.LLST19:
 1956 027f 06000000 		.4byte	.LVL35
 1957 0283 19000000 		.4byte	.LVL36-1
 1958 0287 0100     		.2byte	0x1
 1959 0289 50       		.byte	0x50
 1960 028a 00000000 		.4byte	0
 1961 028e 00000000 		.4byte	0
 1962              	.LLST20:
 1963 0292 00000000 		.4byte	.LFB15
 1964 0296 02000000 		.4byte	.LCFI10
 1965 029a 0200     		.2byte	0x2
 1966 029c 7D       		.byte	0x7d
 1967 029d 00       		.sleb128 0
 1968 029e 02000000 		.4byte	.LCFI10
 1969 02a2 60000000 		.4byte	.LFE15
 1970 02a6 0200     		.2byte	0x2
 1971 02a8 7D       		.byte	0x7d
 1972 02a9 04       		.sleb128 4
 1973 02aa 00000000 		.4byte	0
 1974 02ae 00000000 		.4byte	0
 1975              	.LLST21:
 1976 02b2 00000000 		.4byte	.LVL37
 1977 02b6 34000000 		.4byte	.LVL40
 1978 02ba 0100     		.2byte	0x1
 1979 02bc 50       		.byte	0x50
 1980 02bd 34000000 		.4byte	.LVL40
 1981 02c1 40000000 		.4byte	.LVL41
 1982 02c5 0400     		.2byte	0x4
 1983 02c7 F3       		.byte	0xf3
 1984 02c8 01       		.uleb128 0x1
 1985 02c9 50       		.byte	0x50
 1986 02ca 9F       		.byte	0x9f
 1987 02cb 40000000 		.4byte	.LVL41
 1988 02cf 4E000000 		.4byte	.LVL43
 1989 02d3 0100     		.2byte	0x1
 1990 02d5 50       		.byte	0x50
 1991 02d6 4E000000 		.4byte	.LVL43
 1992 02da 60000000 		.4byte	.LFE15
 1993 02de 0400     		.2byte	0x4
 1994 02e0 F3       		.byte	0xf3
 1995 02e1 01       		.uleb128 0x1
 1996 02e2 50       		.byte	0x50
 1997 02e3 9F       		.byte	0x9f
 1998 02e4 00000000 		.4byte	0
 1999 02e8 00000000 		.4byte	0
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 65


 2000              	.LLST22:
 2001 02ec 26000000 		.4byte	.LVL38
 2002 02f0 32000000 		.4byte	.LVL39
 2003 02f4 0100     		.2byte	0x1
 2004 02f6 52       		.byte	0x52
 2005 02f7 48000000 		.4byte	.LVL42
 2006 02fb 4E000000 		.4byte	.LVL43
 2007 02ff 0100     		.2byte	0x1
 2008 0301 52       		.byte	0x52
 2009 0302 00000000 		.4byte	0
 2010 0306 00000000 		.4byte	0
 2011              		.section	.debug_aranges,"",%progbits
 2012 0000 9C000000 		.4byte	0x9c
 2013 0004 0200     		.2byte	0x2
 2014 0006 00000000 		.4byte	.Ldebug_info0
 2015 000a 04       		.byte	0x4
 2016 000b 00       		.byte	0
 2017 000c 0000     		.2byte	0
 2018 000e 0000     		.2byte	0
 2019 0010 00000000 		.4byte	.LFB1
 2020 0014 20000000 		.4byte	.LFE1-.LFB1
 2021 0018 00000000 		.4byte	.LFB2
 2022 001c 24000000 		.4byte	.LFE2-.LFB2
 2023 0020 00000000 		.4byte	.LFB0
 2024 0024 1C000000 		.4byte	.LFE0-.LFB0
 2025 0028 00000000 		.4byte	.LFB3
 2026 002c 24000000 		.4byte	.LFE3-.LFB3
 2027 0030 00000000 		.4byte	.LFB4
 2028 0034 04000000 		.4byte	.LFE4-.LFB4
 2029 0038 00000000 		.4byte	.LFB5
 2030 003c 02000000 		.4byte	.LFE5-.LFB5
 2031 0040 00000000 		.4byte	.LFB6
 2032 0044 0C000000 		.4byte	.LFE6-.LFB6
 2033 0048 00000000 		.4byte	.LFB7
 2034 004c 18000000 		.4byte	.LFE7-.LFB7
 2035 0050 00000000 		.4byte	.LFB8
 2036 0054 0C000000 		.4byte	.LFE8-.LFB8
 2037 0058 00000000 		.4byte	.LFB9
 2038 005c 18000000 		.4byte	.LFE9-.LFB9
 2039 0060 00000000 		.4byte	.LFB10
 2040 0064 24000000 		.4byte	.LFE10-.LFB10
 2041 0068 00000000 		.4byte	.LFB11
 2042 006c 28000000 		.4byte	.LFE11-.LFB11
 2043 0070 00000000 		.4byte	.LFB12
 2044 0074 20000000 		.4byte	.LFE12-.LFB12
 2045 0078 00000000 		.4byte	.LFB13
 2046 007c 18000000 		.4byte	.LFE13-.LFB13
 2047 0080 00000000 		.4byte	.LFB14
 2048 0084 20000000 		.4byte	.LFE14-.LFB14
 2049 0088 00000000 		.4byte	.LFB15
 2050 008c 60000000 		.4byte	.LFE15-.LFB15
 2051 0090 00000000 		.4byte	.LFB16
 2052 0094 02000000 		.4byte	.LFE16-.LFB16
 2053 0098 00000000 		.4byte	0
 2054 009c 00000000 		.4byte	0
 2055              		.section	.debug_ranges,"",%progbits
 2056              	.Ldebug_ranges0:
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 66


 2057 0000 00000000 		.4byte	.LFB1
 2058 0004 20000000 		.4byte	.LFE1
 2059 0008 00000000 		.4byte	.LFB2
 2060 000c 24000000 		.4byte	.LFE2
 2061 0010 00000000 		.4byte	.LFB0
 2062 0014 1C000000 		.4byte	.LFE0
 2063 0018 00000000 		.4byte	.LFB3
 2064 001c 24000000 		.4byte	.LFE3
 2065 0020 00000000 		.4byte	.LFB4
 2066 0024 04000000 		.4byte	.LFE4
 2067 0028 00000000 		.4byte	.LFB5
 2068 002c 02000000 		.4byte	.LFE5
 2069 0030 00000000 		.4byte	.LFB6
 2070 0034 0C000000 		.4byte	.LFE6
 2071 0038 00000000 		.4byte	.LFB7
 2072 003c 18000000 		.4byte	.LFE7
 2073 0040 00000000 		.4byte	.LFB8
 2074 0044 0C000000 		.4byte	.LFE8
 2075 0048 00000000 		.4byte	.LFB9
 2076 004c 18000000 		.4byte	.LFE9
 2077 0050 00000000 		.4byte	.LFB10
 2078 0054 24000000 		.4byte	.LFE10
 2079 0058 00000000 		.4byte	.LFB11
 2080 005c 28000000 		.4byte	.LFE11
 2081 0060 00000000 		.4byte	.LFB12
 2082 0064 20000000 		.4byte	.LFE12
 2083 0068 00000000 		.4byte	.LFB13
 2084 006c 18000000 		.4byte	.LFE13
 2085 0070 00000000 		.4byte	.LFB14
 2086 0074 20000000 		.4byte	.LFE14
 2087 0078 00000000 		.4byte	.LFB15
 2088 007c 60000000 		.4byte	.LFE15
 2089 0080 00000000 		.4byte	.LFB16
 2090 0084 02000000 		.4byte	.LFE16
 2091 0088 00000000 		.4byte	0
 2092 008c 00000000 		.4byte	0
 2093              		.section	.debug_line,"",%progbits
 2094              	.Ldebug_line0:
 2095 0000 44020000 		.section	.debug_str,"MS",%progbits,1
 2095      02006B00 
 2095      00000201 
 2095      FB0E0D00 
 2095      01010101 
 2096              	.LASF6:
 2097 0000 6C6F6E67 		.ascii	"long long int\000"
 2097      206C6F6E 
 2097      6720696E 
 2097      7400
 2098              	.LASF47:
 2099 000e 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\TelemUART.c\000"
 2099      6E657261 
 2099      7465645F 
 2099      536F7572 
 2099      63655C50 
 2100              	.LASF40:
 2101 0033 746D7053 		.ascii	"tmpStat\000"
 2101      74617400 
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 67


 2102              	.LASF3:
 2103 003b 73686F72 		.ascii	"short unsigned int\000"
 2103      7420756E 
 2103      7369676E 
 2103      65642069 
 2103      6E7400
 2104              	.LASF31:
 2105 004e 73747269 		.ascii	"string\000"
 2105      6E6700
 2106              	.LASF48:
 2107 0055 433A5C55 		.ascii	"C:\\Users\\SNFU\\Documents\\T-50_UAV_Project\\Softw"
 2107      73657273 
 2107      5C534E46 
 2107      555C446F 
 2107      63756D65 
 2108 0083 6172655C 		.ascii	"are\\T-50_Project\\T-50_Project.cydsn\000"
 2108      542D3530 
 2108      5F50726F 
 2108      6A656374 
 2108      5C542D35 
 2109              	.LASF11:
 2110 00a7 666C6F61 		.ascii	"float\000"
 2110      7400
 2111              	.LASF7:
 2112 00ad 6C6F6E67 		.ascii	"long long unsigned int\000"
 2112      206C6F6E 
 2112      6720756E 
 2112      7369676E 
 2112      65642069 
 2113              	.LASF45:
 2114 00c4 54656C65 		.ascii	"TelemUART_IntClock_Stop\000"
 2114      6D554152 
 2114      545F496E 
 2114      74436C6F 
 2114      636B5F53 
 2115              	.LASF43:
 2116 00dc 61646472 		.ascii	"addressMode\000"
 2116      6573734D 
 2116      6F646500 
 2117              	.LASF15:
 2118 00e8 72656738 		.ascii	"reg8\000"
 2118      00
 2119              	.LASF18:
 2120 00ed 54656C65 		.ascii	"TelemUART_Start\000"
 2120      6D554152 
 2120      545F5374 
 2120      61727400 
 2121              	.LASF5:
 2122 00fd 6C6F6E67 		.ascii	"long unsigned int\000"
 2122      20756E73 
 2122      69676E65 
 2122      6420696E 
 2122      7400
 2123              	.LASF9:
 2124 010f 75696E74 		.ascii	"uint8\000"
 2124      3800
 2125              	.LASF23:
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 68


 2126 0115 636F6E74 		.ascii	"control\000"
 2126      726F6C00 
 2127              	.LASF35:
 2128 011d 54656C65 		.ascii	"TelemUART_PutCRLF\000"
 2128      6D554152 
 2128      545F5075 
 2128      7443524C 
 2128      4600
 2129              	.LASF34:
 2130 012f 62797465 		.ascii	"byteCount\000"
 2130      436F756E 
 2130      7400
 2131              	.LASF20:
 2132 0139 656E6162 		.ascii	"enableInterrupts\000"
 2132      6C65496E 
 2132      74657272 
 2132      75707473 
 2132      00
 2133              	.LASF42:
 2134 014a 54656C65 		.ascii	"TelemUART_SetTxAddressMode\000"
 2134      6D554152 
 2134      545F5365 
 2134      74547841 
 2134      64647265 
 2135              	.LASF21:
 2136 0165 54656C65 		.ascii	"TelemUART_WriteControlRegister\000"
 2136      6D554152 
 2136      545F5772 
 2136      69746543 
 2136      6F6E7472 
 2137              	.LASF29:
 2138 0184 54656C65 		.ascii	"TelemUART_PutChar\000"
 2138      6D554152 
 2138      545F5075 
 2138      74436861 
 2138      7200
 2139              	.LASF12:
 2140 0196 646F7562 		.ascii	"double\000"
 2140      6C6500
 2141              	.LASF28:
 2142 019d 54656C65 		.ascii	"TelemUART_ReadTxStatus\000"
 2142      6D554152 
 2142      545F5265 
 2142      61645478 
 2142      53746174 
 2143              	.LASF24:
 2144 01b4 696E7453 		.ascii	"intSrc\000"
 2144      726300
 2145              	.LASF38:
 2146 01bb 54656C65 		.ascii	"TelemUART_SendBreak\000"
 2146      6D554152 
 2146      545F5365 
 2146      6E644272 
 2146      65616B00 
 2147              	.LASF32:
 2148 01cf 6275665F 		.ascii	"buf_index\000"
 2148      696E6465 
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 69


 2148      7800
 2149              	.LASF10:
 2150 01d9 75696E74 		.ascii	"uint16\000"
 2150      313600
 2151              	.LASF51:
 2152 01e0 54656C65 		.ascii	"TelemUART_initVar\000"
 2152      6D554152 
 2152      545F696E 
 2152      69745661 
 2152      7200
 2153              	.LASF52:
 2154 01f2 4379456E 		.ascii	"CyEnterCriticalSection\000"
 2154      74657243 
 2154      72697469 
 2154      63616C53 
 2154      65637469 
 2155              	.LASF25:
 2156 0209 54656C65 		.ascii	"TelemUART_WriteTxData\000"
 2156      6D554152 
 2156      545F5772 
 2156      69746554 
 2156      78446174 
 2157              	.LASF8:
 2158 021f 756E7369 		.ascii	"unsigned int\000"
 2158      676E6564 
 2158      20696E74 
 2158      00
 2159              	.LASF22:
 2160 022c 54656C65 		.ascii	"TelemUART_SetTxInterruptMode\000"
 2160      6D554152 
 2160      545F5365 
 2160      74547849 
 2160      6E746572 
 2161              	.LASF37:
 2162 0249 54656C65 		.ascii	"TelemUART_ClearTxBuffer\000"
 2162      6D554152 
 2162      545F436C 
 2162      65617254 
 2162      78427566 
 2163              	.LASF53:
 2164 0261 43794578 		.ascii	"CyExitCriticalSection\000"
 2164      69744372 
 2164      69746963 
 2164      616C5365 
 2164      6374696F 
 2165              	.LASF27:
 2166 0277 54656C65 		.ascii	"TelemUART_ReadControlRegister\000"
 2166      6D554152 
 2166      545F5265 
 2166      6164436F 
 2166      6E74726F 
 2167              	.LASF49:
 2168 0295 54656C65 		.ascii	"TelemUART_Init\000"
 2168      6D554152 
 2168      545F496E 
 2168      697400
 2169              	.LASF33:
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 70


 2170 02a4 54656C65 		.ascii	"TelemUART_PutArray\000"
 2170      6D554152 
 2170      545F5075 
 2170      74417272 
 2170      617900
 2171              	.LASF1:
 2172 02b7 756E7369 		.ascii	"unsigned char\000"
 2172      676E6564 
 2172      20636861 
 2172      7200
 2173              	.LASF16:
 2174 02c5 73697A65 		.ascii	"sizetype\000"
 2174      74797065 
 2174      00
 2175              	.LASF13:
 2176 02ce 63686172 		.ascii	"char8\000"
 2176      3800
 2177              	.LASF26:
 2178 02d4 74784461 		.ascii	"txDataByte\000"
 2178      74614279 
 2178      746500
 2179              	.LASF41:
 2180 02df 74785F70 		.ascii	"tx_period\000"
 2180      6572696F 
 2180      6400
 2181              	.LASF14:
 2182 02e9 63686172 		.ascii	"char\000"
 2182      00
 2183              	.LASF39:
 2184 02ee 7265744D 		.ascii	"retMode\000"
 2184      6F646500 
 2185              	.LASF2:
 2186 02f6 73686F72 		.ascii	"short int\000"
 2186      7420696E 
 2186      7400
 2187              	.LASF46:
 2188 0300 474E5520 		.ascii	"GNU C 4.7.3 20130312 (release) [ARM/embedded-4_7-br"
 2188      4320342E 
 2188      372E3320 
 2188      32303133 
 2188      30333132 
 2189 0333 616E6368 		.ascii	"anch revision 196615]\000"
 2189      20726576 
 2189      6973696F 
 2189      6E203139 
 2189      36363135 
 2190              	.LASF50:
 2191 0349 54656C65 		.ascii	"TelemUART_GetTxBufferSize\000"
 2191      6D554152 
 2191      545F4765 
 2191      74547842 
 2191      75666665 
 2192              	.LASF4:
 2193 0363 6C6F6E67 		.ascii	"long int\000"
 2193      20696E74 
 2193      00
 2194              	.LASF30:
ARM GAS  C:\Users\SNFU\AppData\Local\Temp\cc9eKror.s 			page 71


 2195 036c 54656C65 		.ascii	"TelemUART_PutString\000"
 2195      6D554152 
 2195      545F5075 
 2195      74537472 
 2195      696E6700 
 2196              	.LASF17:
 2197 0380 54656C65 		.ascii	"TelemUART_Enable\000"
 2197      6D554152 
 2197      545F456E 
 2197      61626C65 
 2197      00
 2198              	.LASF44:
 2199 0391 54656C65 		.ascii	"TelemUART_IntClock_Start\000"
 2199      6D554152 
 2199      545F496E 
 2199      74436C6F 
 2199      636B5F53 
 2200              	.LASF0:
 2201 03aa 7369676E 		.ascii	"signed char\000"
 2201      65642063 
 2201      68617200 
 2202              	.LASF36:
 2203 03b6 73697A65 		.ascii	"size\000"
 2203      00
 2204              	.LASF19:
 2205 03bb 54656C65 		.ascii	"TelemUART_Stop\000"
 2205      6D554152 
 2205      545F5374 
 2205      6F7000
 2206              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.7.3 20130312 (release) [ARM/embedded-4_7-br
