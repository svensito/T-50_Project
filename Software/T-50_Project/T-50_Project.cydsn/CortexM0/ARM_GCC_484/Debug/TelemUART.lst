ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 4
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"TelemUART.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.TelemUART_Init,"ax",%progbits
  18              		.align	1
  19              		.global	TelemUART_Init
  20              		.code	16
  21              		.thumb_func
  22              		.type	TelemUART_Init, %function
  23              	TelemUART_Init:
  24              	.LFB1:
  25              		.file 1 ".\\Generated_Source\\PSoC4\\TelemUART.c"
   1:.\Generated_Source\PSoC4/TelemUART.c **** /*******************************************************************************
   2:.\Generated_Source\PSoC4/TelemUART.c **** * File Name: TelemUART.c
   3:.\Generated_Source\PSoC4/TelemUART.c **** * Version 2.30
   4:.\Generated_Source\PSoC4/TelemUART.c **** *
   5:.\Generated_Source\PSoC4/TelemUART.c **** * Description:
   6:.\Generated_Source\PSoC4/TelemUART.c **** *  This file provides all API functionality of the UART component
   7:.\Generated_Source\PSoC4/TelemUART.c **** *
   8:.\Generated_Source\PSoC4/TelemUART.c **** * Note:
   9:.\Generated_Source\PSoC4/TelemUART.c **** *
  10:.\Generated_Source\PSoC4/TelemUART.c **** ********************************************************************************
  11:.\Generated_Source\PSoC4/TelemUART.c **** * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  12:.\Generated_Source\PSoC4/TelemUART.c **** * You may use this file only in accordance with the license, terms, conditions,
  13:.\Generated_Source\PSoC4/TelemUART.c **** * disclaimers, and limitations in the end user license agreement accompanying
  14:.\Generated_Source\PSoC4/TelemUART.c **** * the software package with which this file was provided.
  15:.\Generated_Source\PSoC4/TelemUART.c **** *******************************************************************************/
  16:.\Generated_Source\PSoC4/TelemUART.c **** 
  17:.\Generated_Source\PSoC4/TelemUART.c **** #include "TelemUART.h"
  18:.\Generated_Source\PSoC4/TelemUART.c **** #include "CyLib.h"
  19:.\Generated_Source\PSoC4/TelemUART.c **** #if(TelemUART_INTERNAL_CLOCK_USED)
  20:.\Generated_Source\PSoC4/TelemUART.c ****     #include "TelemUART_IntClock.h"
  21:.\Generated_Source\PSoC4/TelemUART.c **** #endif /* End TelemUART_INTERNAL_CLOCK_USED */
  22:.\Generated_Source\PSoC4/TelemUART.c **** 
  23:.\Generated_Source\PSoC4/TelemUART.c **** 
  24:.\Generated_Source\PSoC4/TelemUART.c **** /***************************************
  25:.\Generated_Source\PSoC4/TelemUART.c **** * Global data allocation
  26:.\Generated_Source\PSoC4/TelemUART.c **** ***************************************/
  27:.\Generated_Source\PSoC4/TelemUART.c **** 
  28:.\Generated_Source\PSoC4/TelemUART.c **** uint8 TelemUART_initVar = 0u;
  29:.\Generated_Source\PSoC4/TelemUART.c **** #if( TelemUART_TX_ENABLED && (TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH))
  30:.\Generated_Source\PSoC4/TelemUART.c ****     volatile uint8 TelemUART_txBuffer[TelemUART_TXBUFFERSIZE];
  31:.\Generated_Source\PSoC4/TelemUART.c ****     volatile uint8 TelemUART_txBufferRead = 0u;
  32:.\Generated_Source\PSoC4/TelemUART.c ****     uint8 TelemUART_txBufferWrite = 0u;
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 2


  33:.\Generated_Source\PSoC4/TelemUART.c **** #endif /* End TelemUART_TX_ENABLED */
  34:.\Generated_Source\PSoC4/TelemUART.c **** #if( ( TelemUART_RX_ENABLED || TelemUART_HD_ENABLED ) && \
  35:.\Generated_Source\PSoC4/TelemUART.c ****      (TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH) )
  36:.\Generated_Source\PSoC4/TelemUART.c ****     volatile uint8 TelemUART_rxBuffer[TelemUART_RXBUFFERSIZE];
  37:.\Generated_Source\PSoC4/TelemUART.c ****     volatile uint8 TelemUART_rxBufferRead = 0u;
  38:.\Generated_Source\PSoC4/TelemUART.c ****     volatile uint8 TelemUART_rxBufferWrite = 0u;
  39:.\Generated_Source\PSoC4/TelemUART.c ****     volatile uint8 TelemUART_rxBufferLoopDetect = 0u;
  40:.\Generated_Source\PSoC4/TelemUART.c ****     volatile uint8 TelemUART_rxBufferOverflow = 0u;
  41:.\Generated_Source\PSoC4/TelemUART.c ****     #if (TelemUART_RXHW_ADDRESS_ENABLED)
  42:.\Generated_Source\PSoC4/TelemUART.c ****         volatile uint8 TelemUART_rxAddressMode = TelemUART_RXADDRESSMODE;
  43:.\Generated_Source\PSoC4/TelemUART.c ****         volatile uint8 TelemUART_rxAddressDetected = 0u;
  44:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* End EnableHWAddress */
  45:.\Generated_Source\PSoC4/TelemUART.c **** #endif /* End TelemUART_RX_ENABLED */
  46:.\Generated_Source\PSoC4/TelemUART.c **** 
  47:.\Generated_Source\PSoC4/TelemUART.c **** 
  48:.\Generated_Source\PSoC4/TelemUART.c **** /*******************************************************************************
  49:.\Generated_Source\PSoC4/TelemUART.c **** * Function Name: TelemUART_Start
  50:.\Generated_Source\PSoC4/TelemUART.c **** ********************************************************************************
  51:.\Generated_Source\PSoC4/TelemUART.c **** *
  52:.\Generated_Source\PSoC4/TelemUART.c **** * Summary:
  53:.\Generated_Source\PSoC4/TelemUART.c **** *  Initialize and Enable the UART component.
  54:.\Generated_Source\PSoC4/TelemUART.c **** *  Enable the clock input to enable operation.
  55:.\Generated_Source\PSoC4/TelemUART.c **** *
  56:.\Generated_Source\PSoC4/TelemUART.c **** * Parameters:
  57:.\Generated_Source\PSoC4/TelemUART.c **** *  None.
  58:.\Generated_Source\PSoC4/TelemUART.c **** *
  59:.\Generated_Source\PSoC4/TelemUART.c **** * Return:
  60:.\Generated_Source\PSoC4/TelemUART.c **** *  None.
  61:.\Generated_Source\PSoC4/TelemUART.c **** *
  62:.\Generated_Source\PSoC4/TelemUART.c **** * Global variables:
  63:.\Generated_Source\PSoC4/TelemUART.c **** *  The TelemUART_intiVar variable is used to indicate initial
  64:.\Generated_Source\PSoC4/TelemUART.c **** *  configuration of this component. The variable is initialized to zero (0u)
  65:.\Generated_Source\PSoC4/TelemUART.c **** *  and set to one (1u) the first time UART_Start() is called. This allows for
  66:.\Generated_Source\PSoC4/TelemUART.c **** *  component initialization without re-initialization in all subsequent calls
  67:.\Generated_Source\PSoC4/TelemUART.c **** *  to the TelemUART_Start() routine.
  68:.\Generated_Source\PSoC4/TelemUART.c **** *
  69:.\Generated_Source\PSoC4/TelemUART.c **** * Reentrant:
  70:.\Generated_Source\PSoC4/TelemUART.c **** *  No.
  71:.\Generated_Source\PSoC4/TelemUART.c **** *
  72:.\Generated_Source\PSoC4/TelemUART.c **** *******************************************************************************/
  73:.\Generated_Source\PSoC4/TelemUART.c **** void TelemUART_Start(void) 
  74:.\Generated_Source\PSoC4/TelemUART.c **** {
  75:.\Generated_Source\PSoC4/TelemUART.c ****     /* If not Initialized then initialize all required hardware and software */
  76:.\Generated_Source\PSoC4/TelemUART.c ****     if(TelemUART_initVar == 0u)
  77:.\Generated_Source\PSoC4/TelemUART.c ****     {
  78:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_Init();
  79:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_initVar = 1u;
  80:.\Generated_Source\PSoC4/TelemUART.c ****     }
  81:.\Generated_Source\PSoC4/TelemUART.c ****     TelemUART_Enable();
  82:.\Generated_Source\PSoC4/TelemUART.c **** }
  83:.\Generated_Source\PSoC4/TelemUART.c **** 
  84:.\Generated_Source\PSoC4/TelemUART.c **** 
  85:.\Generated_Source\PSoC4/TelemUART.c **** /*******************************************************************************
  86:.\Generated_Source\PSoC4/TelemUART.c **** * Function Name: TelemUART_Init
  87:.\Generated_Source\PSoC4/TelemUART.c **** ********************************************************************************
  88:.\Generated_Source\PSoC4/TelemUART.c **** *
  89:.\Generated_Source\PSoC4/TelemUART.c **** * Summary:
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 3


  90:.\Generated_Source\PSoC4/TelemUART.c **** *  Initialize component's parameters to the parameters set by user in the
  91:.\Generated_Source\PSoC4/TelemUART.c **** *  customizer of the component placed onto schematic. Usually called in
  92:.\Generated_Source\PSoC4/TelemUART.c **** *  TelemUART_Start().
  93:.\Generated_Source\PSoC4/TelemUART.c **** *
  94:.\Generated_Source\PSoC4/TelemUART.c **** * Parameters:
  95:.\Generated_Source\PSoC4/TelemUART.c **** *  None.
  96:.\Generated_Source\PSoC4/TelemUART.c **** *
  97:.\Generated_Source\PSoC4/TelemUART.c **** * Return:
  98:.\Generated_Source\PSoC4/TelemUART.c **** *  None.
  99:.\Generated_Source\PSoC4/TelemUART.c **** *
 100:.\Generated_Source\PSoC4/TelemUART.c **** *******************************************************************************/
 101:.\Generated_Source\PSoC4/TelemUART.c **** void TelemUART_Init(void) 
 102:.\Generated_Source\PSoC4/TelemUART.c **** {
  26              		.loc 1 102 0
  27              		.cfi_startproc
 103:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_RX_ENABLED || TelemUART_HD_ENABLED)
 104:.\Generated_Source\PSoC4/TelemUART.c **** 
 105:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_RX_INTERRUPT_ENABLED && (TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH))
 106:.\Generated_Source\PSoC4/TelemUART.c ****             /* Set the RX Interrupt. */
 107:.\Generated_Source\PSoC4/TelemUART.c ****             (void)CyIntSetVector(TelemUART_RX_VECT_NUM, &TelemUART_RXISR);
 108:.\Generated_Source\PSoC4/TelemUART.c ****             CyIntSetPriority(TelemUART_RX_VECT_NUM, TelemUART_RX_PRIOR_NUM);
 109:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_RX_INTERRUPT_ENABLED */
 110:.\Generated_Source\PSoC4/TelemUART.c **** 
 111:.\Generated_Source\PSoC4/TelemUART.c ****         #if (TelemUART_RXHW_ADDRESS_ENABLED)
 112:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_SetRxAddressMode(TelemUART_RXAddressMode);
 113:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_SetRxAddress1(TelemUART_RXHWADDRESS1);
 114:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_SetRxAddress2(TelemUART_RXHWADDRESS2);
 115:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_RXHW_ADDRESS_ENABLED */
 116:.\Generated_Source\PSoC4/TelemUART.c **** 
 117:.\Generated_Source\PSoC4/TelemUART.c ****         /* Init Count7 period */
 118:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_RXBITCTR_PERIOD_REG = TelemUART_RXBITCTR_INIT;
 119:.\Generated_Source\PSoC4/TelemUART.c ****         /* Configure the Initial RX interrupt mask */
 120:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_RXSTATUS_MASK_REG  = TelemUART_INIT_RX_INTERRUPTS_MASK;
 121:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* End TelemUART_RX_ENABLED || TelemUART_HD_ENABLED*/
 122:.\Generated_Source\PSoC4/TelemUART.c **** 
 123:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_TX_ENABLED)
 124:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_TX_INTERRUPT_ENABLED && (TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH))
 125:.\Generated_Source\PSoC4/TelemUART.c ****             /* Set the TX Interrupt. */
 126:.\Generated_Source\PSoC4/TelemUART.c ****             (void)CyIntSetVector(TelemUART_TX_VECT_NUM, &TelemUART_TXISR);
 127:.\Generated_Source\PSoC4/TelemUART.c ****             CyIntSetPriority(TelemUART_TX_VECT_NUM, TelemUART_TX_PRIOR_NUM);
 128:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_TX_INTERRUPT_ENABLED */
 129:.\Generated_Source\PSoC4/TelemUART.c **** 
 130:.\Generated_Source\PSoC4/TelemUART.c ****         /* Write Counter Value for TX Bit Clk Generator*/
 131:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_TXCLKGEN_DP)
 132:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_TXBITCLKGEN_CTR_REG = TelemUART_BIT_CENTER;
  28              		.loc 1 132 0
  29 0000 044B     		ldr	r3, .L2
  30 0002 0722     		mov	r2, #7
  31 0004 1A70     		strb	r2, [r3]
 133:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_TXBITCLKTX_COMPLETE_REG = (TelemUART_NUMBER_OF_DATA_BITS +
  32              		.loc 1 133 0
  33 0006 044B     		ldr	r3, .L2+4
  34 0008 4822     		mov	r2, #72
  35 000a 1A70     		strb	r2, [r3]
 134:.\Generated_Source\PSoC4/TelemUART.c ****                         TelemUART_NUMBER_OF_START_BIT) * TelemUART_OVER_SAMPLE_COUNT;
 135:.\Generated_Source\PSoC4/TelemUART.c ****         #else
 136:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_TXBITCTR_PERIOD_REG = ((TelemUART_NUMBER_OF_DATA_BITS +
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 4


 137:.\Generated_Source\PSoC4/TelemUART.c ****                         TelemUART_NUMBER_OF_START_BIT) * TelemUART_OVER_SAMPLE_8) - 1u;
 138:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_TXCLKGEN_DP */
 139:.\Generated_Source\PSoC4/TelemUART.c **** 
 140:.\Generated_Source\PSoC4/TelemUART.c ****         /* Configure the Initial TX interrupt mask */
 141:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_TX_INTERRUPT_ENABLED && (TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH))
 142:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_TXSTATUS_MASK_REG = TelemUART_TX_STS_FIFO_EMPTY;
 143:.\Generated_Source\PSoC4/TelemUART.c ****         #else
 144:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_TXSTATUS_MASK_REG = TelemUART_INIT_TX_INTERRUPTS_MASK;
  36              		.loc 1 144 0
  37 000c 034B     		ldr	r3, .L2+8
  38 000e 0022     		mov	r2, #0
  39 0010 1A70     		strb	r2, [r3]
 145:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /*End TelemUART_TX_INTERRUPT_ENABLED*/
 146:.\Generated_Source\PSoC4/TelemUART.c **** 
 147:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* End TelemUART_TX_ENABLED */
 148:.\Generated_Source\PSoC4/TelemUART.c **** 
 149:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_PARITY_TYPE_SW)  /* Write Parity to Control Register */
 150:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_WriteControlRegister( \
 151:.\Generated_Source\PSoC4/TelemUART.c ****             (TelemUART_ReadControlRegister() & (uint8)~TelemUART_CTRL_PARITY_TYPE_MASK) | \
 152:.\Generated_Source\PSoC4/TelemUART.c ****             (uint8)(TelemUART_PARITY_TYPE << TelemUART_CTRL_PARITY_TYPE0_SHIFT) );
 153:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* End TelemUART_PARITY_TYPE_SW */
 154:.\Generated_Source\PSoC4/TelemUART.c **** }
  40              		.loc 1 154 0
  41              		@ sp needed
  42 0012 7047     		bx	lr
  43              	.L3:
  44              		.align	2
  45              	.L2:
  46 0014 22000F40 		.word	1074724898
  47 0018 32000F40 		.word	1074724914
  48 001c 83000F40 		.word	1074724995
  49              		.cfi_endproc
  50              	.LFE1:
  51              		.size	TelemUART_Init, .-TelemUART_Init
  52              		.section	.text.TelemUART_Enable,"ax",%progbits
  53              		.align	1
  54              		.global	TelemUART_Enable
  55              		.code	16
  56              		.thumb_func
  57              		.type	TelemUART_Enable, %function
  58              	TelemUART_Enable:
  59              	.LFB2:
 155:.\Generated_Source\PSoC4/TelemUART.c **** 
 156:.\Generated_Source\PSoC4/TelemUART.c **** 
 157:.\Generated_Source\PSoC4/TelemUART.c **** /*******************************************************************************
 158:.\Generated_Source\PSoC4/TelemUART.c **** * Function Name: TelemUART_Enable
 159:.\Generated_Source\PSoC4/TelemUART.c **** ********************************************************************************
 160:.\Generated_Source\PSoC4/TelemUART.c **** *
 161:.\Generated_Source\PSoC4/TelemUART.c **** * Summary:
 162:.\Generated_Source\PSoC4/TelemUART.c **** *  Enables the UART block operation
 163:.\Generated_Source\PSoC4/TelemUART.c **** *
 164:.\Generated_Source\PSoC4/TelemUART.c **** * Parameters:
 165:.\Generated_Source\PSoC4/TelemUART.c **** *  None.
 166:.\Generated_Source\PSoC4/TelemUART.c **** *
 167:.\Generated_Source\PSoC4/TelemUART.c **** * Return:
 168:.\Generated_Source\PSoC4/TelemUART.c **** *  None.
 169:.\Generated_Source\PSoC4/TelemUART.c **** *
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 5


 170:.\Generated_Source\PSoC4/TelemUART.c **** * Global Variables:
 171:.\Generated_Source\PSoC4/TelemUART.c **** *  TelemUART_rxAddressDetected - set to initial state (0).
 172:.\Generated_Source\PSoC4/TelemUART.c **** *
 173:.\Generated_Source\PSoC4/TelemUART.c **** *******************************************************************************/
 174:.\Generated_Source\PSoC4/TelemUART.c **** void TelemUART_Enable(void) 
 175:.\Generated_Source\PSoC4/TelemUART.c **** {
  60              		.loc 1 175 0
  61              		.cfi_startproc
  62 0000 10B5     		push	{r4, lr}
  63              		.cfi_def_cfa_offset 8
  64              		.cfi_offset 4, -8
  65              		.cfi_offset 14, -4
 176:.\Generated_Source\PSoC4/TelemUART.c ****     uint8 enableInterrupts;
 177:.\Generated_Source\PSoC4/TelemUART.c ****     enableInterrupts = CyEnterCriticalSection();
  66              		.loc 1 177 0
  67 0002 FFF7FEFF 		bl	CyEnterCriticalSection
  68              	.LVL0:
 178:.\Generated_Source\PSoC4/TelemUART.c **** 
 179:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_RX_ENABLED || TelemUART_HD_ENABLED)
 180:.\Generated_Source\PSoC4/TelemUART.c ****         /*RX Counter (Count7) Enable */
 181:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_RXBITCTR_CONTROL_REG |= TelemUART_CNTR_ENABLE;
 182:.\Generated_Source\PSoC4/TelemUART.c ****         /* Enable the RX Interrupt. */
 183:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_RXSTATUS_ACTL_REG  |= TelemUART_INT_ENABLE;
 184:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_RX_INTERRUPT_ENABLED && (TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH))
 185:.\Generated_Source\PSoC4/TelemUART.c ****             CyIntEnable(TelemUART_RX_VECT_NUM);
 186:.\Generated_Source\PSoC4/TelemUART.c ****             #if (TelemUART_RXHW_ADDRESS_ENABLED)
 187:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_rxAddressDetected = 0u;
 188:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_RXHW_ADDRESS_ENABLED */
 189:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_RX_INTERRUPT_ENABLED */
 190:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* End TelemUART_RX_ENABLED || TelemUART_HD_ENABLED*/
 191:.\Generated_Source\PSoC4/TelemUART.c **** 
 192:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_TX_ENABLED)
 193:.\Generated_Source\PSoC4/TelemUART.c ****         /*TX Counter (DP/Count7) Enable */
 194:.\Generated_Source\PSoC4/TelemUART.c ****         #if(!TelemUART_TXCLKGEN_DP)
 195:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_TXBITCTR_CONTROL_REG |= TelemUART_CNTR_ENABLE;
 196:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_TXCLKGEN_DP */
 197:.\Generated_Source\PSoC4/TelemUART.c ****         /* Enable the TX Interrupt. */
 198:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_TXSTATUS_ACTL_REG |= TelemUART_INT_ENABLE;
  69              		.loc 1 198 0
  70 0006 064B     		ldr	r3, .L5
  71 0008 1021     		mov	r1, #16
  72 000a 1A78     		ldrb	r2, [r3]
 177:.\Generated_Source\PSoC4/TelemUART.c ****     enableInterrupts = CyEnterCriticalSection();
  73              		.loc 1 177 0
  74 000c 041C     		mov	r4, r0
  75              	.LVL1:
  76              		.loc 1 198 0
  77 000e 0A43     		orr	r2, r1
  78 0010 1A70     		strb	r2, [r3]
 199:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_TX_INTERRUPT_ENABLED && (TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH))
 200:.\Generated_Source\PSoC4/TelemUART.c ****             CyIntEnable(TelemUART_TX_VECT_NUM);
 201:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_TX_INTERRUPT_ENABLED*/
 202:.\Generated_Source\PSoC4/TelemUART.c ****      #endif /* End TelemUART_TX_ENABLED */
 203:.\Generated_Source\PSoC4/TelemUART.c **** 
 204:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_INTERNAL_CLOCK_USED)
 205:.\Generated_Source\PSoC4/TelemUART.c ****         /* Enable the clock. */
 206:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_IntClock_Start();
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 6


  79              		.loc 1 206 0
  80 0012 FFF7FEFF 		bl	TelemUART_IntClock_Start
  81              	.LVL2:
 207:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* End TelemUART_INTERNAL_CLOCK_USED */
 208:.\Generated_Source\PSoC4/TelemUART.c **** 
 209:.\Generated_Source\PSoC4/TelemUART.c ****     CyExitCriticalSection(enableInterrupts);
  82              		.loc 1 209 0
  83 0016 201C     		mov	r0, r4
  84 0018 FFF7FEFF 		bl	CyExitCriticalSection
  85              	.LVL3:
 210:.\Generated_Source\PSoC4/TelemUART.c **** }
  86              		.loc 1 210 0
  87              		@ sp needed
  88              	.LVL4:
  89 001c 10BD     		pop	{r4, pc}
  90              	.L6:
  91 001e C046     		.align	2
  92              	.L5:
  93 0020 93000F40 		.word	1074725011
  94              		.cfi_endproc
  95              	.LFE2:
  96              		.size	TelemUART_Enable, .-TelemUART_Enable
  97              		.section	.text.TelemUART_Start,"ax",%progbits
  98              		.align	1
  99              		.global	TelemUART_Start
 100              		.code	16
 101              		.thumb_func
 102              		.type	TelemUART_Start, %function
 103              	TelemUART_Start:
 104              	.LFB0:
  74:.\Generated_Source\PSoC4/TelemUART.c **** {
 105              		.loc 1 74 0
 106              		.cfi_startproc
 107 0000 10B5     		push	{r4, lr}
 108              		.cfi_def_cfa_offset 8
 109              		.cfi_offset 4, -8
 110              		.cfi_offset 14, -4
  76:.\Generated_Source\PSoC4/TelemUART.c ****     if(TelemUART_initVar == 0u)
 111              		.loc 1 76 0
 112 0002 054C     		ldr	r4, .L10
 113 0004 2378     		ldrb	r3, [r4]
 114 0006 002B     		cmp	r3, #0
 115 0008 03D1     		bne	.L8
  78:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_Init();
 116              		.loc 1 78 0
 117 000a FFF7FEFF 		bl	TelemUART_Init
 118              	.LVL5:
  79:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_initVar = 1u;
 119              		.loc 1 79 0
 120 000e 0123     		mov	r3, #1
 121 0010 2370     		strb	r3, [r4]
 122              	.L8:
  81:.\Generated_Source\PSoC4/TelemUART.c ****     TelemUART_Enable();
 123              		.loc 1 81 0
 124 0012 FFF7FEFF 		bl	TelemUART_Enable
 125              	.LVL6:
  82:.\Generated_Source\PSoC4/TelemUART.c **** }
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 7


 126              		.loc 1 82 0
 127              		@ sp needed
 128 0016 10BD     		pop	{r4, pc}
 129              	.L11:
 130              		.align	2
 131              	.L10:
 132 0018 00000000 		.word	.LANCHOR0
 133              		.cfi_endproc
 134              	.LFE0:
 135              		.size	TelemUART_Start, .-TelemUART_Start
 136              		.section	.text.TelemUART_Stop,"ax",%progbits
 137              		.align	1
 138              		.global	TelemUART_Stop
 139              		.code	16
 140              		.thumb_func
 141              		.type	TelemUART_Stop, %function
 142              	TelemUART_Stop:
 143              	.LFB3:
 211:.\Generated_Source\PSoC4/TelemUART.c **** 
 212:.\Generated_Source\PSoC4/TelemUART.c **** 
 213:.\Generated_Source\PSoC4/TelemUART.c **** /*******************************************************************************
 214:.\Generated_Source\PSoC4/TelemUART.c **** * Function Name: TelemUART_Stop
 215:.\Generated_Source\PSoC4/TelemUART.c **** ********************************************************************************
 216:.\Generated_Source\PSoC4/TelemUART.c **** *
 217:.\Generated_Source\PSoC4/TelemUART.c **** * Summary:
 218:.\Generated_Source\PSoC4/TelemUART.c **** *  Disable the UART component
 219:.\Generated_Source\PSoC4/TelemUART.c **** *
 220:.\Generated_Source\PSoC4/TelemUART.c **** * Parameters:
 221:.\Generated_Source\PSoC4/TelemUART.c **** *  None.
 222:.\Generated_Source\PSoC4/TelemUART.c **** *
 223:.\Generated_Source\PSoC4/TelemUART.c **** * Return:
 224:.\Generated_Source\PSoC4/TelemUART.c **** *  None.
 225:.\Generated_Source\PSoC4/TelemUART.c **** *
 226:.\Generated_Source\PSoC4/TelemUART.c **** *******************************************************************************/
 227:.\Generated_Source\PSoC4/TelemUART.c **** void TelemUART_Stop(void) 
 228:.\Generated_Source\PSoC4/TelemUART.c **** {
 144              		.loc 1 228 0
 145              		.cfi_startproc
 146 0000 10B5     		push	{r4, lr}
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 4, -8
 149              		.cfi_offset 14, -4
 229:.\Generated_Source\PSoC4/TelemUART.c ****     uint8 enableInterrupts;
 230:.\Generated_Source\PSoC4/TelemUART.c ****     enableInterrupts = CyEnterCriticalSection();
 150              		.loc 1 230 0
 151 0002 FFF7FEFF 		bl	CyEnterCriticalSection
 152              	.LVL7:
 153 0006 041C     		mov	r4, r0
 154              	.LVL8:
 231:.\Generated_Source\PSoC4/TelemUART.c **** 
 232:.\Generated_Source\PSoC4/TelemUART.c ****     /* Write Bit Counter Disable */
 233:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_RX_ENABLED || TelemUART_HD_ENABLED)
 234:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_RXBITCTR_CONTROL_REG &= (uint8)~TelemUART_CNTR_ENABLE;
 235:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* End TelemUART_RX_ENABLED */
 236:.\Generated_Source\PSoC4/TelemUART.c **** 
 237:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_TX_ENABLED)
 238:.\Generated_Source\PSoC4/TelemUART.c ****         #if(!TelemUART_TXCLKGEN_DP)
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 8


 239:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_TXBITCTR_CONTROL_REG &= (uint8)~TelemUART_CNTR_ENABLE;
 240:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_TXCLKGEN_DP */
 241:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* TelemUART_TX_ENABLED */
 242:.\Generated_Source\PSoC4/TelemUART.c **** 
 243:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_INTERNAL_CLOCK_USED)
 244:.\Generated_Source\PSoC4/TelemUART.c ****         /* Disable the clock. */
 245:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_IntClock_Stop();
 155              		.loc 1 245 0
 156 0008 FFF7FEFF 		bl	TelemUART_IntClock_Stop
 157              	.LVL9:
 246:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* End TelemUART_INTERNAL_CLOCK_USED */
 247:.\Generated_Source\PSoC4/TelemUART.c **** 
 248:.\Generated_Source\PSoC4/TelemUART.c ****     /* Disable internal interrupt component */
 249:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_RX_ENABLED || TelemUART_HD_ENABLED)
 250:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_RXSTATUS_ACTL_REG  &= (uint8)~TelemUART_INT_ENABLE;
 251:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_RX_INTERRUPT_ENABLED && (TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH))
 252:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_DisableRxInt();
 253:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_RX_INTERRUPT_ENABLED */
 254:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* End TelemUART_RX_ENABLED */
 255:.\Generated_Source\PSoC4/TelemUART.c **** 
 256:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_TX_ENABLED)
 257:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_TXSTATUS_ACTL_REG &= (uint8)~TelemUART_INT_ENABLE;
 158              		.loc 1 257 0
 159 000c 044B     		ldr	r3, .L13
 160 000e 1021     		mov	r1, #16
 161 0010 1A78     		ldrb	r2, [r3]
 258:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_TX_INTERRUPT_ENABLED && (TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH))
 259:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_DisableTxInt();
 260:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_TX_INTERRUPT_ENABLED */
 261:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* End TelemUART_TX_ENABLED */
 262:.\Generated_Source\PSoC4/TelemUART.c **** 
 263:.\Generated_Source\PSoC4/TelemUART.c ****     CyExitCriticalSection(enableInterrupts);
 162              		.loc 1 263 0
 163 0012 201C     		mov	r0, r4
 257:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_TXSTATUS_ACTL_REG &= (uint8)~TelemUART_INT_ENABLE;
 164              		.loc 1 257 0
 165 0014 8A43     		bic	r2, r1
 166 0016 1A70     		strb	r2, [r3]
 167              		.loc 1 263 0
 168 0018 FFF7FEFF 		bl	CyExitCriticalSection
 169              	.LVL10:
 264:.\Generated_Source\PSoC4/TelemUART.c **** }
 170              		.loc 1 264 0
 171              		@ sp needed
 172              	.LVL11:
 173 001c 10BD     		pop	{r4, pc}
 174              	.L14:
 175 001e C046     		.align	2
 176              	.L13:
 177 0020 93000F40 		.word	1074725011
 178              		.cfi_endproc
 179              	.LFE3:
 180              		.size	TelemUART_Stop, .-TelemUART_Stop
 181              		.section	.text.TelemUART_ReadControlRegister,"ax",%progbits
 182              		.align	1
 183              		.global	TelemUART_ReadControlRegister
 184              		.code	16
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 9


 185              		.thumb_func
 186              		.type	TelemUART_ReadControlRegister, %function
 187              	TelemUART_ReadControlRegister:
 188              	.LFB4:
 265:.\Generated_Source\PSoC4/TelemUART.c **** 
 266:.\Generated_Source\PSoC4/TelemUART.c **** 
 267:.\Generated_Source\PSoC4/TelemUART.c **** /*******************************************************************************
 268:.\Generated_Source\PSoC4/TelemUART.c **** * Function Name: TelemUART_ReadControlRegister
 269:.\Generated_Source\PSoC4/TelemUART.c **** ********************************************************************************
 270:.\Generated_Source\PSoC4/TelemUART.c **** *
 271:.\Generated_Source\PSoC4/TelemUART.c **** * Summary:
 272:.\Generated_Source\PSoC4/TelemUART.c **** *  Read the current state of the control register
 273:.\Generated_Source\PSoC4/TelemUART.c **** *
 274:.\Generated_Source\PSoC4/TelemUART.c **** * Parameters:
 275:.\Generated_Source\PSoC4/TelemUART.c **** *  None.
 276:.\Generated_Source\PSoC4/TelemUART.c **** *
 277:.\Generated_Source\PSoC4/TelemUART.c **** * Return:
 278:.\Generated_Source\PSoC4/TelemUART.c **** *  Current state of the control register.
 279:.\Generated_Source\PSoC4/TelemUART.c **** *
 280:.\Generated_Source\PSoC4/TelemUART.c **** *******************************************************************************/
 281:.\Generated_Source\PSoC4/TelemUART.c **** uint8 TelemUART_ReadControlRegister(void) 
 282:.\Generated_Source\PSoC4/TelemUART.c **** {
 189              		.loc 1 282 0
 190              		.cfi_startproc
 283:.\Generated_Source\PSoC4/TelemUART.c ****     #if( TelemUART_CONTROL_REG_REMOVED )
 284:.\Generated_Source\PSoC4/TelemUART.c ****         return(0u);
 285:.\Generated_Source\PSoC4/TelemUART.c ****     #else
 286:.\Generated_Source\PSoC4/TelemUART.c ****         return(TelemUART_CONTROL_REG);
 287:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* End TelemUART_CONTROL_REG_REMOVED */
 288:.\Generated_Source\PSoC4/TelemUART.c **** }
 191              		.loc 1 288 0
 192 0000 0020     		mov	r0, #0
 193              		@ sp needed
 194 0002 7047     		bx	lr
 195              		.cfi_endproc
 196              	.LFE4:
 197              		.size	TelemUART_ReadControlRegister, .-TelemUART_ReadControlRegister
 198              		.section	.text.TelemUART_WriteControlRegister,"ax",%progbits
 199              		.align	1
 200              		.global	TelemUART_WriteControlRegister
 201              		.code	16
 202              		.thumb_func
 203              		.type	TelemUART_WriteControlRegister, %function
 204              	TelemUART_WriteControlRegister:
 205              	.LFB5:
 289:.\Generated_Source\PSoC4/TelemUART.c **** 
 290:.\Generated_Source\PSoC4/TelemUART.c **** 
 291:.\Generated_Source\PSoC4/TelemUART.c **** /*******************************************************************************
 292:.\Generated_Source\PSoC4/TelemUART.c **** * Function Name: TelemUART_WriteControlRegister
 293:.\Generated_Source\PSoC4/TelemUART.c **** ********************************************************************************
 294:.\Generated_Source\PSoC4/TelemUART.c **** *
 295:.\Generated_Source\PSoC4/TelemUART.c **** * Summary:
 296:.\Generated_Source\PSoC4/TelemUART.c **** *  Writes an 8-bit value into the control register
 297:.\Generated_Source\PSoC4/TelemUART.c **** *
 298:.\Generated_Source\PSoC4/TelemUART.c **** * Parameters:
 299:.\Generated_Source\PSoC4/TelemUART.c **** *  control:  control register value
 300:.\Generated_Source\PSoC4/TelemUART.c **** *
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 10


 301:.\Generated_Source\PSoC4/TelemUART.c **** * Return:
 302:.\Generated_Source\PSoC4/TelemUART.c **** *  None.
 303:.\Generated_Source\PSoC4/TelemUART.c **** *
 304:.\Generated_Source\PSoC4/TelemUART.c **** *******************************************************************************/
 305:.\Generated_Source\PSoC4/TelemUART.c **** void  TelemUART_WriteControlRegister(uint8 control) 
 306:.\Generated_Source\PSoC4/TelemUART.c **** {
 206              		.loc 1 306 0
 207              		.cfi_startproc
 208              	.LVL12:
 307:.\Generated_Source\PSoC4/TelemUART.c ****     #if( TelemUART_CONTROL_REG_REMOVED )
 308:.\Generated_Source\PSoC4/TelemUART.c ****         if(control != 0u) { }      /* release compiler warning */
 309:.\Generated_Source\PSoC4/TelemUART.c ****     #else
 310:.\Generated_Source\PSoC4/TelemUART.c ****        TelemUART_CONTROL_REG = control;
 311:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* End TelemUART_CONTROL_REG_REMOVED */
 312:.\Generated_Source\PSoC4/TelemUART.c **** }
 209              		.loc 1 312 0
 210              		@ sp needed
 211 0000 7047     		bx	lr
 212              		.cfi_endproc
 213              	.LFE5:
 214              		.size	TelemUART_WriteControlRegister, .-TelemUART_WriteControlRegister
 215              		.section	.text.TelemUART_SetTxInterruptMode,"ax",%progbits
 216              		.align	1
 217              		.global	TelemUART_SetTxInterruptMode
 218              		.code	16
 219              		.thumb_func
 220              		.type	TelemUART_SetTxInterruptMode, %function
 221              	TelemUART_SetTxInterruptMode:
 222              	.LFB6:
 313:.\Generated_Source\PSoC4/TelemUART.c **** 
 314:.\Generated_Source\PSoC4/TelemUART.c **** 
 315:.\Generated_Source\PSoC4/TelemUART.c **** #if(TelemUART_RX_ENABLED || TelemUART_HD_ENABLED)
 316:.\Generated_Source\PSoC4/TelemUART.c **** 
 317:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_RX_INTERRUPT_ENABLED)
 318:.\Generated_Source\PSoC4/TelemUART.c **** 
 319:.\Generated_Source\PSoC4/TelemUART.c ****         /*******************************************************************************
 320:.\Generated_Source\PSoC4/TelemUART.c ****         * Function Name: TelemUART_EnableRxInt
 321:.\Generated_Source\PSoC4/TelemUART.c ****         ********************************************************************************
 322:.\Generated_Source\PSoC4/TelemUART.c ****         *
 323:.\Generated_Source\PSoC4/TelemUART.c ****         * Summary:
 324:.\Generated_Source\PSoC4/TelemUART.c ****         *  Enable RX interrupt generation
 325:.\Generated_Source\PSoC4/TelemUART.c ****         *
 326:.\Generated_Source\PSoC4/TelemUART.c ****         * Parameters:
 327:.\Generated_Source\PSoC4/TelemUART.c ****         *  None.
 328:.\Generated_Source\PSoC4/TelemUART.c ****         *
 329:.\Generated_Source\PSoC4/TelemUART.c ****         * Return:
 330:.\Generated_Source\PSoC4/TelemUART.c ****         *  None.
 331:.\Generated_Source\PSoC4/TelemUART.c ****         *
 332:.\Generated_Source\PSoC4/TelemUART.c ****         * Theory:
 333:.\Generated_Source\PSoC4/TelemUART.c ****         *  Enable the interrupt output -or- the interrupt component itself
 334:.\Generated_Source\PSoC4/TelemUART.c ****         *
 335:.\Generated_Source\PSoC4/TelemUART.c ****         *******************************************************************************/
 336:.\Generated_Source\PSoC4/TelemUART.c ****         void TelemUART_EnableRxInt(void) 
 337:.\Generated_Source\PSoC4/TelemUART.c ****         {
 338:.\Generated_Source\PSoC4/TelemUART.c ****             CyIntEnable(TelemUART_RX_VECT_NUM);
 339:.\Generated_Source\PSoC4/TelemUART.c ****         }
 340:.\Generated_Source\PSoC4/TelemUART.c **** 
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 11


 341:.\Generated_Source\PSoC4/TelemUART.c **** 
 342:.\Generated_Source\PSoC4/TelemUART.c ****         /*******************************************************************************
 343:.\Generated_Source\PSoC4/TelemUART.c ****         * Function Name: TelemUART_DisableRxInt
 344:.\Generated_Source\PSoC4/TelemUART.c ****         ********************************************************************************
 345:.\Generated_Source\PSoC4/TelemUART.c ****         *
 346:.\Generated_Source\PSoC4/TelemUART.c ****         * Summary:
 347:.\Generated_Source\PSoC4/TelemUART.c ****         *  Disable RX interrupt generation
 348:.\Generated_Source\PSoC4/TelemUART.c ****         *
 349:.\Generated_Source\PSoC4/TelemUART.c ****         * Parameters:
 350:.\Generated_Source\PSoC4/TelemUART.c ****         *  None.
 351:.\Generated_Source\PSoC4/TelemUART.c ****         *
 352:.\Generated_Source\PSoC4/TelemUART.c ****         * Return:
 353:.\Generated_Source\PSoC4/TelemUART.c ****         *  None.
 354:.\Generated_Source\PSoC4/TelemUART.c ****         *
 355:.\Generated_Source\PSoC4/TelemUART.c ****         * Theory:
 356:.\Generated_Source\PSoC4/TelemUART.c ****         *  Disable the interrupt output -or- the interrupt component itself
 357:.\Generated_Source\PSoC4/TelemUART.c ****         *
 358:.\Generated_Source\PSoC4/TelemUART.c ****         *******************************************************************************/
 359:.\Generated_Source\PSoC4/TelemUART.c ****         void TelemUART_DisableRxInt(void) 
 360:.\Generated_Source\PSoC4/TelemUART.c ****         {
 361:.\Generated_Source\PSoC4/TelemUART.c ****             CyIntDisable(TelemUART_RX_VECT_NUM);
 362:.\Generated_Source\PSoC4/TelemUART.c ****         }
 363:.\Generated_Source\PSoC4/TelemUART.c **** 
 364:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* TelemUART_RX_INTERRUPT_ENABLED */
 365:.\Generated_Source\PSoC4/TelemUART.c **** 
 366:.\Generated_Source\PSoC4/TelemUART.c **** 
 367:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
 368:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_SetRxInterruptMode
 369:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
 370:.\Generated_Source\PSoC4/TelemUART.c ****     *
 371:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
 372:.\Generated_Source\PSoC4/TelemUART.c ****     *  Configure which status bits trigger an interrupt event
 373:.\Generated_Source\PSoC4/TelemUART.c ****     *
 374:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
 375:.\Generated_Source\PSoC4/TelemUART.c ****     *  IntSrc:  An or'd combination of the desired status bit masks (defined in
 376:.\Generated_Source\PSoC4/TelemUART.c ****     *           the header file)
 377:.\Generated_Source\PSoC4/TelemUART.c ****     *
 378:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
 379:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
 380:.\Generated_Source\PSoC4/TelemUART.c ****     *
 381:.\Generated_Source\PSoC4/TelemUART.c ****     * Theory:
 382:.\Generated_Source\PSoC4/TelemUART.c ****     *  Enables the output of specific status bits to the interrupt controller
 383:.\Generated_Source\PSoC4/TelemUART.c ****     *
 384:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
 385:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_SetRxInterruptMode(uint8 intSrc) 
 386:.\Generated_Source\PSoC4/TelemUART.c ****     {
 387:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_RXSTATUS_MASK_REG  = intSrc;
 388:.\Generated_Source\PSoC4/TelemUART.c ****     }
 389:.\Generated_Source\PSoC4/TelemUART.c **** 
 390:.\Generated_Source\PSoC4/TelemUART.c **** 
 391:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
 392:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_ReadRxData
 393:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
 394:.\Generated_Source\PSoC4/TelemUART.c ****     *
 395:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
 396:.\Generated_Source\PSoC4/TelemUART.c ****     *  Returns data in RX Data register without checking status register to
 397:.\Generated_Source\PSoC4/TelemUART.c ****     *  determine if data is valid
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 12


 398:.\Generated_Source\PSoC4/TelemUART.c ****     *
 399:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
 400:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
 401:.\Generated_Source\PSoC4/TelemUART.c ****     *
 402:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
 403:.\Generated_Source\PSoC4/TelemUART.c ****     *  Received data from RX register
 404:.\Generated_Source\PSoC4/TelemUART.c ****     *
 405:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
 406:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBuffer - RAM buffer pointer for save received data.
 407:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferWrite - cyclic index for write to rxBuffer,
 408:.\Generated_Source\PSoC4/TelemUART.c ****     *     checked to identify new data.
 409:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferRead - cyclic index for read from rxBuffer,
 410:.\Generated_Source\PSoC4/TelemUART.c ****     *     incremented after each byte has been read from buffer.
 411:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferLoopDetect - creared if loop condition was detected
 412:.\Generated_Source\PSoC4/TelemUART.c ****     *     in RX ISR.
 413:.\Generated_Source\PSoC4/TelemUART.c ****     *
 414:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
 415:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
 416:.\Generated_Source\PSoC4/TelemUART.c ****     *
 417:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
 418:.\Generated_Source\PSoC4/TelemUART.c ****     uint8 TelemUART_ReadRxData(void) 
 419:.\Generated_Source\PSoC4/TelemUART.c ****     {
 420:.\Generated_Source\PSoC4/TelemUART.c ****         uint8 rxData;
 421:.\Generated_Source\PSoC4/TelemUART.c **** 
 422:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH)
 423:.\Generated_Source\PSoC4/TelemUART.c ****             uint8 loc_rxBufferRead;
 424:.\Generated_Source\PSoC4/TelemUART.c ****             uint8 loc_rxBufferWrite;
 425:.\Generated_Source\PSoC4/TelemUART.c ****             /* Protect variables that could change on interrupt. */
 426:.\Generated_Source\PSoC4/TelemUART.c ****             /* Disable Rx interrupt. */
 427:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_RX_INTERRUPT_ENABLED)
 428:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_DisableRxInt();
 429:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* TelemUART_RX_INTERRUPT_ENABLED */
 430:.\Generated_Source\PSoC4/TelemUART.c ****             loc_rxBufferRead = TelemUART_rxBufferRead;
 431:.\Generated_Source\PSoC4/TelemUART.c ****             loc_rxBufferWrite = TelemUART_rxBufferWrite;
 432:.\Generated_Source\PSoC4/TelemUART.c **** 
 433:.\Generated_Source\PSoC4/TelemUART.c ****             if( (TelemUART_rxBufferLoopDetect != 0u) || (loc_rxBufferRead != loc_rxBufferWrite) )
 434:.\Generated_Source\PSoC4/TelemUART.c ****             {
 435:.\Generated_Source\PSoC4/TelemUART.c ****                 rxData = TelemUART_rxBuffer[loc_rxBufferRead];
 436:.\Generated_Source\PSoC4/TelemUART.c ****                 loc_rxBufferRead++;
 437:.\Generated_Source\PSoC4/TelemUART.c **** 
 438:.\Generated_Source\PSoC4/TelemUART.c ****                 if(loc_rxBufferRead >= TelemUART_RXBUFFERSIZE)
 439:.\Generated_Source\PSoC4/TelemUART.c ****                 {
 440:.\Generated_Source\PSoC4/TelemUART.c ****                     loc_rxBufferRead = 0u;
 441:.\Generated_Source\PSoC4/TelemUART.c ****                 }
 442:.\Generated_Source\PSoC4/TelemUART.c ****                 /* Update the real pointer */
 443:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_rxBufferRead = loc_rxBufferRead;
 444:.\Generated_Source\PSoC4/TelemUART.c **** 
 445:.\Generated_Source\PSoC4/TelemUART.c ****                 if(TelemUART_rxBufferLoopDetect != 0u )
 446:.\Generated_Source\PSoC4/TelemUART.c ****                 {
 447:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_rxBufferLoopDetect = 0u;
 448:.\Generated_Source\PSoC4/TelemUART.c ****                     #if( (TelemUART_RX_INTERRUPT_ENABLED) && (TelemUART_FLOW_CONTROL != 0u) && \
 449:.\Generated_Source\PSoC4/TelemUART.c ****                          (TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH) )
 450:.\Generated_Source\PSoC4/TelemUART.c ****                         /* When Hardware Flow Control selected - return RX mask */
 451:.\Generated_Source\PSoC4/TelemUART.c ****                         #if( TelemUART_HD_ENABLED )
 452:.\Generated_Source\PSoC4/TelemUART.c ****                             if((TelemUART_CONTROL_REG & TelemUART_CTRL_HD_SEND) == 0u)
 453:.\Generated_Source\PSoC4/TelemUART.c ****                             {   /* In Half duplex mode return RX mask only in RX
 454:.\Generated_Source\PSoC4/TelemUART.c ****                                 *  configuration set, otherwise
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 13


 455:.\Generated_Source\PSoC4/TelemUART.c ****                                 *  mask will be returned in LoadRxConfig() API.
 456:.\Generated_Source\PSoC4/TelemUART.c ****                                 */
 457:.\Generated_Source\PSoC4/TelemUART.c ****                                 TelemUART_RXSTATUS_MASK_REG  |= TelemUART_RX_STS_FIFO_NOTEMPTY;
 458:.\Generated_Source\PSoC4/TelemUART.c ****                             }
 459:.\Generated_Source\PSoC4/TelemUART.c ****                         #else
 460:.\Generated_Source\PSoC4/TelemUART.c ****                             TelemUART_RXSTATUS_MASK_REG  |= TelemUART_RX_STS_FIFO_NOTEMPTY;
 461:.\Generated_Source\PSoC4/TelemUART.c ****                         #endif /* end TelemUART_HD_ENABLED */
 462:.\Generated_Source\PSoC4/TelemUART.c ****                     #endif /* TelemUART_RX_INTERRUPT_ENABLED and Hardware flow control*/
 463:.\Generated_Source\PSoC4/TelemUART.c ****                 }
 464:.\Generated_Source\PSoC4/TelemUART.c ****             }
 465:.\Generated_Source\PSoC4/TelemUART.c ****             else
 466:.\Generated_Source\PSoC4/TelemUART.c ****             {   /* Needs to check status for RX_STS_FIFO_NOTEMPTY bit*/
 467:.\Generated_Source\PSoC4/TelemUART.c ****                 rxData = TelemUART_RXDATA_REG;
 468:.\Generated_Source\PSoC4/TelemUART.c ****             }
 469:.\Generated_Source\PSoC4/TelemUART.c **** 
 470:.\Generated_Source\PSoC4/TelemUART.c ****             /* Enable Rx interrupt. */
 471:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_RX_INTERRUPT_ENABLED)
 472:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_EnableRxInt();
 473:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_RX_INTERRUPT_ENABLED */
 474:.\Generated_Source\PSoC4/TelemUART.c **** 
 475:.\Generated_Source\PSoC4/TelemUART.c ****         #else /* TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH */
 476:.\Generated_Source\PSoC4/TelemUART.c **** 
 477:.\Generated_Source\PSoC4/TelemUART.c ****             /* Needs to check status for RX_STS_FIFO_NOTEMPTY bit*/
 478:.\Generated_Source\PSoC4/TelemUART.c ****             rxData = TelemUART_RXDATA_REG;
 479:.\Generated_Source\PSoC4/TelemUART.c **** 
 480:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH */
 481:.\Generated_Source\PSoC4/TelemUART.c **** 
 482:.\Generated_Source\PSoC4/TelemUART.c ****         return(rxData);
 483:.\Generated_Source\PSoC4/TelemUART.c ****     }
 484:.\Generated_Source\PSoC4/TelemUART.c **** 
 485:.\Generated_Source\PSoC4/TelemUART.c **** 
 486:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
 487:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_ReadRxStatus
 488:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
 489:.\Generated_Source\PSoC4/TelemUART.c ****     *
 490:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
 491:.\Generated_Source\PSoC4/TelemUART.c ****     *  Read the current state of the status register
 492:.\Generated_Source\PSoC4/TelemUART.c ****     *  And detect software buffer overflow.
 493:.\Generated_Source\PSoC4/TelemUART.c ****     *
 494:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
 495:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
 496:.\Generated_Source\PSoC4/TelemUART.c ****     *
 497:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
 498:.\Generated_Source\PSoC4/TelemUART.c ****     *  Current state of the status register.
 499:.\Generated_Source\PSoC4/TelemUART.c ****     *
 500:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
 501:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferOverflow - used to indicate overload condition.
 502:.\Generated_Source\PSoC4/TelemUART.c ****     *   It set to one in RX interrupt when there isn?t free space in
 503:.\Generated_Source\PSoC4/TelemUART.c ****     *   TelemUART_rxBufferRead to write new data. This condition returned
 504:.\Generated_Source\PSoC4/TelemUART.c ****     *   and cleared to zero by this API as an
 505:.\Generated_Source\PSoC4/TelemUART.c ****     *   TelemUART_RX_STS_SOFT_BUFF_OVER bit along with RX Status register
 506:.\Generated_Source\PSoC4/TelemUART.c ****     *   bits.
 507:.\Generated_Source\PSoC4/TelemUART.c ****     *
 508:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
 509:.\Generated_Source\PSoC4/TelemUART.c ****     uint8 TelemUART_ReadRxStatus(void) 
 510:.\Generated_Source\PSoC4/TelemUART.c ****     {
 511:.\Generated_Source\PSoC4/TelemUART.c ****         uint8 status;
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 14


 512:.\Generated_Source\PSoC4/TelemUART.c **** 
 513:.\Generated_Source\PSoC4/TelemUART.c ****         status = TelemUART_RXSTATUS_REG & TelemUART_RX_HW_MASK;
 514:.\Generated_Source\PSoC4/TelemUART.c **** 
 515:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH)
 516:.\Generated_Source\PSoC4/TelemUART.c ****             if( TelemUART_rxBufferOverflow != 0u )
 517:.\Generated_Source\PSoC4/TelemUART.c ****             {
 518:.\Generated_Source\PSoC4/TelemUART.c ****                 status |= TelemUART_RX_STS_SOFT_BUFF_OVER;
 519:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_rxBufferOverflow = 0u;
 520:.\Generated_Source\PSoC4/TelemUART.c ****             }
 521:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* TelemUART_RXBUFFERSIZE */
 522:.\Generated_Source\PSoC4/TelemUART.c **** 
 523:.\Generated_Source\PSoC4/TelemUART.c ****         return(status);
 524:.\Generated_Source\PSoC4/TelemUART.c ****     }
 525:.\Generated_Source\PSoC4/TelemUART.c **** 
 526:.\Generated_Source\PSoC4/TelemUART.c **** 
 527:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
 528:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_GetChar
 529:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
 530:.\Generated_Source\PSoC4/TelemUART.c ****     *
 531:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
 532:.\Generated_Source\PSoC4/TelemUART.c ****     *  Reads UART RX buffer immediately, if data is not available or an error
 533:.\Generated_Source\PSoC4/TelemUART.c ****     *  condition exists, zero is returned; otherwise, character is read and
 534:.\Generated_Source\PSoC4/TelemUART.c ****     *  returned.
 535:.\Generated_Source\PSoC4/TelemUART.c ****     *
 536:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
 537:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
 538:.\Generated_Source\PSoC4/TelemUART.c ****     *
 539:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
 540:.\Generated_Source\PSoC4/TelemUART.c ****     *  Character read from UART RX buffer. ASCII characters from 1 to 255 are valid.
 541:.\Generated_Source\PSoC4/TelemUART.c ****     *  A returned zero signifies an error condition or no data available.
 542:.\Generated_Source\PSoC4/TelemUART.c ****     *
 543:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
 544:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBuffer - RAM buffer pointer for save received data.
 545:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferWrite - cyclic index for write to rxBuffer,
 546:.\Generated_Source\PSoC4/TelemUART.c ****     *     checked to identify new data.
 547:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferRead - cyclic index for read from rxBuffer,
 548:.\Generated_Source\PSoC4/TelemUART.c ****     *     incremented after each byte has been read from buffer.
 549:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferLoopDetect - creared if loop condition was detected
 550:.\Generated_Source\PSoC4/TelemUART.c ****     *     in RX ISR.
 551:.\Generated_Source\PSoC4/TelemUART.c ****     *
 552:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
 553:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
 554:.\Generated_Source\PSoC4/TelemUART.c ****     *
 555:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
 556:.\Generated_Source\PSoC4/TelemUART.c ****     uint8 TelemUART_GetChar(void) 
 557:.\Generated_Source\PSoC4/TelemUART.c ****     {
 558:.\Generated_Source\PSoC4/TelemUART.c ****         uint8 rxData = 0u;
 559:.\Generated_Source\PSoC4/TelemUART.c ****         uint8 rxStatus;
 560:.\Generated_Source\PSoC4/TelemUART.c **** 
 561:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH)
 562:.\Generated_Source\PSoC4/TelemUART.c ****             uint8 loc_rxBufferRead;
 563:.\Generated_Source\PSoC4/TelemUART.c ****             uint8 loc_rxBufferWrite;
 564:.\Generated_Source\PSoC4/TelemUART.c ****             /* Protect variables that could change on interrupt. */
 565:.\Generated_Source\PSoC4/TelemUART.c ****             /* Disable Rx interrupt. */
 566:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_RX_INTERRUPT_ENABLED)
 567:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_DisableRxInt();
 568:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* TelemUART_RX_INTERRUPT_ENABLED */
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 15


 569:.\Generated_Source\PSoC4/TelemUART.c ****             loc_rxBufferRead = TelemUART_rxBufferRead;
 570:.\Generated_Source\PSoC4/TelemUART.c ****             loc_rxBufferWrite = TelemUART_rxBufferWrite;
 571:.\Generated_Source\PSoC4/TelemUART.c **** 
 572:.\Generated_Source\PSoC4/TelemUART.c ****             if( (TelemUART_rxBufferLoopDetect != 0u) || (loc_rxBufferRead != loc_rxBufferWrite) )
 573:.\Generated_Source\PSoC4/TelemUART.c ****             {
 574:.\Generated_Source\PSoC4/TelemUART.c ****                 rxData = TelemUART_rxBuffer[loc_rxBufferRead];
 575:.\Generated_Source\PSoC4/TelemUART.c ****                 loc_rxBufferRead++;
 576:.\Generated_Source\PSoC4/TelemUART.c ****                 if(loc_rxBufferRead >= TelemUART_RXBUFFERSIZE)
 577:.\Generated_Source\PSoC4/TelemUART.c ****                 {
 578:.\Generated_Source\PSoC4/TelemUART.c ****                     loc_rxBufferRead = 0u;
 579:.\Generated_Source\PSoC4/TelemUART.c ****                 }
 580:.\Generated_Source\PSoC4/TelemUART.c ****                 /* Update the real pointer */
 581:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_rxBufferRead = loc_rxBufferRead;
 582:.\Generated_Source\PSoC4/TelemUART.c **** 
 583:.\Generated_Source\PSoC4/TelemUART.c ****                 if(TelemUART_rxBufferLoopDetect > 0u )
 584:.\Generated_Source\PSoC4/TelemUART.c ****                 {
 585:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_rxBufferLoopDetect = 0u;
 586:.\Generated_Source\PSoC4/TelemUART.c ****                     #if( (TelemUART_RX_INTERRUPT_ENABLED) && (TelemUART_FLOW_CONTROL != 0u) )
 587:.\Generated_Source\PSoC4/TelemUART.c ****                         /* When Hardware Flow Control selected - return RX mask */
 588:.\Generated_Source\PSoC4/TelemUART.c ****                         #if( TelemUART_HD_ENABLED )
 589:.\Generated_Source\PSoC4/TelemUART.c ****                             if((TelemUART_CONTROL_REG & TelemUART_CTRL_HD_SEND) == 0u)
 590:.\Generated_Source\PSoC4/TelemUART.c ****                             {   /* In Half duplex mode return RX mask only if
 591:.\Generated_Source\PSoC4/TelemUART.c ****                                 *  RX configuration set, otherwise
 592:.\Generated_Source\PSoC4/TelemUART.c ****                                 *  mask will be returned in LoadRxConfig() API.
 593:.\Generated_Source\PSoC4/TelemUART.c ****                                 */
 594:.\Generated_Source\PSoC4/TelemUART.c ****                                 TelemUART_RXSTATUS_MASK_REG  |= TelemUART_RX_STS_FIFO_NOTEMPTY;
 595:.\Generated_Source\PSoC4/TelemUART.c ****                             }
 596:.\Generated_Source\PSoC4/TelemUART.c ****                         #else
 597:.\Generated_Source\PSoC4/TelemUART.c ****                             TelemUART_RXSTATUS_MASK_REG  |= TelemUART_RX_STS_FIFO_NOTEMPTY;
 598:.\Generated_Source\PSoC4/TelemUART.c ****                         #endif /* end TelemUART_HD_ENABLED */
 599:.\Generated_Source\PSoC4/TelemUART.c ****                     #endif /* TelemUART_RX_INTERRUPT_ENABLED and Hardware flow control*/
 600:.\Generated_Source\PSoC4/TelemUART.c ****                 }
 601:.\Generated_Source\PSoC4/TelemUART.c **** 
 602:.\Generated_Source\PSoC4/TelemUART.c ****             }
 603:.\Generated_Source\PSoC4/TelemUART.c ****             else
 604:.\Generated_Source\PSoC4/TelemUART.c ****             {   rxStatus = TelemUART_RXSTATUS_REG;
 605:.\Generated_Source\PSoC4/TelemUART.c ****                 if((rxStatus & TelemUART_RX_STS_FIFO_NOTEMPTY) != 0u)
 606:.\Generated_Source\PSoC4/TelemUART.c ****                 {   /* Read received data from FIFO*/
 607:.\Generated_Source\PSoC4/TelemUART.c ****                     rxData = TelemUART_RXDATA_REG;
 608:.\Generated_Source\PSoC4/TelemUART.c ****                     /*Check status on error*/
 609:.\Generated_Source\PSoC4/TelemUART.c ****                     if((rxStatus & (TelemUART_RX_STS_BREAK | TelemUART_RX_STS_PAR_ERROR |
 610:.\Generated_Source\PSoC4/TelemUART.c ****                                    TelemUART_RX_STS_STOP_ERROR | TelemUART_RX_STS_OVERRUN)) != 0u)
 611:.\Generated_Source\PSoC4/TelemUART.c ****                     {
 612:.\Generated_Source\PSoC4/TelemUART.c ****                         rxData = 0u;
 613:.\Generated_Source\PSoC4/TelemUART.c ****                     }
 614:.\Generated_Source\PSoC4/TelemUART.c ****                 }
 615:.\Generated_Source\PSoC4/TelemUART.c ****             }
 616:.\Generated_Source\PSoC4/TelemUART.c **** 
 617:.\Generated_Source\PSoC4/TelemUART.c ****             /* Enable Rx interrupt. */
 618:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_RX_INTERRUPT_ENABLED)
 619:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_EnableRxInt();
 620:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* TelemUART_RX_INTERRUPT_ENABLED */
 621:.\Generated_Source\PSoC4/TelemUART.c **** 
 622:.\Generated_Source\PSoC4/TelemUART.c ****         #else /* TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH */
 623:.\Generated_Source\PSoC4/TelemUART.c **** 
 624:.\Generated_Source\PSoC4/TelemUART.c ****             rxStatus =TelemUART_RXSTATUS_REG;
 625:.\Generated_Source\PSoC4/TelemUART.c ****             if((rxStatus & TelemUART_RX_STS_FIFO_NOTEMPTY) != 0u)
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 16


 626:.\Generated_Source\PSoC4/TelemUART.c ****             {   /* Read received data from FIFO*/
 627:.\Generated_Source\PSoC4/TelemUART.c ****                 rxData = TelemUART_RXDATA_REG;
 628:.\Generated_Source\PSoC4/TelemUART.c ****                 /*Check status on error*/
 629:.\Generated_Source\PSoC4/TelemUART.c ****                 if((rxStatus & (TelemUART_RX_STS_BREAK | TelemUART_RX_STS_PAR_ERROR |
 630:.\Generated_Source\PSoC4/TelemUART.c ****                                TelemUART_RX_STS_STOP_ERROR | TelemUART_RX_STS_OVERRUN)) != 0u)
 631:.\Generated_Source\PSoC4/TelemUART.c ****                 {
 632:.\Generated_Source\PSoC4/TelemUART.c ****                     rxData = 0u;
 633:.\Generated_Source\PSoC4/TelemUART.c ****                 }
 634:.\Generated_Source\PSoC4/TelemUART.c ****             }
 635:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH */
 636:.\Generated_Source\PSoC4/TelemUART.c **** 
 637:.\Generated_Source\PSoC4/TelemUART.c ****         return(rxData);
 638:.\Generated_Source\PSoC4/TelemUART.c ****     }
 639:.\Generated_Source\PSoC4/TelemUART.c **** 
 640:.\Generated_Source\PSoC4/TelemUART.c **** 
 641:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
 642:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_GetByte
 643:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
 644:.\Generated_Source\PSoC4/TelemUART.c ****     *
 645:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
 646:.\Generated_Source\PSoC4/TelemUART.c ****     *  Grab the next available byte of data from the recieve FIFO
 647:.\Generated_Source\PSoC4/TelemUART.c ****     *
 648:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
 649:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
 650:.\Generated_Source\PSoC4/TelemUART.c ****     *
 651:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
 652:.\Generated_Source\PSoC4/TelemUART.c ****     *  MSB contains Status Register and LSB contains UART RX data
 653:.\Generated_Source\PSoC4/TelemUART.c ****     *
 654:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
 655:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
 656:.\Generated_Source\PSoC4/TelemUART.c ****     *
 657:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
 658:.\Generated_Source\PSoC4/TelemUART.c ****     uint16 TelemUART_GetByte(void) 
 659:.\Generated_Source\PSoC4/TelemUART.c ****     {
 660:.\Generated_Source\PSoC4/TelemUART.c ****         return ( ((uint16)TelemUART_ReadRxStatus() << 8u) | TelemUART_ReadRxData() );
 661:.\Generated_Source\PSoC4/TelemUART.c ****     }
 662:.\Generated_Source\PSoC4/TelemUART.c **** 
 663:.\Generated_Source\PSoC4/TelemUART.c **** 
 664:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
 665:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_GetRxBufferSize
 666:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
 667:.\Generated_Source\PSoC4/TelemUART.c ****     *
 668:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
 669:.\Generated_Source\PSoC4/TelemUART.c ****     *  Determine the amount of bytes left in the RX buffer and return the count in
 670:.\Generated_Source\PSoC4/TelemUART.c ****     *  bytes
 671:.\Generated_Source\PSoC4/TelemUART.c ****     *
 672:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
 673:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
 674:.\Generated_Source\PSoC4/TelemUART.c ****     *
 675:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
 676:.\Generated_Source\PSoC4/TelemUART.c ****     *  uint8: Integer count of the number of bytes left
 677:.\Generated_Source\PSoC4/TelemUART.c ****     *  in the RX buffer
 678:.\Generated_Source\PSoC4/TelemUART.c ****     *
 679:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
 680:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferWrite - used to calculate left bytes.
 681:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferRead - used to calculate left bytes.
 682:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferLoopDetect - checked to decide left bytes amount.
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 17


 683:.\Generated_Source\PSoC4/TelemUART.c ****     *
 684:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
 685:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
 686:.\Generated_Source\PSoC4/TelemUART.c ****     *
 687:.\Generated_Source\PSoC4/TelemUART.c ****     * Theory:
 688:.\Generated_Source\PSoC4/TelemUART.c ****     *  Allows the user to find out how full the RX Buffer is.
 689:.\Generated_Source\PSoC4/TelemUART.c ****     *
 690:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
 691:.\Generated_Source\PSoC4/TelemUART.c ****     uint8 TelemUART_GetRxBufferSize(void)
 692:.\Generated_Source\PSoC4/TelemUART.c ****                                                             
 693:.\Generated_Source\PSoC4/TelemUART.c ****     {
 694:.\Generated_Source\PSoC4/TelemUART.c ****         uint8 size;
 695:.\Generated_Source\PSoC4/TelemUART.c **** 
 696:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH)
 697:.\Generated_Source\PSoC4/TelemUART.c **** 
 698:.\Generated_Source\PSoC4/TelemUART.c ****             /* Disable Rx interrupt. */
 699:.\Generated_Source\PSoC4/TelemUART.c ****             /* Protect variables that could change on interrupt. */
 700:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_RX_INTERRUPT_ENABLED)
 701:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_DisableRxInt();
 702:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* TelemUART_RX_INTERRUPT_ENABLED */
 703:.\Generated_Source\PSoC4/TelemUART.c **** 
 704:.\Generated_Source\PSoC4/TelemUART.c ****             if(TelemUART_rxBufferRead == TelemUART_rxBufferWrite)
 705:.\Generated_Source\PSoC4/TelemUART.c ****             {
 706:.\Generated_Source\PSoC4/TelemUART.c ****                 if(TelemUART_rxBufferLoopDetect > 0u)
 707:.\Generated_Source\PSoC4/TelemUART.c ****                 {
 708:.\Generated_Source\PSoC4/TelemUART.c ****                     size = TelemUART_RXBUFFERSIZE;
 709:.\Generated_Source\PSoC4/TelemUART.c ****                 }
 710:.\Generated_Source\PSoC4/TelemUART.c ****                 else
 711:.\Generated_Source\PSoC4/TelemUART.c ****                 {
 712:.\Generated_Source\PSoC4/TelemUART.c ****                     size = 0u;
 713:.\Generated_Source\PSoC4/TelemUART.c ****                 }
 714:.\Generated_Source\PSoC4/TelemUART.c ****             }
 715:.\Generated_Source\PSoC4/TelemUART.c ****             else if(TelemUART_rxBufferRead < TelemUART_rxBufferWrite)
 716:.\Generated_Source\PSoC4/TelemUART.c ****             {
 717:.\Generated_Source\PSoC4/TelemUART.c ****                 size = (TelemUART_rxBufferWrite - TelemUART_rxBufferRead);
 718:.\Generated_Source\PSoC4/TelemUART.c ****             }
 719:.\Generated_Source\PSoC4/TelemUART.c ****             else
 720:.\Generated_Source\PSoC4/TelemUART.c ****             {
 721:.\Generated_Source\PSoC4/TelemUART.c ****                 size = (TelemUART_RXBUFFERSIZE - TelemUART_rxBufferRead) + TelemUART_rxBufferWrite;
 722:.\Generated_Source\PSoC4/TelemUART.c ****             }
 723:.\Generated_Source\PSoC4/TelemUART.c **** 
 724:.\Generated_Source\PSoC4/TelemUART.c ****             /* Enable Rx interrupt. */
 725:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_RX_INTERRUPT_ENABLED)
 726:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_EnableRxInt();
 727:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_RX_INTERRUPT_ENABLED */
 728:.\Generated_Source\PSoC4/TelemUART.c **** 
 729:.\Generated_Source\PSoC4/TelemUART.c ****         #else /* TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH */
 730:.\Generated_Source\PSoC4/TelemUART.c **** 
 731:.\Generated_Source\PSoC4/TelemUART.c ****             /* We can only know if there is data in the fifo. */
 732:.\Generated_Source\PSoC4/TelemUART.c ****             size = ((TelemUART_RXSTATUS_REG & TelemUART_RX_STS_FIFO_NOTEMPTY) != 0u) ? 1u : 0u;
 733:.\Generated_Source\PSoC4/TelemUART.c **** 
 734:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH */
 735:.\Generated_Source\PSoC4/TelemUART.c **** 
 736:.\Generated_Source\PSoC4/TelemUART.c ****         return(size);
 737:.\Generated_Source\PSoC4/TelemUART.c ****     }
 738:.\Generated_Source\PSoC4/TelemUART.c **** 
 739:.\Generated_Source\PSoC4/TelemUART.c **** 
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 18


 740:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
 741:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_ClearRxBuffer
 742:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
 743:.\Generated_Source\PSoC4/TelemUART.c ****     *
 744:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
 745:.\Generated_Source\PSoC4/TelemUART.c ****     *  Clears the RX RAM buffer by setting the read and write pointers both to zero.
 746:.\Generated_Source\PSoC4/TelemUART.c ****     *  Clears hardware RX FIFO.
 747:.\Generated_Source\PSoC4/TelemUART.c ****     *
 748:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
 749:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
 750:.\Generated_Source\PSoC4/TelemUART.c ****     *
 751:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
 752:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
 753:.\Generated_Source\PSoC4/TelemUART.c ****     *
 754:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
 755:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferWrite - cleared to zero.
 756:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferRead - cleared to zero.
 757:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferLoopDetect - cleared to zero.
 758:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxBufferOverflow - cleared to zero.
 759:.\Generated_Source\PSoC4/TelemUART.c ****     *
 760:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
 761:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
 762:.\Generated_Source\PSoC4/TelemUART.c ****     *
 763:.\Generated_Source\PSoC4/TelemUART.c ****     * Theory:
 764:.\Generated_Source\PSoC4/TelemUART.c ****     *  Setting the pointers to zero makes the system believe there is no data to
 765:.\Generated_Source\PSoC4/TelemUART.c ****     *  read and writing will resume at address 0 overwriting any data that may
 766:.\Generated_Source\PSoC4/TelemUART.c ****     *  have remained in the RAM.
 767:.\Generated_Source\PSoC4/TelemUART.c ****     *
 768:.\Generated_Source\PSoC4/TelemUART.c ****     * Side Effects:
 769:.\Generated_Source\PSoC4/TelemUART.c ****     *  Any received data not read from the RAM or FIFO buffer will be lost.
 770:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
 771:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_ClearRxBuffer(void) 
 772:.\Generated_Source\PSoC4/TelemUART.c ****     {
 773:.\Generated_Source\PSoC4/TelemUART.c ****         uint8 enableInterrupts;
 774:.\Generated_Source\PSoC4/TelemUART.c **** 
 775:.\Generated_Source\PSoC4/TelemUART.c ****         /* clear the HW FIFO */
 776:.\Generated_Source\PSoC4/TelemUART.c ****         /* Enter critical section */
 777:.\Generated_Source\PSoC4/TelemUART.c ****         enableInterrupts = CyEnterCriticalSection();
 778:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_RXDATA_AUX_CTL_REG |=  TelemUART_RX_FIFO_CLR;
 779:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_RXDATA_AUX_CTL_REG &= (uint8)~TelemUART_RX_FIFO_CLR;
 780:.\Generated_Source\PSoC4/TelemUART.c ****         /* Exit critical section */
 781:.\Generated_Source\PSoC4/TelemUART.c ****         CyExitCriticalSection(enableInterrupts);
 782:.\Generated_Source\PSoC4/TelemUART.c **** 
 783:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH)
 784:.\Generated_Source\PSoC4/TelemUART.c ****             /* Disable Rx interrupt. */
 785:.\Generated_Source\PSoC4/TelemUART.c ****             /* Protect variables that could change on interrupt. */
 786:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_RX_INTERRUPT_ENABLED)
 787:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_DisableRxInt();
 788:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_RX_INTERRUPT_ENABLED */
 789:.\Generated_Source\PSoC4/TelemUART.c **** 
 790:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_rxBufferRead = 0u;
 791:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_rxBufferWrite = 0u;
 792:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_rxBufferLoopDetect = 0u;
 793:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_rxBufferOverflow = 0u;
 794:.\Generated_Source\PSoC4/TelemUART.c **** 
 795:.\Generated_Source\PSoC4/TelemUART.c ****             /* Enable Rx interrupt. */
 796:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_RX_INTERRUPT_ENABLED)
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 19


 797:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_EnableRxInt();
 798:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_RX_INTERRUPT_ENABLED */
 799:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH */
 800:.\Generated_Source\PSoC4/TelemUART.c **** 
 801:.\Generated_Source\PSoC4/TelemUART.c ****     }
 802:.\Generated_Source\PSoC4/TelemUART.c **** 
 803:.\Generated_Source\PSoC4/TelemUART.c **** 
 804:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
 805:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_SetRxAddressMode
 806:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
 807:.\Generated_Source\PSoC4/TelemUART.c ****     *
 808:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
 809:.\Generated_Source\PSoC4/TelemUART.c ****     *  Set the receive addressing mode
 810:.\Generated_Source\PSoC4/TelemUART.c ****     *
 811:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
 812:.\Generated_Source\PSoC4/TelemUART.c ****     *  addressMode: Enumerated value indicating the mode of RX addressing
 813:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART__B_UART__AM_SW_BYTE_BYTE -  Software Byte-by-Byte address
 814:.\Generated_Source\PSoC4/TelemUART.c ****     *                                               detection
 815:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART__B_UART__AM_SW_DETECT_TO_BUFFER - Software Detect to Buffer
 816:.\Generated_Source\PSoC4/TelemUART.c ****     *                                               address detection
 817:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART__B_UART__AM_HW_BYTE_BY_BYTE - Hardware Byte-by-Byte address
 818:.\Generated_Source\PSoC4/TelemUART.c ****     *                                               detection
 819:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART__B_UART__AM_HW_DETECT_TO_BUFFER - Hardware Detect to Buffer
 820:.\Generated_Source\PSoC4/TelemUART.c ****     *                                               address detection
 821:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART__B_UART__AM_NONE - No address detection
 822:.\Generated_Source\PSoC4/TelemUART.c ****     *
 823:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
 824:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
 825:.\Generated_Source\PSoC4/TelemUART.c ****     *
 826:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
 827:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxAddressMode - the parameter stored in this variable for
 828:.\Generated_Source\PSoC4/TelemUART.c ****     *   the farther usage in RX ISR.
 829:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_rxAddressDetected - set to initial state (0).
 830:.\Generated_Source\PSoC4/TelemUART.c ****     *
 831:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
 832:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_SetRxAddressMode(uint8 addressMode)
 833:.\Generated_Source\PSoC4/TelemUART.c ****                                                         
 834:.\Generated_Source\PSoC4/TelemUART.c ****     {
 835:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_RXHW_ADDRESS_ENABLED)
 836:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_CONTROL_REG_REMOVED)
 837:.\Generated_Source\PSoC4/TelemUART.c ****                 if(addressMode != 0u) { }     /* release compiler warning */
 838:.\Generated_Source\PSoC4/TelemUART.c ****             #else /* TelemUART_CONTROL_REG_REMOVED */
 839:.\Generated_Source\PSoC4/TelemUART.c ****                 uint8 tmpCtrl;
 840:.\Generated_Source\PSoC4/TelemUART.c ****                 tmpCtrl = TelemUART_CONTROL_REG & (uint8)~TelemUART_CTRL_RXADDR_MODE_MASK;
 841:.\Generated_Source\PSoC4/TelemUART.c ****                 tmpCtrl |= (uint8)(addressMode << TelemUART_CTRL_RXADDR_MODE0_SHIFT);
 842:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_CONTROL_REG = tmpCtrl;
 843:.\Generated_Source\PSoC4/TelemUART.c ****                 #if(TelemUART_RX_INTERRUPT_ENABLED && \
 844:.\Generated_Source\PSoC4/TelemUART.c ****                    (TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH) )
 845:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_rxAddressMode = addressMode;
 846:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_rxAddressDetected = 0u;
 847:.\Generated_Source\PSoC4/TelemUART.c ****                 #endif /* End TelemUART_RXBUFFERSIZE > TelemUART_FIFO_LENGTH*/
 848:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_CONTROL_REG_REMOVED */
 849:.\Generated_Source\PSoC4/TelemUART.c ****         #else /* TelemUART_RXHW_ADDRESS_ENABLED */
 850:.\Generated_Source\PSoC4/TelemUART.c ****             if(addressMode != 0u) { }     /* release compiler warning */
 851:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_RXHW_ADDRESS_ENABLED */
 852:.\Generated_Source\PSoC4/TelemUART.c ****     }
 853:.\Generated_Source\PSoC4/TelemUART.c **** 
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 20


 854:.\Generated_Source\PSoC4/TelemUART.c **** 
 855:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
 856:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_SetRxAddress1
 857:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
 858:.\Generated_Source\PSoC4/TelemUART.c ****     *
 859:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
 860:.\Generated_Source\PSoC4/TelemUART.c ****     *  Set the first hardware address compare value
 861:.\Generated_Source\PSoC4/TelemUART.c ****     *
 862:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
 863:.\Generated_Source\PSoC4/TelemUART.c ****     *  address
 864:.\Generated_Source\PSoC4/TelemUART.c ****     *
 865:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
 866:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
 867:.\Generated_Source\PSoC4/TelemUART.c ****     *
 868:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
 869:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_SetRxAddress1(uint8 address) 
 870:.\Generated_Source\PSoC4/TelemUART.c **** 
 871:.\Generated_Source\PSoC4/TelemUART.c ****     {
 872:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_RXADDRESS1_REG = address;
 873:.\Generated_Source\PSoC4/TelemUART.c ****     }
 874:.\Generated_Source\PSoC4/TelemUART.c **** 
 875:.\Generated_Source\PSoC4/TelemUART.c **** 
 876:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
 877:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_SetRxAddress2
 878:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
 879:.\Generated_Source\PSoC4/TelemUART.c ****     *
 880:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
 881:.\Generated_Source\PSoC4/TelemUART.c ****     *  Set the second hardware address compare value
 882:.\Generated_Source\PSoC4/TelemUART.c ****     *
 883:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
 884:.\Generated_Source\PSoC4/TelemUART.c ****     *  address
 885:.\Generated_Source\PSoC4/TelemUART.c ****     *
 886:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
 887:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
 888:.\Generated_Source\PSoC4/TelemUART.c ****     *
 889:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
 890:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_SetRxAddress2(uint8 address) 
 891:.\Generated_Source\PSoC4/TelemUART.c ****     {
 892:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_RXADDRESS2_REG = address;
 893:.\Generated_Source\PSoC4/TelemUART.c ****     }
 894:.\Generated_Source\PSoC4/TelemUART.c **** 
 895:.\Generated_Source\PSoC4/TelemUART.c **** #endif  /* TelemUART_RX_ENABLED || TelemUART_HD_ENABLED*/
 896:.\Generated_Source\PSoC4/TelemUART.c **** 
 897:.\Generated_Source\PSoC4/TelemUART.c **** 
 898:.\Generated_Source\PSoC4/TelemUART.c **** #if( (TelemUART_TX_ENABLED) || (TelemUART_HD_ENABLED) )
 899:.\Generated_Source\PSoC4/TelemUART.c **** 
 900:.\Generated_Source\PSoC4/TelemUART.c ****     #if(TelemUART_TX_INTERRUPT_ENABLED)
 901:.\Generated_Source\PSoC4/TelemUART.c **** 
 902:.\Generated_Source\PSoC4/TelemUART.c ****         /*******************************************************************************
 903:.\Generated_Source\PSoC4/TelemUART.c ****         * Function Name: TelemUART_EnableTxInt
 904:.\Generated_Source\PSoC4/TelemUART.c ****         ********************************************************************************
 905:.\Generated_Source\PSoC4/TelemUART.c ****         *
 906:.\Generated_Source\PSoC4/TelemUART.c ****         * Summary:
 907:.\Generated_Source\PSoC4/TelemUART.c ****         *  Enable TX interrupt generation
 908:.\Generated_Source\PSoC4/TelemUART.c ****         *
 909:.\Generated_Source\PSoC4/TelemUART.c ****         * Parameters:
 910:.\Generated_Source\PSoC4/TelemUART.c ****         *  None.
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 21


 911:.\Generated_Source\PSoC4/TelemUART.c ****         *
 912:.\Generated_Source\PSoC4/TelemUART.c ****         * Return:
 913:.\Generated_Source\PSoC4/TelemUART.c ****         *  None.
 914:.\Generated_Source\PSoC4/TelemUART.c ****         *
 915:.\Generated_Source\PSoC4/TelemUART.c ****         * Theory:
 916:.\Generated_Source\PSoC4/TelemUART.c ****         *  Enable the interrupt output -or- the interrupt component itself
 917:.\Generated_Source\PSoC4/TelemUART.c ****         *
 918:.\Generated_Source\PSoC4/TelemUART.c ****         *******************************************************************************/
 919:.\Generated_Source\PSoC4/TelemUART.c ****         void TelemUART_EnableTxInt(void) 
 920:.\Generated_Source\PSoC4/TelemUART.c ****         {
 921:.\Generated_Source\PSoC4/TelemUART.c ****             CyIntEnable(TelemUART_TX_VECT_NUM);
 922:.\Generated_Source\PSoC4/TelemUART.c ****         }
 923:.\Generated_Source\PSoC4/TelemUART.c **** 
 924:.\Generated_Source\PSoC4/TelemUART.c **** 
 925:.\Generated_Source\PSoC4/TelemUART.c ****         /*******************************************************************************
 926:.\Generated_Source\PSoC4/TelemUART.c ****         * Function Name: TelemUART_DisableTxInt
 927:.\Generated_Source\PSoC4/TelemUART.c ****         ********************************************************************************
 928:.\Generated_Source\PSoC4/TelemUART.c ****         *
 929:.\Generated_Source\PSoC4/TelemUART.c ****         * Summary:
 930:.\Generated_Source\PSoC4/TelemUART.c ****         *  Disable TX interrupt generation
 931:.\Generated_Source\PSoC4/TelemUART.c ****         *
 932:.\Generated_Source\PSoC4/TelemUART.c ****         * Parameters:
 933:.\Generated_Source\PSoC4/TelemUART.c ****         *  None.
 934:.\Generated_Source\PSoC4/TelemUART.c ****         *
 935:.\Generated_Source\PSoC4/TelemUART.c ****         * Return:
 936:.\Generated_Source\PSoC4/TelemUART.c ****         *  None.
 937:.\Generated_Source\PSoC4/TelemUART.c ****         *
 938:.\Generated_Source\PSoC4/TelemUART.c ****         * Theory:
 939:.\Generated_Source\PSoC4/TelemUART.c ****         *  Disable the interrupt output -or- the interrupt component itself
 940:.\Generated_Source\PSoC4/TelemUART.c ****         *
 941:.\Generated_Source\PSoC4/TelemUART.c ****         *******************************************************************************/
 942:.\Generated_Source\PSoC4/TelemUART.c ****         void TelemUART_DisableTxInt(void) 
 943:.\Generated_Source\PSoC4/TelemUART.c ****         {
 944:.\Generated_Source\PSoC4/TelemUART.c ****             CyIntDisable(TelemUART_TX_VECT_NUM);
 945:.\Generated_Source\PSoC4/TelemUART.c ****         }
 946:.\Generated_Source\PSoC4/TelemUART.c **** 
 947:.\Generated_Source\PSoC4/TelemUART.c ****     #endif /* TelemUART_TX_INTERRUPT_ENABLED */
 948:.\Generated_Source\PSoC4/TelemUART.c **** 
 949:.\Generated_Source\PSoC4/TelemUART.c **** 
 950:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
 951:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_SetTxInterruptMode
 952:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
 953:.\Generated_Source\PSoC4/TelemUART.c ****     *
 954:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
 955:.\Generated_Source\PSoC4/TelemUART.c ****     *  Configure which status bits trigger an interrupt event
 956:.\Generated_Source\PSoC4/TelemUART.c ****     *
 957:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
 958:.\Generated_Source\PSoC4/TelemUART.c ****     *  intSrc: An or'd combination of the desired status bit masks (defined in
 959:.\Generated_Source\PSoC4/TelemUART.c ****     *          the header file)
 960:.\Generated_Source\PSoC4/TelemUART.c ****     *
 961:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
 962:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
 963:.\Generated_Source\PSoC4/TelemUART.c ****     *
 964:.\Generated_Source\PSoC4/TelemUART.c ****     * Theory:
 965:.\Generated_Source\PSoC4/TelemUART.c ****     *  Enables the output of specific status bits to the interrupt controller
 966:.\Generated_Source\PSoC4/TelemUART.c ****     *
 967:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 22


 968:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_SetTxInterruptMode(uint8 intSrc) 
 969:.\Generated_Source\PSoC4/TelemUART.c ****     {
 223              		.loc 1 969 0
 224              		.cfi_startproc
 225              	.LVL13:
 970:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_TXSTATUS_MASK_REG = intSrc;
 226              		.loc 1 970 0
 227 0000 014B     		ldr	r3, .L18
 971:.\Generated_Source\PSoC4/TelemUART.c ****     }
 228              		.loc 1 971 0
 229              		@ sp needed
 970:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_TXSTATUS_MASK_REG = intSrc;
 230              		.loc 1 970 0
 231 0002 1870     		strb	r0, [r3]
 232              		.loc 1 971 0
 233 0004 7047     		bx	lr
 234              	.L19:
 235 0006 C046     		.align	2
 236              	.L18:
 237 0008 83000F40 		.word	1074724995
 238              		.cfi_endproc
 239              	.LFE6:
 240              		.size	TelemUART_SetTxInterruptMode, .-TelemUART_SetTxInterruptMode
 241              		.section	.text.TelemUART_WriteTxData,"ax",%progbits
 242              		.align	1
 243              		.global	TelemUART_WriteTxData
 244              		.code	16
 245              		.thumb_func
 246              		.type	TelemUART_WriteTxData, %function
 247              	TelemUART_WriteTxData:
 248              	.LFB7:
 972:.\Generated_Source\PSoC4/TelemUART.c **** 
 973:.\Generated_Source\PSoC4/TelemUART.c **** 
 974:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
 975:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_WriteTxData
 976:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
 977:.\Generated_Source\PSoC4/TelemUART.c ****     *
 978:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
 979:.\Generated_Source\PSoC4/TelemUART.c ****     *  Write a byte of data to the Transmit FIFO or TX buffer to be sent when the
 980:.\Generated_Source\PSoC4/TelemUART.c ****     *  bus is available. WriteTxData sends a byte without checking for buffer room
 981:.\Generated_Source\PSoC4/TelemUART.c ****     *  or status. It is up to the user to separately check status.
 982:.\Generated_Source\PSoC4/TelemUART.c ****     *
 983:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
 984:.\Generated_Source\PSoC4/TelemUART.c ****     *  TXDataByte: byte of data to place in the transmit FIFO
 985:.\Generated_Source\PSoC4/TelemUART.c ****     *
 986:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
 987:.\Generated_Source\PSoC4/TelemUART.c ****     * void
 988:.\Generated_Source\PSoC4/TelemUART.c ****     *
 989:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
 990:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_txBuffer - RAM buffer pointer for save data for transmission
 991:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_txBufferWrite - cyclic index for write to txBuffer,
 992:.\Generated_Source\PSoC4/TelemUART.c ****     *    incremented after each byte saved to buffer.
 993:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_txBufferRead - cyclic index for read from txBuffer,
 994:.\Generated_Source\PSoC4/TelemUART.c ****     *    checked to identify the condition to write to FIFO directly or to TX buffer
 995:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_initVar - checked to identify that the component has been
 996:.\Generated_Source\PSoC4/TelemUART.c ****     *    initialized.
 997:.\Generated_Source\PSoC4/TelemUART.c ****     *
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 23


 998:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
 999:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
1000:.\Generated_Source\PSoC4/TelemUART.c ****     *
1001:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
1002:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_WriteTxData(uint8 txDataByte) 
1003:.\Generated_Source\PSoC4/TelemUART.c ****     {
 249              		.loc 1 1003 0
 250              		.cfi_startproc
 251              	.LVL14:
1004:.\Generated_Source\PSoC4/TelemUART.c ****         /* If not Initialized then skip this function*/
1005:.\Generated_Source\PSoC4/TelemUART.c ****         if(TelemUART_initVar != 0u)
 252              		.loc 1 1005 0
 253 0000 034B     		ldr	r3, .L25
 254 0002 1B78     		ldrb	r3, [r3]
 255 0004 002B     		cmp	r3, #0
 256 0006 01D0     		beq	.L20
1006:.\Generated_Source\PSoC4/TelemUART.c ****         {
1007:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH)
1008:.\Generated_Source\PSoC4/TelemUART.c **** 
1009:.\Generated_Source\PSoC4/TelemUART.c ****                 /* Disable Tx interrupt. */
1010:.\Generated_Source\PSoC4/TelemUART.c ****                 /* Protect variables that could change on interrupt. */
1011:.\Generated_Source\PSoC4/TelemUART.c ****                 #if(TelemUART_TX_INTERRUPT_ENABLED)
1012:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_DisableTxInt();
1013:.\Generated_Source\PSoC4/TelemUART.c ****                 #endif /* End TelemUART_TX_INTERRUPT_ENABLED */
1014:.\Generated_Source\PSoC4/TelemUART.c **** 
1015:.\Generated_Source\PSoC4/TelemUART.c ****                 if( (TelemUART_txBufferRead == TelemUART_txBufferWrite) &&
1016:.\Generated_Source\PSoC4/TelemUART.c ****                     ((TelemUART_TXSTATUS_REG & TelemUART_TX_STS_FIFO_FULL) == 0u) )
1017:.\Generated_Source\PSoC4/TelemUART.c ****                 {
1018:.\Generated_Source\PSoC4/TelemUART.c ****                     /* Add directly to the FIFO. */
1019:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_TXDATA_REG = txDataByte;
1020:.\Generated_Source\PSoC4/TelemUART.c ****                 }
1021:.\Generated_Source\PSoC4/TelemUART.c ****                 else
1022:.\Generated_Source\PSoC4/TelemUART.c ****                 {
1023:.\Generated_Source\PSoC4/TelemUART.c ****                     if(TelemUART_txBufferWrite >= TelemUART_TXBUFFERSIZE)
1024:.\Generated_Source\PSoC4/TelemUART.c ****                     {
1025:.\Generated_Source\PSoC4/TelemUART.c ****                         TelemUART_txBufferWrite = 0u;
1026:.\Generated_Source\PSoC4/TelemUART.c ****                     }
1027:.\Generated_Source\PSoC4/TelemUART.c **** 
1028:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_txBuffer[TelemUART_txBufferWrite] = txDataByte;
1029:.\Generated_Source\PSoC4/TelemUART.c **** 
1030:.\Generated_Source\PSoC4/TelemUART.c ****                     /* Add to the software buffer. */
1031:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_txBufferWrite++;
1032:.\Generated_Source\PSoC4/TelemUART.c **** 
1033:.\Generated_Source\PSoC4/TelemUART.c ****                 }
1034:.\Generated_Source\PSoC4/TelemUART.c **** 
1035:.\Generated_Source\PSoC4/TelemUART.c ****                 /* Enable Tx interrupt. */
1036:.\Generated_Source\PSoC4/TelemUART.c ****                 #if(TelemUART_TX_INTERRUPT_ENABLED)
1037:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_EnableTxInt();
1038:.\Generated_Source\PSoC4/TelemUART.c ****                 #endif /* End TelemUART_TX_INTERRUPT_ENABLED */
1039:.\Generated_Source\PSoC4/TelemUART.c **** 
1040:.\Generated_Source\PSoC4/TelemUART.c ****             #else /* TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH */
1041:.\Generated_Source\PSoC4/TelemUART.c **** 
1042:.\Generated_Source\PSoC4/TelemUART.c ****                 /* Add directly to the FIFO. */
1043:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_TXDATA_REG = txDataByte;
 257              		.loc 1 1043 0
 258 0008 024B     		ldr	r3, .L25+4
 259 000a 1870     		strb	r0, [r3]
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 24


 260              	.L20:
1044:.\Generated_Source\PSoC4/TelemUART.c **** 
1045:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH */
1046:.\Generated_Source\PSoC4/TelemUART.c ****         }
1047:.\Generated_Source\PSoC4/TelemUART.c ****     }
 261              		.loc 1 1047 0
 262              		@ sp needed
 263 000c 7047     		bx	lr
 264              	.L26:
 265 000e C046     		.align	2
 266              	.L25:
 267 0010 00000000 		.word	.LANCHOR0
 268 0014 43000F40 		.word	1074724931
 269              		.cfi_endproc
 270              	.LFE7:
 271              		.size	TelemUART_WriteTxData, .-TelemUART_WriteTxData
 272              		.section	.text.TelemUART_ReadTxStatus,"ax",%progbits
 273              		.align	1
 274              		.global	TelemUART_ReadTxStatus
 275              		.code	16
 276              		.thumb_func
 277              		.type	TelemUART_ReadTxStatus, %function
 278              	TelemUART_ReadTxStatus:
 279              	.LFB8:
1048:.\Generated_Source\PSoC4/TelemUART.c **** 
1049:.\Generated_Source\PSoC4/TelemUART.c **** 
1050:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
1051:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_ReadTxStatus
1052:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
1053:.\Generated_Source\PSoC4/TelemUART.c ****     *
1054:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
1055:.\Generated_Source\PSoC4/TelemUART.c ****     *  Read the status register for the component
1056:.\Generated_Source\PSoC4/TelemUART.c ****     *
1057:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
1058:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
1059:.\Generated_Source\PSoC4/TelemUART.c ****     *
1060:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
1061:.\Generated_Source\PSoC4/TelemUART.c ****     *  Contents of the status register
1062:.\Generated_Source\PSoC4/TelemUART.c ****     *
1063:.\Generated_Source\PSoC4/TelemUART.c ****     * Theory:
1064:.\Generated_Source\PSoC4/TelemUART.c ****     *  This function reads the status register which is clear on read. It is up to
1065:.\Generated_Source\PSoC4/TelemUART.c ****     *  the user to handle all bits in this return value accordingly, even if the bit
1066:.\Generated_Source\PSoC4/TelemUART.c ****     *  was not enabled as an interrupt source the event happened and must be handled
1067:.\Generated_Source\PSoC4/TelemUART.c ****     *  accordingly.
1068:.\Generated_Source\PSoC4/TelemUART.c ****     *
1069:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
1070:.\Generated_Source\PSoC4/TelemUART.c ****     uint8 TelemUART_ReadTxStatus(void) 
1071:.\Generated_Source\PSoC4/TelemUART.c ****     {
 280              		.loc 1 1071 0
 281              		.cfi_startproc
1072:.\Generated_Source\PSoC4/TelemUART.c ****         return(TelemUART_TXSTATUS_REG);
 282              		.loc 1 1072 0
 283 0000 014B     		ldr	r3, .L28
1073:.\Generated_Source\PSoC4/TelemUART.c ****     }
 284              		.loc 1 1073 0
 285              		@ sp needed
1072:.\Generated_Source\PSoC4/TelemUART.c ****         return(TelemUART_TXSTATUS_REG);
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 25


 286              		.loc 1 1072 0
 287 0002 1878     		ldrb	r0, [r3]
 288 0004 C0B2     		uxtb	r0, r0
 289              		.loc 1 1073 0
 290 0006 7047     		bx	lr
 291              	.L29:
 292              		.align	2
 293              	.L28:
 294 0008 63000F40 		.word	1074724963
 295              		.cfi_endproc
 296              	.LFE8:
 297              		.size	TelemUART_ReadTxStatus, .-TelemUART_ReadTxStatus
 298              		.section	.text.TelemUART_PutChar,"ax",%progbits
 299              		.align	1
 300              		.global	TelemUART_PutChar
 301              		.code	16
 302              		.thumb_func
 303              		.type	TelemUART_PutChar, %function
 304              	TelemUART_PutChar:
 305              	.LFB9:
1074:.\Generated_Source\PSoC4/TelemUART.c **** 
1075:.\Generated_Source\PSoC4/TelemUART.c **** 
1076:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
1077:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_PutChar
1078:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
1079:.\Generated_Source\PSoC4/TelemUART.c ****     *
1080:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
1081:.\Generated_Source\PSoC4/TelemUART.c ****     *  Wait to send byte until TX register or buffer has room.
1082:.\Generated_Source\PSoC4/TelemUART.c ****     *
1083:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
1084:.\Generated_Source\PSoC4/TelemUART.c ****     *  txDataByte: The 8-bit data value to send across the UART.
1085:.\Generated_Source\PSoC4/TelemUART.c ****     *
1086:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
1087:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
1088:.\Generated_Source\PSoC4/TelemUART.c ****     *
1089:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
1090:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_txBuffer - RAM buffer pointer for save data for transmission
1091:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_txBufferWrite - cyclic index for write to txBuffer,
1092:.\Generated_Source\PSoC4/TelemUART.c ****     *     checked to identify free space in txBuffer and incremented after each byte
1093:.\Generated_Source\PSoC4/TelemUART.c ****     *     saved to buffer.
1094:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_txBufferRead - cyclic index for read from txBuffer,
1095:.\Generated_Source\PSoC4/TelemUART.c ****     *     checked to identify free space in txBuffer.
1096:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_initVar - checked to identify that the component has been
1097:.\Generated_Source\PSoC4/TelemUART.c ****     *     initialized.
1098:.\Generated_Source\PSoC4/TelemUART.c ****     *
1099:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
1100:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
1101:.\Generated_Source\PSoC4/TelemUART.c ****     *
1102:.\Generated_Source\PSoC4/TelemUART.c ****     * Theory:
1103:.\Generated_Source\PSoC4/TelemUART.c ****     *  Allows the user to transmit any byte of data in a single transfer
1104:.\Generated_Source\PSoC4/TelemUART.c ****     *
1105:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
1106:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_PutChar(uint8 txDataByte) 
1107:.\Generated_Source\PSoC4/TelemUART.c ****     {
 306              		.loc 1 1107 0
 307              		.cfi_startproc
 308              	.LVL15:
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 26


 309              	.L32:
1108:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH)
1109:.\Generated_Source\PSoC4/TelemUART.c ****                 /* The temporary output pointer is used since it takes two instructions
1110:.\Generated_Source\PSoC4/TelemUART.c ****                 *  to increment with a wrap, and we can't risk doing that with the real
1111:.\Generated_Source\PSoC4/TelemUART.c ****                 *  pointer and getting an interrupt in between instructions.
1112:.\Generated_Source\PSoC4/TelemUART.c ****                 */
1113:.\Generated_Source\PSoC4/TelemUART.c ****                 uint8 loc_txBufferWrite;
1114:.\Generated_Source\PSoC4/TelemUART.c ****                 uint8 loc_txBufferRead;
1115:.\Generated_Source\PSoC4/TelemUART.c **** 
1116:.\Generated_Source\PSoC4/TelemUART.c ****                 do{
1117:.\Generated_Source\PSoC4/TelemUART.c ****                     /* Block if software buffer is full, so we don't overwrite. */
1118:.\Generated_Source\PSoC4/TelemUART.c ****                     #if ((TelemUART_TXBUFFERSIZE > TelemUART_MAX_BYTE_VALUE) && (CY_PSOC3))
1119:.\Generated_Source\PSoC4/TelemUART.c ****                         /* Disable TX interrupt to protect variables that could change on interrupt
1120:.\Generated_Source\PSoC4/TelemUART.c ****                         CyIntDisable(TelemUART_TX_VECT_NUM);
1121:.\Generated_Source\PSoC4/TelemUART.c ****                     #endif /* End TXBUFFERSIZE > 255 */
1122:.\Generated_Source\PSoC4/TelemUART.c ****                     loc_txBufferWrite = TelemUART_txBufferWrite;
1123:.\Generated_Source\PSoC4/TelemUART.c ****                     loc_txBufferRead = TelemUART_txBufferRead;
1124:.\Generated_Source\PSoC4/TelemUART.c ****                     #if ((TelemUART_TXBUFFERSIZE > TelemUART_MAX_BYTE_VALUE) && (CY_PSOC3))
1125:.\Generated_Source\PSoC4/TelemUART.c ****                         /* Enable interrupt to continue transmission */
1126:.\Generated_Source\PSoC4/TelemUART.c ****                         CyIntEnable(TelemUART_TX_VECT_NUM);
1127:.\Generated_Source\PSoC4/TelemUART.c ****                     #endif /* End TXBUFFERSIZE > 255 */
1128:.\Generated_Source\PSoC4/TelemUART.c ****                 }while( (loc_txBufferWrite < loc_txBufferRead) ? (loc_txBufferWrite == (loc_txBuffe
1129:.\Generated_Source\PSoC4/TelemUART.c ****                                         ((loc_txBufferWrite - loc_txBufferRead) ==
1130:.\Generated_Source\PSoC4/TelemUART.c ****                                         (uint8)(TelemUART_TXBUFFERSIZE - 1u)) );
1131:.\Generated_Source\PSoC4/TelemUART.c **** 
1132:.\Generated_Source\PSoC4/TelemUART.c ****                 if( (loc_txBufferRead == loc_txBufferWrite) &&
1133:.\Generated_Source\PSoC4/TelemUART.c ****                     ((TelemUART_TXSTATUS_REG & TelemUART_TX_STS_FIFO_FULL) == 0u) )
1134:.\Generated_Source\PSoC4/TelemUART.c ****                 {
1135:.\Generated_Source\PSoC4/TelemUART.c ****                     /* Add directly to the FIFO. */
1136:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_TXDATA_REG = txDataByte;
1137:.\Generated_Source\PSoC4/TelemUART.c ****                 }
1138:.\Generated_Source\PSoC4/TelemUART.c ****                 else
1139:.\Generated_Source\PSoC4/TelemUART.c ****                 {
1140:.\Generated_Source\PSoC4/TelemUART.c ****                     if(loc_txBufferWrite >= TelemUART_TXBUFFERSIZE)
1141:.\Generated_Source\PSoC4/TelemUART.c ****                     {
1142:.\Generated_Source\PSoC4/TelemUART.c ****                         loc_txBufferWrite = 0u;
1143:.\Generated_Source\PSoC4/TelemUART.c ****                     }
1144:.\Generated_Source\PSoC4/TelemUART.c ****                     /* Add to the software buffer. */
1145:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_txBuffer[loc_txBufferWrite] = txDataByte;
1146:.\Generated_Source\PSoC4/TelemUART.c ****                     loc_txBufferWrite++;
1147:.\Generated_Source\PSoC4/TelemUART.c **** 
1148:.\Generated_Source\PSoC4/TelemUART.c ****                     /* Finally, update the real output pointer */
1149:.\Generated_Source\PSoC4/TelemUART.c ****                     #if ((TelemUART_TXBUFFERSIZE > TelemUART_MAX_BYTE_VALUE) && (CY_PSOC3))
1150:.\Generated_Source\PSoC4/TelemUART.c ****                         CyIntDisable(TelemUART_TX_VECT_NUM);
1151:.\Generated_Source\PSoC4/TelemUART.c ****                     #endif /* End TXBUFFERSIZE > 255 */
1152:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_txBufferWrite = loc_txBufferWrite;
1153:.\Generated_Source\PSoC4/TelemUART.c ****                     #if ((TelemUART_TXBUFFERSIZE > TelemUART_MAX_BYTE_VALUE) && (CY_PSOC3))
1154:.\Generated_Source\PSoC4/TelemUART.c ****                         CyIntEnable(TelemUART_TX_VECT_NUM);
1155:.\Generated_Source\PSoC4/TelemUART.c ****                     #endif /* End TXBUFFERSIZE > 255 */
1156:.\Generated_Source\PSoC4/TelemUART.c ****                 }
1157:.\Generated_Source\PSoC4/TelemUART.c **** 
1158:.\Generated_Source\PSoC4/TelemUART.c ****             #else /* TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH */
1159:.\Generated_Source\PSoC4/TelemUART.c **** 
1160:.\Generated_Source\PSoC4/TelemUART.c ****                 while((TelemUART_TXSTATUS_REG & TelemUART_TX_STS_FIFO_FULL) != 0u)
 310              		.loc 1 1160 0 discriminator 1
 311 0000 034B     		ldr	r3, .L33
 312 0002 1B78     		ldrb	r3, [r3]
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 27


 313 0004 5A07     		lsl	r2, r3, #29
 314 0006 FBD4     		bmi	.L32
1161:.\Generated_Source\PSoC4/TelemUART.c ****                 {
1162:.\Generated_Source\PSoC4/TelemUART.c ****                     ; /* Wait for room in the FIFO. */
1163:.\Generated_Source\PSoC4/TelemUART.c ****                 }
1164:.\Generated_Source\PSoC4/TelemUART.c **** 
1165:.\Generated_Source\PSoC4/TelemUART.c ****                 /* Add directly to the FIFO. */
1166:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_TXDATA_REG = txDataByte;
 315              		.loc 1 1166 0
 316 0008 024B     		ldr	r3, .L33+4
1167:.\Generated_Source\PSoC4/TelemUART.c **** 
1168:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH */
1169:.\Generated_Source\PSoC4/TelemUART.c ****     }
 317              		.loc 1 1169 0
 318              		@ sp needed
1166:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_TXDATA_REG = txDataByte;
 319              		.loc 1 1166 0
 320 000a 1870     		strb	r0, [r3]
 321              		.loc 1 1169 0
 322 000c 7047     		bx	lr
 323              	.L34:
 324 000e C046     		.align	2
 325              	.L33:
 326 0010 63000F40 		.word	1074724963
 327 0014 43000F40 		.word	1074724931
 328              		.cfi_endproc
 329              	.LFE9:
 330              		.size	TelemUART_PutChar, .-TelemUART_PutChar
 331              		.section	.text.TelemUART_PutString,"ax",%progbits
 332              		.align	1
 333              		.global	TelemUART_PutString
 334              		.code	16
 335              		.thumb_func
 336              		.type	TelemUART_PutString, %function
 337              	TelemUART_PutString:
 338              	.LFB10:
1170:.\Generated_Source\PSoC4/TelemUART.c **** 
1171:.\Generated_Source\PSoC4/TelemUART.c **** 
1172:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
1173:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_PutString
1174:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
1175:.\Generated_Source\PSoC4/TelemUART.c ****     *
1176:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
1177:.\Generated_Source\PSoC4/TelemUART.c ****     *  Write a Sequence of bytes on the Transmit line. Data comes from RAM or ROM.
1178:.\Generated_Source\PSoC4/TelemUART.c ****     *
1179:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
1180:.\Generated_Source\PSoC4/TelemUART.c ****     *  string: char pointer to character string of Data to Send.
1181:.\Generated_Source\PSoC4/TelemUART.c ****     *
1182:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
1183:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
1184:.\Generated_Source\PSoC4/TelemUART.c ****     *
1185:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
1186:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_initVar - checked to identify that the component has been
1187:.\Generated_Source\PSoC4/TelemUART.c ****     *     initialized.
1188:.\Generated_Source\PSoC4/TelemUART.c ****     *
1189:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
1190:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 28


1191:.\Generated_Source\PSoC4/TelemUART.c ****     *
1192:.\Generated_Source\PSoC4/TelemUART.c ****     * Theory:
1193:.\Generated_Source\PSoC4/TelemUART.c ****     *  This function will block if there is not enough memory to place the whole
1194:.\Generated_Source\PSoC4/TelemUART.c ****     *  string, it will block until the entire string has been written to the
1195:.\Generated_Source\PSoC4/TelemUART.c ****     *  transmit buffer.
1196:.\Generated_Source\PSoC4/TelemUART.c ****     *
1197:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
1198:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_PutString(const char8 string[]) 
1199:.\Generated_Source\PSoC4/TelemUART.c ****     {
 339              		.loc 1 1199 0
 340              		.cfi_startproc
 341              	.LVL16:
 342 0000 38B5     		push	{r3, r4, r5, lr}
 343              		.cfi_def_cfa_offset 16
 344              		.cfi_offset 3, -16
 345              		.cfi_offset 4, -12
 346              		.cfi_offset 5, -8
 347              		.cfi_offset 14, -4
1200:.\Generated_Source\PSoC4/TelemUART.c ****         uint16 buf_index = 0u;
1201:.\Generated_Source\PSoC4/TelemUART.c ****         /* If not Initialized then skip this function*/
1202:.\Generated_Source\PSoC4/TelemUART.c ****         if(TelemUART_initVar != 0u)
 348              		.loc 1 1202 0
 349 0002 074B     		ldr	r3, .L40
 350 0004 0024     		mov	r4, #0
 351 0006 1B78     		ldrb	r3, [r3]
1199:.\Generated_Source\PSoC4/TelemUART.c ****     {
 352              		.loc 1 1199 0
 353 0008 051C     		mov	r5, r0
 354              		.loc 1 1202 0
 355 000a A342     		cmp	r3, r4
 356 000c 07D0     		beq	.L35
 357              	.LVL17:
 358              	.L37:
1203:.\Generated_Source\PSoC4/TelemUART.c ****         {
1204:.\Generated_Source\PSoC4/TelemUART.c ****             /* This is a blocking function, it will not exit until all data is sent*/
1205:.\Generated_Source\PSoC4/TelemUART.c ****             while(string[buf_index] != (char8)0)
 359              		.loc 1 1205 0 discriminator 1
 360 000e 285D     		ldrb	r0, [r5, r4]
 361 0010 0028     		cmp	r0, #0
 362 0012 04D0     		beq	.L35
1206:.\Generated_Source\PSoC4/TelemUART.c ****             {
1207:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_PutChar((uint8)string[buf_index]);
1208:.\Generated_Source\PSoC4/TelemUART.c ****                 buf_index++;
 363              		.loc 1 1208 0
 364 0014 0134     		add	r4, r4, #1
 365              	.LVL18:
1207:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_PutChar((uint8)string[buf_index]);
 366              		.loc 1 1207 0
 367 0016 FFF7FEFF 		bl	TelemUART_PutChar
 368              	.LVL19:
 369              		.loc 1 1208 0
 370 001a A4B2     		uxth	r4, r4
 371              	.LVL20:
 372 001c F7E7     		b	.L37
 373              	.LVL21:
 374              	.L35:
1209:.\Generated_Source\PSoC4/TelemUART.c ****             }
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 29


1210:.\Generated_Source\PSoC4/TelemUART.c ****         }
1211:.\Generated_Source\PSoC4/TelemUART.c ****     }
 375              		.loc 1 1211 0
 376              		@ sp needed
 377              	.LVL22:
 378 001e 38BD     		pop	{r3, r4, r5, pc}
 379              	.L41:
 380              		.align	2
 381              	.L40:
 382 0020 00000000 		.word	.LANCHOR0
 383              		.cfi_endproc
 384              	.LFE10:
 385              		.size	TelemUART_PutString, .-TelemUART_PutString
 386              		.section	.text.TelemUART_PutArray,"ax",%progbits
 387              		.align	1
 388              		.global	TelemUART_PutArray
 389              		.code	16
 390              		.thumb_func
 391              		.type	TelemUART_PutArray, %function
 392              	TelemUART_PutArray:
 393              	.LFB11:
1212:.\Generated_Source\PSoC4/TelemUART.c **** 
1213:.\Generated_Source\PSoC4/TelemUART.c **** 
1214:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
1215:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_PutArray
1216:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
1217:.\Generated_Source\PSoC4/TelemUART.c ****     *
1218:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
1219:.\Generated_Source\PSoC4/TelemUART.c ****     *  Write a Sequence of bytes on the Transmit line. Data comes from RAM or ROM.
1220:.\Generated_Source\PSoC4/TelemUART.c ****     *
1221:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
1222:.\Generated_Source\PSoC4/TelemUART.c ****     *  string: Address of the memory array residing in RAM or ROM.
1223:.\Generated_Source\PSoC4/TelemUART.c ****     *  byteCount: Number of Bytes to be transmitted.
1224:.\Generated_Source\PSoC4/TelemUART.c ****     *
1225:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
1226:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
1227:.\Generated_Source\PSoC4/TelemUART.c ****     *
1228:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
1229:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_initVar - checked to identify that the component has been
1230:.\Generated_Source\PSoC4/TelemUART.c ****     *     initialized.
1231:.\Generated_Source\PSoC4/TelemUART.c ****     *
1232:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
1233:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
1234:.\Generated_Source\PSoC4/TelemUART.c ****     *
1235:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
1236:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_PutArray(const uint8 string[], uint8 byteCount)
1237:.\Generated_Source\PSoC4/TelemUART.c ****                                                                     
1238:.\Generated_Source\PSoC4/TelemUART.c ****     {
 394              		.loc 1 1238 0
 395              		.cfi_startproc
 396              	.LVL23:
 397 0000 70B5     		push	{r4, r5, r6, lr}
 398              		.cfi_def_cfa_offset 16
 399              		.cfi_offset 4, -16
 400              		.cfi_offset 5, -12
 401              		.cfi_offset 6, -8
 402              		.cfi_offset 14, -4
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 30


1239:.\Generated_Source\PSoC4/TelemUART.c ****         uint8 buf_index = 0u;
1240:.\Generated_Source\PSoC4/TelemUART.c ****         /* If not Initialized then skip this function*/
1241:.\Generated_Source\PSoC4/TelemUART.c ****         if(TelemUART_initVar != 0u)
 403              		.loc 1 1241 0
 404 0002 084B     		ldr	r3, .L46
1238:.\Generated_Source\PSoC4/TelemUART.c ****     {
 405              		.loc 1 1238 0
 406 0004 051C     		mov	r5, r0
 407              		.loc 1 1241 0
 408 0006 1B78     		ldrb	r3, [r3]
1238:.\Generated_Source\PSoC4/TelemUART.c ****     {
 409              		.loc 1 1238 0
 410 0008 0E1C     		mov	r6, r1
 411              		.loc 1 1241 0
 412 000a 041C     		mov	r4, r0
 413 000c 002B     		cmp	r3, #0
 414 000e 07D0     		beq	.L42
 415              	.LVL24:
 416              	.L45:
1242:.\Generated_Source\PSoC4/TelemUART.c ****         {
1243:.\Generated_Source\PSoC4/TelemUART.c ****             do
1244:.\Generated_Source\PSoC4/TelemUART.c ****             {
1245:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_PutChar(string[buf_index]);
 417              		.loc 1 1245 0 discriminator 1
 418 0010 2078     		ldrb	r0, [r4]
 419 0012 0134     		add	r4, r4, #1
 420              	.LVL25:
 421 0014 FFF7FEFF 		bl	TelemUART_PutChar
 422              	.LVL26:
 423 0018 631B     		sub	r3, r4, r5
1246:.\Generated_Source\PSoC4/TelemUART.c ****                 buf_index++;
1247:.\Generated_Source\PSoC4/TelemUART.c ****             }while(buf_index < byteCount);
 424              		.loc 1 1247 0 discriminator 1
 425 001a DBB2     		uxtb	r3, r3
 426 001c B342     		cmp	r3, r6
 427 001e F7D3     		bcc	.L45
 428              	.L42:
1248:.\Generated_Source\PSoC4/TelemUART.c ****         }
1249:.\Generated_Source\PSoC4/TelemUART.c ****     }
 429              		.loc 1 1249 0
 430              		@ sp needed
 431              	.LVL27:
 432 0020 70BD     		pop	{r4, r5, r6, pc}
 433              	.L47:
 434 0022 C046     		.align	2
 435              	.L46:
 436 0024 00000000 		.word	.LANCHOR0
 437              		.cfi_endproc
 438              	.LFE11:
 439              		.size	TelemUART_PutArray, .-TelemUART_PutArray
 440              		.section	.text.TelemUART_PutCRLF,"ax",%progbits
 441              		.align	1
 442              		.global	TelemUART_PutCRLF
 443              		.code	16
 444              		.thumb_func
 445              		.type	TelemUART_PutCRLF, %function
 446              	TelemUART_PutCRLF:
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 31


 447              	.LFB12:
1250:.\Generated_Source\PSoC4/TelemUART.c **** 
1251:.\Generated_Source\PSoC4/TelemUART.c **** 
1252:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
1253:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_PutCRLF
1254:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
1255:.\Generated_Source\PSoC4/TelemUART.c ****     *
1256:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
1257:.\Generated_Source\PSoC4/TelemUART.c ****     *  Write a character and then carriage return and line feed.
1258:.\Generated_Source\PSoC4/TelemUART.c ****     *
1259:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
1260:.\Generated_Source\PSoC4/TelemUART.c ****     *  txDataByte: uint8 Character to send.
1261:.\Generated_Source\PSoC4/TelemUART.c ****     *
1262:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
1263:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
1264:.\Generated_Source\PSoC4/TelemUART.c ****     *
1265:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
1266:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_initVar - checked to identify that the component has been
1267:.\Generated_Source\PSoC4/TelemUART.c ****     *     initialized.
1268:.\Generated_Source\PSoC4/TelemUART.c ****     *
1269:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
1270:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
1271:.\Generated_Source\PSoC4/TelemUART.c ****     *
1272:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
1273:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_PutCRLF(uint8 txDataByte) 
1274:.\Generated_Source\PSoC4/TelemUART.c ****     {
 448              		.loc 1 1274 0
 449              		.cfi_startproc
 450              	.LVL28:
 451 0000 08B5     		push	{r3, lr}
 452              		.cfi_def_cfa_offset 8
 453              		.cfi_offset 3, -8
 454              		.cfi_offset 14, -4
1275:.\Generated_Source\PSoC4/TelemUART.c ****         /* If not Initialized then skip this function*/
1276:.\Generated_Source\PSoC4/TelemUART.c ****         if(TelemUART_initVar != 0u)
 455              		.loc 1 1276 0
 456 0002 064B     		ldr	r3, .L53
 457 0004 1B78     		ldrb	r3, [r3]
 458 0006 002B     		cmp	r3, #0
 459 0008 07D0     		beq	.L48
1277:.\Generated_Source\PSoC4/TelemUART.c ****         {
1278:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_PutChar(txDataByte);
 460              		.loc 1 1278 0
 461 000a FFF7FEFF 		bl	TelemUART_PutChar
 462              	.LVL29:
1279:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_PutChar(0x0Du);
 463              		.loc 1 1279 0
 464 000e 0D20     		mov	r0, #13
 465 0010 FFF7FEFF 		bl	TelemUART_PutChar
 466              	.LVL30:
1280:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_PutChar(0x0Au);
 467              		.loc 1 1280 0
 468 0014 0A20     		mov	r0, #10
 469 0016 FFF7FEFF 		bl	TelemUART_PutChar
 470              	.LVL31:
 471              	.L48:
1281:.\Generated_Source\PSoC4/TelemUART.c ****         }
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 32


1282:.\Generated_Source\PSoC4/TelemUART.c ****     }
 472              		.loc 1 1282 0
 473              		@ sp needed
 474 001a 08BD     		pop	{r3, pc}
 475              	.L54:
 476              		.align	2
 477              	.L53:
 478 001c 00000000 		.word	.LANCHOR0
 479              		.cfi_endproc
 480              	.LFE12:
 481              		.size	TelemUART_PutCRLF, .-TelemUART_PutCRLF
 482              		.section	.text.TelemUART_GetTxBufferSize,"ax",%progbits
 483              		.align	1
 484              		.global	TelemUART_GetTxBufferSize
 485              		.code	16
 486              		.thumb_func
 487              		.type	TelemUART_GetTxBufferSize, %function
 488              	TelemUART_GetTxBufferSize:
 489              	.LFB13:
1283:.\Generated_Source\PSoC4/TelemUART.c **** 
1284:.\Generated_Source\PSoC4/TelemUART.c **** 
1285:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
1286:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_GetTxBufferSize
1287:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
1288:.\Generated_Source\PSoC4/TelemUART.c ****     *
1289:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
1290:.\Generated_Source\PSoC4/TelemUART.c ****     *  Determine the amount of space left in the TX buffer and return the count in
1291:.\Generated_Source\PSoC4/TelemUART.c ****     *  bytes
1292:.\Generated_Source\PSoC4/TelemUART.c ****     *
1293:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
1294:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
1295:.\Generated_Source\PSoC4/TelemUART.c ****     *
1296:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
1297:.\Generated_Source\PSoC4/TelemUART.c ****     *  Integer count of the number of bytes left in the TX buffer
1298:.\Generated_Source\PSoC4/TelemUART.c ****     *
1299:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
1300:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_txBufferWrite - used to calculate left space.
1301:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_txBufferRead - used to calculate left space.
1302:.\Generated_Source\PSoC4/TelemUART.c ****     *
1303:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
1304:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
1305:.\Generated_Source\PSoC4/TelemUART.c ****     *
1306:.\Generated_Source\PSoC4/TelemUART.c ****     * Theory:
1307:.\Generated_Source\PSoC4/TelemUART.c ****     *  Allows the user to find out how full the TX Buffer is.
1308:.\Generated_Source\PSoC4/TelemUART.c ****     *
1309:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
1310:.\Generated_Source\PSoC4/TelemUART.c ****     uint8 TelemUART_GetTxBufferSize(void)
1311:.\Generated_Source\PSoC4/TelemUART.c ****                                                             
1312:.\Generated_Source\PSoC4/TelemUART.c ****     {
 490              		.loc 1 1312 0
 491              		.cfi_startproc
1313:.\Generated_Source\PSoC4/TelemUART.c ****         uint8 size;
1314:.\Generated_Source\PSoC4/TelemUART.c **** 
1315:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH)
1316:.\Generated_Source\PSoC4/TelemUART.c **** 
1317:.\Generated_Source\PSoC4/TelemUART.c ****             /* Disable Tx interrupt. */
1318:.\Generated_Source\PSoC4/TelemUART.c ****             /* Protect variables that could change on interrupt. */
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 33


1319:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_TX_INTERRUPT_ENABLED)
1320:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_DisableTxInt();
1321:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_TX_INTERRUPT_ENABLED */
1322:.\Generated_Source\PSoC4/TelemUART.c **** 
1323:.\Generated_Source\PSoC4/TelemUART.c ****             if(TelemUART_txBufferRead == TelemUART_txBufferWrite)
1324:.\Generated_Source\PSoC4/TelemUART.c ****             {
1325:.\Generated_Source\PSoC4/TelemUART.c ****                 size = 0u;
1326:.\Generated_Source\PSoC4/TelemUART.c ****             }
1327:.\Generated_Source\PSoC4/TelemUART.c ****             else if(TelemUART_txBufferRead < TelemUART_txBufferWrite)
1328:.\Generated_Source\PSoC4/TelemUART.c ****             {
1329:.\Generated_Source\PSoC4/TelemUART.c ****                 size = (TelemUART_txBufferWrite - TelemUART_txBufferRead);
1330:.\Generated_Source\PSoC4/TelemUART.c ****             }
1331:.\Generated_Source\PSoC4/TelemUART.c ****             else
1332:.\Generated_Source\PSoC4/TelemUART.c ****             {
1333:.\Generated_Source\PSoC4/TelemUART.c ****                 size = (TelemUART_TXBUFFERSIZE - TelemUART_txBufferRead) + TelemUART_txBufferWrite;
1334:.\Generated_Source\PSoC4/TelemUART.c ****             }
1335:.\Generated_Source\PSoC4/TelemUART.c **** 
1336:.\Generated_Source\PSoC4/TelemUART.c ****             /* Enable Tx interrupt. */
1337:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_TX_INTERRUPT_ENABLED)
1338:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_EnableTxInt();
1339:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_TX_INTERRUPT_ENABLED */
1340:.\Generated_Source\PSoC4/TelemUART.c **** 
1341:.\Generated_Source\PSoC4/TelemUART.c ****         #else /* TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH */
1342:.\Generated_Source\PSoC4/TelemUART.c **** 
1343:.\Generated_Source\PSoC4/TelemUART.c ****             size = TelemUART_TXSTATUS_REG;
 492              		.loc 1 1343 0
 493 0000 044B     		ldr	r3, .L58
1344:.\Generated_Source\PSoC4/TelemUART.c **** 
1345:.\Generated_Source\PSoC4/TelemUART.c ****             /* Is the fifo is full. */
1346:.\Generated_Source\PSoC4/TelemUART.c ****             if((size & TelemUART_TX_STS_FIFO_FULL) != 0u)
1347:.\Generated_Source\PSoC4/TelemUART.c ****             {
1348:.\Generated_Source\PSoC4/TelemUART.c ****                 size = TelemUART_FIFO_LENGTH;
 494              		.loc 1 1348 0
 495 0002 0420     		mov	r0, #4
1343:.\Generated_Source\PSoC4/TelemUART.c ****             size = TelemUART_TXSTATUS_REG;
 496              		.loc 1 1343 0
 497 0004 1B78     		ldrb	r3, [r3]
 498 0006 DBB2     		uxtb	r3, r3
 499              	.LVL32:
1346:.\Generated_Source\PSoC4/TelemUART.c ****             if((size & TelemUART_TX_STS_FIFO_FULL) != 0u)
 500              		.loc 1 1346 0
 501 0008 0342     		tst	r3, r0
 502 000a 02D1     		bne	.L56
1349:.\Generated_Source\PSoC4/TelemUART.c ****             }
1350:.\Generated_Source\PSoC4/TelemUART.c ****             else if((size & TelemUART_TX_STS_FIFO_EMPTY) != 0u)
 503              		.loc 1 1350 0
 504 000c 5B08     		lsr	r3, r3, #1
 505              	.LVL33:
 506 000e 0120     		mov	r0, #1
 507 0010 9843     		bic	r0, r3
 508              	.L56:
 509              	.LVL34:
1351:.\Generated_Source\PSoC4/TelemUART.c ****             {
1352:.\Generated_Source\PSoC4/TelemUART.c ****                 size = 0u;
1353:.\Generated_Source\PSoC4/TelemUART.c ****             }
1354:.\Generated_Source\PSoC4/TelemUART.c ****             else
1355:.\Generated_Source\PSoC4/TelemUART.c ****             {
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 34


1356:.\Generated_Source\PSoC4/TelemUART.c ****                 /* We only know there is data in the fifo. */
1357:.\Generated_Source\PSoC4/TelemUART.c ****                 size = 1u;
1358:.\Generated_Source\PSoC4/TelemUART.c ****             }
1359:.\Generated_Source\PSoC4/TelemUART.c **** 
1360:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH */
1361:.\Generated_Source\PSoC4/TelemUART.c **** 
1362:.\Generated_Source\PSoC4/TelemUART.c ****         return(size);
1363:.\Generated_Source\PSoC4/TelemUART.c ****     }
 510              		.loc 1 1363 0
 511              		@ sp needed
 512 0012 7047     		bx	lr
 513              	.L59:
 514              		.align	2
 515              	.L58:
 516 0014 63000F40 		.word	1074724963
 517              		.cfi_endproc
 518              	.LFE13:
 519              		.size	TelemUART_GetTxBufferSize, .-TelemUART_GetTxBufferSize
 520              		.section	.text.TelemUART_ClearTxBuffer,"ax",%progbits
 521              		.align	1
 522              		.global	TelemUART_ClearTxBuffer
 523              		.code	16
 524              		.thumb_func
 525              		.type	TelemUART_ClearTxBuffer, %function
 526              	TelemUART_ClearTxBuffer:
 527              	.LFB14:
1364:.\Generated_Source\PSoC4/TelemUART.c **** 
1365:.\Generated_Source\PSoC4/TelemUART.c **** 
1366:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
1367:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_ClearTxBuffer
1368:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
1369:.\Generated_Source\PSoC4/TelemUART.c ****     *
1370:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
1371:.\Generated_Source\PSoC4/TelemUART.c ****     *  Clears the TX RAM buffer by setting the read and write pointers both to zero.
1372:.\Generated_Source\PSoC4/TelemUART.c ****     *  Clears the hardware TX FIFO.  Any data present in the FIFO will not be sent.
1373:.\Generated_Source\PSoC4/TelemUART.c ****     *
1374:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
1375:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
1376:.\Generated_Source\PSoC4/TelemUART.c ****     *
1377:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
1378:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
1379:.\Generated_Source\PSoC4/TelemUART.c ****     *
1380:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
1381:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_txBufferWrite - cleared to zero.
1382:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_txBufferRead - cleared to zero.
1383:.\Generated_Source\PSoC4/TelemUART.c ****     *
1384:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
1385:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
1386:.\Generated_Source\PSoC4/TelemUART.c ****     *
1387:.\Generated_Source\PSoC4/TelemUART.c ****     * Theory:
1388:.\Generated_Source\PSoC4/TelemUART.c ****     *  Setting the pointers to zero makes the system believe there is no data to
1389:.\Generated_Source\PSoC4/TelemUART.c ****     *  read and writing will resume at address 0 overwriting any data that may have
1390:.\Generated_Source\PSoC4/TelemUART.c ****     *  remained in the RAM.
1391:.\Generated_Source\PSoC4/TelemUART.c ****     *
1392:.\Generated_Source\PSoC4/TelemUART.c ****     * Side Effects:
1393:.\Generated_Source\PSoC4/TelemUART.c ****     *  Any received data not read from the RAM buffer will be lost when overwritten.
1394:.\Generated_Source\PSoC4/TelemUART.c ****     *
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 35


1395:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
1396:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_ClearTxBuffer(void) 
1397:.\Generated_Source\PSoC4/TelemUART.c ****     {
 528              		.loc 1 1397 0
 529              		.cfi_startproc
 530 0000 08B5     		push	{r3, lr}
 531              		.cfi_def_cfa_offset 8
 532              		.cfi_offset 3, -8
 533              		.cfi_offset 14, -4
1398:.\Generated_Source\PSoC4/TelemUART.c ****         uint8 enableInterrupts;
1399:.\Generated_Source\PSoC4/TelemUART.c **** 
1400:.\Generated_Source\PSoC4/TelemUART.c ****         /* Enter critical section */
1401:.\Generated_Source\PSoC4/TelemUART.c ****         enableInterrupts = CyEnterCriticalSection();
 534              		.loc 1 1401 0
 535 0002 FFF7FEFF 		bl	CyEnterCriticalSection
 536              	.LVL35:
1402:.\Generated_Source\PSoC4/TelemUART.c ****         /* clear the HW FIFO */
1403:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_TXDATA_AUX_CTL_REG |=  TelemUART_TX_FIFO_CLR;
 537              		.loc 1 1403 0
 538 0006 054B     		ldr	r3, .L61
 539 0008 0122     		mov	r2, #1
 540 000a 1978     		ldrb	r1, [r3]
1404:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_TXDATA_AUX_CTL_REG &= (uint8)~TelemUART_TX_FIFO_CLR;
1405:.\Generated_Source\PSoC4/TelemUART.c ****         /* Exit critical section */
1406:.\Generated_Source\PSoC4/TelemUART.c ****         CyExitCriticalSection(enableInterrupts);
1407:.\Generated_Source\PSoC4/TelemUART.c **** 
1408:.\Generated_Source\PSoC4/TelemUART.c ****         #if(TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH)
1409:.\Generated_Source\PSoC4/TelemUART.c **** 
1410:.\Generated_Source\PSoC4/TelemUART.c ****             /* Disable Tx interrupt. */
1411:.\Generated_Source\PSoC4/TelemUART.c ****             /* Protect variables that could change on interrupt. */
1412:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_TX_INTERRUPT_ENABLED)
1413:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_DisableTxInt();
1414:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_TX_INTERRUPT_ENABLED */
1415:.\Generated_Source\PSoC4/TelemUART.c **** 
1416:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_txBufferRead = 0u;
1417:.\Generated_Source\PSoC4/TelemUART.c ****             TelemUART_txBufferWrite = 0u;
1418:.\Generated_Source\PSoC4/TelemUART.c **** 
1419:.\Generated_Source\PSoC4/TelemUART.c ****             /* Enable Tx interrupt. */
1420:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_TX_INTERRUPT_ENABLED)
1421:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_EnableTxInt();
1422:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_TX_INTERRUPT_ENABLED */
1423:.\Generated_Source\PSoC4/TelemUART.c **** 
1424:.\Generated_Source\PSoC4/TelemUART.c ****         #endif /* End TelemUART_TXBUFFERSIZE > TelemUART_FIFO_LENGTH */
1425:.\Generated_Source\PSoC4/TelemUART.c ****     }
 541              		.loc 1 1425 0
 542              		@ sp needed
1403:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_TXDATA_AUX_CTL_REG |=  TelemUART_TX_FIFO_CLR;
 543              		.loc 1 1403 0
 544 000c 1143     		orr	r1, r2
 545 000e 1970     		strb	r1, [r3]
1404:.\Generated_Source\PSoC4/TelemUART.c ****         TelemUART_TXDATA_AUX_CTL_REG &= (uint8)~TelemUART_TX_FIFO_CLR;
 546              		.loc 1 1404 0
 547 0010 1978     		ldrb	r1, [r3]
 548 0012 9143     		bic	r1, r2
 549 0014 1970     		strb	r1, [r3]
1406:.\Generated_Source\PSoC4/TelemUART.c ****         CyExitCriticalSection(enableInterrupts);
 550              		.loc 1 1406 0
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 36


 551 0016 FFF7FEFF 		bl	CyExitCriticalSection
 552              	.LVL36:
 553              		.loc 1 1425 0
 554 001a 08BD     		pop	{r3, pc}
 555              	.L62:
 556              		.align	2
 557              	.L61:
 558 001c 93000F40 		.word	1074725011
 559              		.cfi_endproc
 560              	.LFE14:
 561              		.size	TelemUART_ClearTxBuffer, .-TelemUART_ClearTxBuffer
 562              		.section	.text.TelemUART_SendBreak,"ax",%progbits
 563              		.align	1
 564              		.global	TelemUART_SendBreak
 565              		.code	16
 566              		.thumb_func
 567              		.type	TelemUART_SendBreak, %function
 568              	TelemUART_SendBreak:
 569              	.LFB15:
1426:.\Generated_Source\PSoC4/TelemUART.c **** 
1427:.\Generated_Source\PSoC4/TelemUART.c **** 
1428:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
1429:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_SendBreak
1430:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
1431:.\Generated_Source\PSoC4/TelemUART.c ****     *
1432:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
1433:.\Generated_Source\PSoC4/TelemUART.c ****     *  Write a Break command to the UART
1434:.\Generated_Source\PSoC4/TelemUART.c ****     *
1435:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
1436:.\Generated_Source\PSoC4/TelemUART.c ****     *  uint8 retMode:  Wait mode,
1437:.\Generated_Source\PSoC4/TelemUART.c ****     *   0 - Initialize registers for Break, sends the Break signal and return
1438:.\Generated_Source\PSoC4/TelemUART.c ****     *       imediately.
1439:.\Generated_Source\PSoC4/TelemUART.c ****     *   1 - Wait until Break sending is complete, reinitialize registers to normal
1440:.\Generated_Source\PSoC4/TelemUART.c ****     *       transmission mode then return.
1441:.\Generated_Source\PSoC4/TelemUART.c ****     *   2 - Reinitialize registers to normal transmission mode then return.
1442:.\Generated_Source\PSoC4/TelemUART.c ****     *   3 - both steps: 0 and 1
1443:.\Generated_Source\PSoC4/TelemUART.c ****     *       init registers for Break, send Break signal
1444:.\Generated_Source\PSoC4/TelemUART.c ****     *       wait until Break sending is complete, reinit registers to normal
1445:.\Generated_Source\PSoC4/TelemUART.c ****     *       transmission mode then return.
1446:.\Generated_Source\PSoC4/TelemUART.c ****     *
1447:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
1448:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
1449:.\Generated_Source\PSoC4/TelemUART.c ****     *
1450:.\Generated_Source\PSoC4/TelemUART.c ****     * Global Variables:
1451:.\Generated_Source\PSoC4/TelemUART.c ****     *  TelemUART_initVar - checked to identify that the component has been
1452:.\Generated_Source\PSoC4/TelemUART.c ****     *     initialized.
1453:.\Generated_Source\PSoC4/TelemUART.c ****     *  tx_period - static variable, used for keeping TX period configuration.
1454:.\Generated_Source\PSoC4/TelemUART.c ****     *
1455:.\Generated_Source\PSoC4/TelemUART.c ****     * Reentrant:
1456:.\Generated_Source\PSoC4/TelemUART.c ****     *  No.
1457:.\Generated_Source\PSoC4/TelemUART.c ****     *
1458:.\Generated_Source\PSoC4/TelemUART.c ****     * Theory:
1459:.\Generated_Source\PSoC4/TelemUART.c ****     *  SendBreak function initializes registers to send 13-bit break signal. It is
1460:.\Generated_Source\PSoC4/TelemUART.c ****     *  important to return the registers configuration to normal for continue 8-bit
1461:.\Generated_Source\PSoC4/TelemUART.c ****     *  operation.
1462:.\Generated_Source\PSoC4/TelemUART.c ****     *  Trere are 3 variants for this API usage:
1463:.\Generated_Source\PSoC4/TelemUART.c ****     *  1) SendBreak(3) - function will send the Break signal and take care on the
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 37


1464:.\Generated_Source\PSoC4/TelemUART.c ****     *     configuration returning. Funcition will block CPU untill transmition
1465:.\Generated_Source\PSoC4/TelemUART.c ****     *     complete.
1466:.\Generated_Source\PSoC4/TelemUART.c ****     *  2) User may want to use bloking time if UART configured to the low speed
1467:.\Generated_Source\PSoC4/TelemUART.c ****     *     operation
1468:.\Generated_Source\PSoC4/TelemUART.c ****     *     Emample for this case:
1469:.\Generated_Source\PSoC4/TelemUART.c ****     *     SendBreak(0);     - init Break signal transmition
1470:.\Generated_Source\PSoC4/TelemUART.c ****     *         Add your code here to use CPU time
1471:.\Generated_Source\PSoC4/TelemUART.c ****     *     SendBreak(1);     - complete Break operation
1472:.\Generated_Source\PSoC4/TelemUART.c ****     *  3) Same to 2) but user may want to init and use the interrupt for complete
1473:.\Generated_Source\PSoC4/TelemUART.c ****     *     break operation.
1474:.\Generated_Source\PSoC4/TelemUART.c ****     *     Example for this case:
1475:.\Generated_Source\PSoC4/TelemUART.c ****     *     Init TX interrupt whith "TX - On TX Complete" parameter
1476:.\Generated_Source\PSoC4/TelemUART.c ****     *     SendBreak(0);     - init Break signal transmition
1477:.\Generated_Source\PSoC4/TelemUART.c ****     *         Add your code here to use CPU time
1478:.\Generated_Source\PSoC4/TelemUART.c ****     *     When interrupt appear with UART_TX_STS_COMPLETE status:
1479:.\Generated_Source\PSoC4/TelemUART.c ****     *     SendBreak(2);     - complete Break operation
1480:.\Generated_Source\PSoC4/TelemUART.c ****     *
1481:.\Generated_Source\PSoC4/TelemUART.c ****     * Side Effects:
1482:.\Generated_Source\PSoC4/TelemUART.c ****     *   Uses static variable to keep registers configuration.
1483:.\Generated_Source\PSoC4/TelemUART.c ****     *
1484:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
1485:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_SendBreak(uint8 retMode) 
1486:.\Generated_Source\PSoC4/TelemUART.c ****     {
 570              		.loc 1 1486 0
 571              		.cfi_startproc
 572              	.LVL37:
1487:.\Generated_Source\PSoC4/TelemUART.c **** 
1488:.\Generated_Source\PSoC4/TelemUART.c ****         /* If not Initialized then skip this function*/
1489:.\Generated_Source\PSoC4/TelemUART.c ****         if(TelemUART_initVar != 0u)
 573              		.loc 1 1489 0
 574 0000 134B     		ldr	r3, .L87
 575 0002 1A78     		ldrb	r2, [r3]
 576 0004 002A     		cmp	r2, #0
 577 0006 22D0     		beq	.L63
 578              	.LBB2:
1490:.\Generated_Source\PSoC4/TelemUART.c ****         {
1491:.\Generated_Source\PSoC4/TelemUART.c ****             /*Set the Counter to 13-bits and transmit a 00 byte*/
1492:.\Generated_Source\PSoC4/TelemUART.c ****             /*When that is done then reset the counter value back*/
1493:.\Generated_Source\PSoC4/TelemUART.c ****             uint8 tmpStat;
1494:.\Generated_Source\PSoC4/TelemUART.c **** 
1495:.\Generated_Source\PSoC4/TelemUART.c ****             #if(TelemUART_HD_ENABLED) /* Half Duplex mode*/
1496:.\Generated_Source\PSoC4/TelemUART.c **** 
1497:.\Generated_Source\PSoC4/TelemUART.c ****                 if( (retMode == TelemUART_SEND_BREAK) ||
1498:.\Generated_Source\PSoC4/TelemUART.c ****                     (retMode == TelemUART_SEND_WAIT_REINIT ) )
1499:.\Generated_Source\PSoC4/TelemUART.c ****                 {
1500:.\Generated_Source\PSoC4/TelemUART.c ****                     /* CTRL_HD_SEND_BREAK - sends break bits in HD mode*/
1501:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_WriteControlRegister(TelemUART_ReadControlRegister() |
1502:.\Generated_Source\PSoC4/TelemUART.c ****                                                           TelemUART_CTRL_HD_SEND_BREAK);
1503:.\Generated_Source\PSoC4/TelemUART.c ****                     /* Send zeros*/
1504:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_TXDATA_REG = 0u;
1505:.\Generated_Source\PSoC4/TelemUART.c **** 
1506:.\Generated_Source\PSoC4/TelemUART.c ****                     do /*wait until transmit starts*/
1507:.\Generated_Source\PSoC4/TelemUART.c ****                     {
1508:.\Generated_Source\PSoC4/TelemUART.c ****                         tmpStat = TelemUART_TXSTATUS_REG;
1509:.\Generated_Source\PSoC4/TelemUART.c ****                     }while((tmpStat & TelemUART_TX_STS_FIFO_EMPTY) != 0u);
1510:.\Generated_Source\PSoC4/TelemUART.c ****                 }
1511:.\Generated_Source\PSoC4/TelemUART.c **** 
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 38


1512:.\Generated_Source\PSoC4/TelemUART.c ****                 if( (retMode == TelemUART_WAIT_FOR_COMPLETE_REINIT) ||
1513:.\Generated_Source\PSoC4/TelemUART.c ****                     (retMode == TelemUART_SEND_WAIT_REINIT) )
1514:.\Generated_Source\PSoC4/TelemUART.c ****                 {
1515:.\Generated_Source\PSoC4/TelemUART.c ****                     do /*wait until transmit complete*/
1516:.\Generated_Source\PSoC4/TelemUART.c ****                     {
1517:.\Generated_Source\PSoC4/TelemUART.c ****                         tmpStat = TelemUART_TXSTATUS_REG;
1518:.\Generated_Source\PSoC4/TelemUART.c ****                     }while(((uint8)~tmpStat & TelemUART_TX_STS_COMPLETE) != 0u);
1519:.\Generated_Source\PSoC4/TelemUART.c ****                 }
1520:.\Generated_Source\PSoC4/TelemUART.c **** 
1521:.\Generated_Source\PSoC4/TelemUART.c ****                 if( (retMode == TelemUART_WAIT_FOR_COMPLETE_REINIT) ||
1522:.\Generated_Source\PSoC4/TelemUART.c ****                     (retMode == TelemUART_REINIT) ||
1523:.\Generated_Source\PSoC4/TelemUART.c ****                     (retMode == TelemUART_SEND_WAIT_REINIT) )
1524:.\Generated_Source\PSoC4/TelemUART.c ****                 {
1525:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_WriteControlRegister(TelemUART_ReadControlRegister() &
1526:.\Generated_Source\PSoC4/TelemUART.c ****                                                   (uint8)~TelemUART_CTRL_HD_SEND_BREAK);
1527:.\Generated_Source\PSoC4/TelemUART.c ****                 }
1528:.\Generated_Source\PSoC4/TelemUART.c **** 
1529:.\Generated_Source\PSoC4/TelemUART.c ****             #else /* TelemUART_HD_ENABLED Full Duplex mode */
1530:.\Generated_Source\PSoC4/TelemUART.c **** 
1531:.\Generated_Source\PSoC4/TelemUART.c ****                 static uint8 tx_period;
1532:.\Generated_Source\PSoC4/TelemUART.c **** 
1533:.\Generated_Source\PSoC4/TelemUART.c ****                 if( (retMode == TelemUART_SEND_BREAK) ||
 579              		.loc 1 1533 0
 580 0008 0028     		cmp	r0, #0
 581 000a 01D0     		beq	.L66
 582              		.loc 1 1533 0 is_stmt 0 discriminator 1
 583 000c 0328     		cmp	r0, #3
 584 000e 17D1     		bne	.L67
 585              	.L66:
1534:.\Generated_Source\PSoC4/TelemUART.c ****                     (retMode == TelemUART_SEND_WAIT_REINIT) )
1535:.\Generated_Source\PSoC4/TelemUART.c ****                 {
1536:.\Generated_Source\PSoC4/TelemUART.c ****                     /* CTRL_HD_SEND_BREAK - skip to send parity bit at Break signal in Full Duplex 
1537:.\Generated_Source\PSoC4/TelemUART.c ****                     #if( (TelemUART_PARITY_TYPE != TelemUART__B_UART__NONE_REVB) || \
1538:.\Generated_Source\PSoC4/TelemUART.c ****                                         (TelemUART_PARITY_TYPE_SW != 0u) )
1539:.\Generated_Source\PSoC4/TelemUART.c ****                         TelemUART_WriteControlRegister(TelemUART_ReadControlRegister() |
1540:.\Generated_Source\PSoC4/TelemUART.c ****                                                               TelemUART_CTRL_HD_SEND_BREAK);
1541:.\Generated_Source\PSoC4/TelemUART.c ****                     #endif /* End TelemUART_PARITY_TYPE != TelemUART__B_UART__NONE_REVB  */
1542:.\Generated_Source\PSoC4/TelemUART.c **** 
1543:.\Generated_Source\PSoC4/TelemUART.c ****                     #if(TelemUART_TXCLKGEN_DP)
1544:.\Generated_Source\PSoC4/TelemUART.c ****                         tx_period = TelemUART_TXBITCLKTX_COMPLETE_REG;
 586              		.loc 1 1544 0 is_stmt 1
 587 0010 104A     		ldr	r2, .L87+4
 588 0012 1178     		ldrb	r1, [r2]
 589 0014 5970     		strb	r1, [r3, #1]
1545:.\Generated_Source\PSoC4/TelemUART.c ****                         TelemUART_TXBITCLKTX_COMPLETE_REG = TelemUART_TXBITCTR_BREAKBITS;
 590              		.loc 1 1545 0
 591 0016 6721     		mov	r1, #103
 592 0018 1170     		strb	r1, [r2]
1546:.\Generated_Source\PSoC4/TelemUART.c ****                     #else
1547:.\Generated_Source\PSoC4/TelemUART.c ****                         tx_period = TelemUART_TXBITCTR_PERIOD_REG;
1548:.\Generated_Source\PSoC4/TelemUART.c ****                         TelemUART_TXBITCTR_PERIOD_REG = TelemUART_TXBITCTR_BREAKBITS8X;
1549:.\Generated_Source\PSoC4/TelemUART.c ****                     #endif /* End TelemUART_TXCLKGEN_DP */
1550:.\Generated_Source\PSoC4/TelemUART.c **** 
1551:.\Generated_Source\PSoC4/TelemUART.c ****                     /* Send zeros*/
1552:.\Generated_Source\PSoC4/TelemUART.c ****                     TelemUART_TXDATA_REG = 0u;
 593              		.loc 1 1552 0
 594 001a 0F4A     		ldr	r2, .L87+8
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 39


 595 001c 0021     		mov	r1, #0
 596 001e 1170     		strb	r1, [r2]
 597              	.L69:
1553:.\Generated_Source\PSoC4/TelemUART.c **** 
1554:.\Generated_Source\PSoC4/TelemUART.c ****                     do /* wait until transmit starts */
1555:.\Generated_Source\PSoC4/TelemUART.c ****                     {
1556:.\Generated_Source\PSoC4/TelemUART.c ****                         tmpStat = TelemUART_TXSTATUS_REG;
 598              		.loc 1 1556 0 discriminator 1
 599 0020 0E4A     		ldr	r2, .L87+12
 600 0022 1178     		ldrb	r1, [r2]
 601              	.LVL38:
1557:.\Generated_Source\PSoC4/TelemUART.c ****                     }while((tmpStat & TelemUART_TX_STS_FIFO_EMPTY) != 0u);
 602              		.loc 1 1557 0 discriminator 1
 603 0024 0222     		mov	r2, #2
 604 0026 1142     		tst	r1, r2
 605 0028 FAD1     		bne	.L69
1558:.\Generated_Source\PSoC4/TelemUART.c ****                 }
1559:.\Generated_Source\PSoC4/TelemUART.c **** 
1560:.\Generated_Source\PSoC4/TelemUART.c ****                 if( (retMode == TelemUART_WAIT_FOR_COMPLETE_REINIT) ||
 606              		.loc 1 1560 0
 607 002a 011C     		mov	r1, r0
 608              	.LVL39:
 609 002c 9143     		bic	r1, r2
 610 002e 0129     		cmp	r1, #1
 611 0030 08D0     		beq	.L74
 612              	.L73:
1561:.\Generated_Source\PSoC4/TelemUART.c ****                     (retMode == TelemUART_SEND_WAIT_REINIT) )
1562:.\Generated_Source\PSoC4/TelemUART.c ****                 {
1563:.\Generated_Source\PSoC4/TelemUART.c ****                     do /*wait until transmit complete*/
1564:.\Generated_Source\PSoC4/TelemUART.c ****                     {
1565:.\Generated_Source\PSoC4/TelemUART.c ****                         tmpStat = TelemUART_TXSTATUS_REG;
1566:.\Generated_Source\PSoC4/TelemUART.c ****                     }while(((uint8)~tmpStat & TelemUART_TX_STS_COMPLETE) != 0u);
1567:.\Generated_Source\PSoC4/TelemUART.c ****                 }
1568:.\Generated_Source\PSoC4/TelemUART.c **** 
1569:.\Generated_Source\PSoC4/TelemUART.c ****                 if( (retMode == TelemUART_WAIT_FOR_COMPLETE_REINIT) ||
 613              		.loc 1 1569 0
 614 0032 0138     		sub	r0, r0, #1
 615              	.LVL40:
 616 0034 0228     		cmp	r0, #2
 617 0036 0AD8     		bhi	.L63
1570:.\Generated_Source\PSoC4/TelemUART.c ****                     (retMode == TelemUART_REINIT) ||
1571:.\Generated_Source\PSoC4/TelemUART.c ****                     (retMode == TelemUART_SEND_WAIT_REINIT) )
1572:.\Generated_Source\PSoC4/TelemUART.c ****                 {
1573:.\Generated_Source\PSoC4/TelemUART.c **** 
1574:.\Generated_Source\PSoC4/TelemUART.c ****                     #if(TelemUART_TXCLKGEN_DP)
1575:.\Generated_Source\PSoC4/TelemUART.c ****                         TelemUART_TXBITCLKTX_COMPLETE_REG = tx_period;
 618              		.loc 1 1575 0
 619 0038 5A78     		ldrb	r2, [r3, #1]
 620 003a 064B     		ldr	r3, .L87+4
 621 003c 1A70     		strb	r2, [r3]
 622 003e 06E0     		b	.L63
 623              	.LVL41:
 624              	.L67:
1560:.\Generated_Source\PSoC4/TelemUART.c ****                 if( (retMode == TelemUART_WAIT_FOR_COMPLETE_REINIT) ||
 625              		.loc 1 1560 0
 626 0040 0128     		cmp	r0, #1
 627 0042 F6D1     		bne	.L73
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 40


 628              	.L74:
1565:.\Generated_Source\PSoC4/TelemUART.c ****                         tmpStat = TelemUART_TXSTATUS_REG;
 629              		.loc 1 1565 0 discriminator 1
 630 0044 054A     		ldr	r2, .L87+12
 631 0046 1278     		ldrb	r2, [r2]
 632              	.LVL42:
1566:.\Generated_Source\PSoC4/TelemUART.c ****                     }while(((uint8)~tmpStat & TelemUART_TX_STS_COMPLETE) != 0u);
 633              		.loc 1 1566 0 discriminator 1
 634 0048 D107     		lsl	r1, r2, #31
 635 004a FBD5     		bpl	.L74
 636 004c F1E7     		b	.L73
 637              	.LVL43:
 638              	.L63:
 639              	.LBE2:
1576:.\Generated_Source\PSoC4/TelemUART.c ****                     #else
1577:.\Generated_Source\PSoC4/TelemUART.c ****                         TelemUART_TXBITCTR_PERIOD_REG = tx_period;
1578:.\Generated_Source\PSoC4/TelemUART.c ****                     #endif /* End TelemUART_TXCLKGEN_DP */
1579:.\Generated_Source\PSoC4/TelemUART.c **** 
1580:.\Generated_Source\PSoC4/TelemUART.c ****                     #if( (TelemUART_PARITY_TYPE != TelemUART__B_UART__NONE_REVB) || \
1581:.\Generated_Source\PSoC4/TelemUART.c ****                          (TelemUART_PARITY_TYPE_SW != 0u) )
1582:.\Generated_Source\PSoC4/TelemUART.c ****                         TelemUART_WriteControlRegister(TelemUART_ReadControlRegister() &
1583:.\Generated_Source\PSoC4/TelemUART.c ****                                                       (uint8)~TelemUART_CTRL_HD_SEND_BREAK);
1584:.\Generated_Source\PSoC4/TelemUART.c ****                     #endif /* End TelemUART_PARITY_TYPE != NONE */
1585:.\Generated_Source\PSoC4/TelemUART.c ****                 }
1586:.\Generated_Source\PSoC4/TelemUART.c ****             #endif    /* End TelemUART_HD_ENABLED */
1587:.\Generated_Source\PSoC4/TelemUART.c ****         }
1588:.\Generated_Source\PSoC4/TelemUART.c ****     }
 640              		.loc 1 1588 0
 641              		@ sp needed
 642 004e 7047     		bx	lr
 643              	.L88:
 644              		.align	2
 645              	.L87:
 646 0050 00000000 		.word	.LANCHOR0
 647 0054 32000F40 		.word	1074724914
 648 0058 43000F40 		.word	1074724931
 649 005c 63000F40 		.word	1074724963
 650              		.cfi_endproc
 651              	.LFE15:
 652              		.size	TelemUART_SendBreak, .-TelemUART_SendBreak
 653              		.section	.text.TelemUART_SetTxAddressMode,"ax",%progbits
 654              		.align	1
 655              		.global	TelemUART_SetTxAddressMode
 656              		.code	16
 657              		.thumb_func
 658              		.type	TelemUART_SetTxAddressMode, %function
 659              	TelemUART_SetTxAddressMode:
 660              	.LFB16:
1589:.\Generated_Source\PSoC4/TelemUART.c **** 
1590:.\Generated_Source\PSoC4/TelemUART.c **** 
1591:.\Generated_Source\PSoC4/TelemUART.c ****     /*******************************************************************************
1592:.\Generated_Source\PSoC4/TelemUART.c ****     * Function Name: TelemUART_SetTxAddressMode
1593:.\Generated_Source\PSoC4/TelemUART.c ****     ********************************************************************************
1594:.\Generated_Source\PSoC4/TelemUART.c ****     *
1595:.\Generated_Source\PSoC4/TelemUART.c ****     * Summary:
1596:.\Generated_Source\PSoC4/TelemUART.c ****     *  Set the transmit addressing mode
1597:.\Generated_Source\PSoC4/TelemUART.c ****     *
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 41


1598:.\Generated_Source\PSoC4/TelemUART.c ****     * Parameters:
1599:.\Generated_Source\PSoC4/TelemUART.c ****     *  addressMode: 0 -> Space
1600:.\Generated_Source\PSoC4/TelemUART.c ****     *               1 -> Mark
1601:.\Generated_Source\PSoC4/TelemUART.c ****     *
1602:.\Generated_Source\PSoC4/TelemUART.c ****     * Return:
1603:.\Generated_Source\PSoC4/TelemUART.c ****     *  None.
1604:.\Generated_Source\PSoC4/TelemUART.c ****     *
1605:.\Generated_Source\PSoC4/TelemUART.c ****     *******************************************************************************/
1606:.\Generated_Source\PSoC4/TelemUART.c ****     void TelemUART_SetTxAddressMode(uint8 addressMode) 
1607:.\Generated_Source\PSoC4/TelemUART.c ****     {
 661              		.loc 1 1607 0
 662              		.cfi_startproc
 663              	.LVL44:
1608:.\Generated_Source\PSoC4/TelemUART.c ****         /* Mark/Space sending enable*/
1609:.\Generated_Source\PSoC4/TelemUART.c ****         if(addressMode != 0u)
1610:.\Generated_Source\PSoC4/TelemUART.c ****         {
1611:.\Generated_Source\PSoC4/TelemUART.c ****             #if( TelemUART_CONTROL_REG_REMOVED == 0u )
1612:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_WriteControlRegister(TelemUART_ReadControlRegister() |
1613:.\Generated_Source\PSoC4/TelemUART.c ****                                                       TelemUART_CTRL_MARK);
1614:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_CONTROL_REG_REMOVED == 0u */
1615:.\Generated_Source\PSoC4/TelemUART.c ****         }
1616:.\Generated_Source\PSoC4/TelemUART.c ****         else
1617:.\Generated_Source\PSoC4/TelemUART.c ****         {
1618:.\Generated_Source\PSoC4/TelemUART.c ****             #if( TelemUART_CONTROL_REG_REMOVED == 0u )
1619:.\Generated_Source\PSoC4/TelemUART.c ****                 TelemUART_WriteControlRegister(TelemUART_ReadControlRegister() &
1620:.\Generated_Source\PSoC4/TelemUART.c ****                                                     (uint8)~TelemUART_CTRL_MARK);
1621:.\Generated_Source\PSoC4/TelemUART.c ****             #endif /* End TelemUART_CONTROL_REG_REMOVED == 0u */
1622:.\Generated_Source\PSoC4/TelemUART.c ****         }
1623:.\Generated_Source\PSoC4/TelemUART.c ****     }
 664              		.loc 1 1623 0
 665              		@ sp needed
 666 0000 7047     		bx	lr
 667              		.cfi_endproc
 668              	.LFE16:
 669              		.size	TelemUART_SetTxAddressMode, .-TelemUART_SetTxAddressMode
 670              		.global	TelemUART_initVar
 671              		.bss
 672              		.set	.LANCHOR0,. + 0
 673              		.type	TelemUART_initVar, %object
 674              		.size	TelemUART_initVar, 1
 675              	TelemUART_initVar:
 676 0000 00       		.space	1
 677              		.type	tx_period.4771, %object
 678              		.size	tx_period.4771, 1
 679              	tx_period.4771:
 680 0001 00       		.space	1
 681              		.text
 682              	.Letext0:
 683              		.file 2 ".\\Generated_Source\\PSoC4\\cytypes.h"
 684              		.file 3 ".\\Generated_Source\\PSoC4\\TelemUART_IntClock.h"
 685              		.file 4 ".\\Generated_Source\\PSoC4\\CyLib.h"
 686              		.section	.debug_info,"",%progbits
 687              	.Ldebug_info0:
 688 0000 4C040000 		.4byte	0x44c
 689 0004 0400     		.2byte	0x4
 690 0006 00000000 		.4byte	.Ldebug_abbrev0
 691 000a 04       		.byte	0x4
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 42


 692 000b 01       		.uleb128 0x1
 693 000c F8020000 		.4byte	.LASF46
 694 0010 01       		.byte	0x1
 695 0011 0E000000 		.4byte	.LASF47
 696 0015 33000000 		.4byte	.LASF48
 697 0019 00000000 		.4byte	.Ldebug_ranges0+0
 698 001d 00000000 		.4byte	0
 699 0021 00000000 		.4byte	.Ldebug_line0
 700 0025 02       		.uleb128 0x2
 701 0026 01       		.byte	0x1
 702 0027 06       		.byte	0x6
 703 0028 E8030000 		.4byte	.LASF0
 704 002c 02       		.uleb128 0x2
 705 002d 01       		.byte	0x1
 706 002e 08       		.byte	0x8
 707 002f 17020000 		.4byte	.LASF1
 708 0033 02       		.uleb128 0x2
 709 0034 02       		.byte	0x2
 710 0035 05       		.byte	0x5
 711 0036 EE020000 		.4byte	.LASF2
 712 003a 02       		.uleb128 0x2
 713 003b 02       		.byte	0x2
 714 003c 07       		.byte	0x7
 715 003d 85000000 		.4byte	.LASF3
 716 0041 02       		.uleb128 0x2
 717 0042 04       		.byte	0x4
 718 0043 05       		.byte	0x5
 719 0044 A1030000 		.4byte	.LASF4
 720 0048 02       		.uleb128 0x2
 721 0049 04       		.byte	0x4
 722 004a 07       		.byte	0x7
 723 004b 0B010000 		.4byte	.LASF5
 724 004f 02       		.uleb128 0x2
 725 0050 08       		.byte	0x8
 726 0051 05       		.byte	0x5
 727 0052 00000000 		.4byte	.LASF6
 728 0056 02       		.uleb128 0x2
 729 0057 08       		.byte	0x8
 730 0058 07       		.byte	0x7
 731 0059 BB000000 		.4byte	.LASF7
 732 005d 03       		.uleb128 0x3
 733 005e 04       		.byte	0x4
 734 005f 05       		.byte	0x5
 735 0060 696E7400 		.ascii	"int\000"
 736 0064 02       		.uleb128 0x2
 737 0065 04       		.byte	0x4
 738 0066 07       		.byte	0x7
 739 0067 25020000 		.4byte	.LASF8
 740 006b 04       		.uleb128 0x4
 741 006c 1D010000 		.4byte	.LASF9
 742 0070 02       		.byte	0x2
 743 0071 A1       		.byte	0xa1
 744 0072 2C000000 		.4byte	0x2c
 745 0076 04       		.uleb128 0x4
 746 0077 E7010000 		.4byte	.LASF10
 747 007b 02       		.byte	0x2
 748 007c A2       		.byte	0xa2
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 43


 749 007d 3A000000 		.4byte	0x3a
 750 0081 02       		.uleb128 0x2
 751 0082 04       		.byte	0x4
 752 0083 04       		.byte	0x4
 753 0084 B5000000 		.4byte	.LASF11
 754 0088 02       		.uleb128 0x2
 755 0089 08       		.byte	0x8
 756 008a 04       		.byte	0x4
 757 008b A4010000 		.4byte	.LASF12
 758 008f 04       		.uleb128 0x4
 759 0090 C6020000 		.4byte	.LASF13
 760 0094 02       		.byte	0x2
 761 0095 B2       		.byte	0xb2
 762 0096 9A000000 		.4byte	0x9a
 763 009a 02       		.uleb128 0x2
 764 009b 01       		.byte	0x1
 765 009c 08       		.byte	0x8
 766 009d E1020000 		.4byte	.LASF14
 767 00a1 05       		.uleb128 0x5
 768 00a2 F6000000 		.4byte	.LASF15
 769 00a6 02       		.byte	0x2
 770 00a7 4B01     		.2byte	0x14b
 771 00a9 AD000000 		.4byte	0xad
 772 00ad 06       		.uleb128 0x6
 773 00ae 6B000000 		.4byte	0x6b
 774 00b2 02       		.uleb128 0x2
 775 00b3 04       		.byte	0x4
 776 00b4 07       		.byte	0x7
 777 00b5 BD020000 		.4byte	.LASF16
 778 00b9 07       		.uleb128 0x7
 779 00ba 9B020000 		.4byte	.LASF49
 780 00be 01       		.byte	0x1
 781 00bf 65       		.byte	0x65
 782 00c0 00000000 		.4byte	.LFB1
 783 00c4 20000000 		.4byte	.LFE1-.LFB1
 784 00c8 01       		.uleb128 0x1
 785 00c9 9C       		.byte	0x9c
 786 00ca 08       		.uleb128 0x8
 787 00cb BE030000 		.4byte	.LASF17
 788 00cf 01       		.byte	0x1
 789 00d0 AE       		.byte	0xae
 790 00d1 00000000 		.4byte	.LFB2
 791 00d5 24000000 		.4byte	.LFE2-.LFB2
 792 00d9 01       		.uleb128 0x1
 793 00da 9C       		.byte	0x9c
 794 00db 11010000 		.4byte	0x111
 795 00df 09       		.uleb128 0x9
 796 00e0 47010000 		.4byte	.LASF20
 797 00e4 01       		.byte	0x1
 798 00e5 B0       		.byte	0xb0
 799 00e6 6B000000 		.4byte	0x6b
 800 00ea 00000000 		.4byte	.LLST0
 801 00ee 0A       		.uleb128 0xa
 802 00ef 06000000 		.4byte	.LVL0
 803 00f3 25040000 		.4byte	0x425
 804 00f7 0A       		.uleb128 0xa
 805 00f8 16000000 		.4byte	.LVL2
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 44


 806 00fc 30040000 		.4byte	0x430
 807 0100 0B       		.uleb128 0xb
 808 0101 1C000000 		.4byte	.LVL3
 809 0105 37040000 		.4byte	0x437
 810 0109 0C       		.uleb128 0xc
 811 010a 01       		.uleb128 0x1
 812 010b 50       		.byte	0x50
 813 010c 02       		.uleb128 0x2
 814 010d 74       		.byte	0x74
 815 010e 00       		.sleb128 0
 816 010f 00       		.byte	0
 817 0110 00       		.byte	0
 818 0111 08       		.uleb128 0x8
 819 0112 FB000000 		.4byte	.LASF18
 820 0116 01       		.byte	0x1
 821 0117 49       		.byte	0x49
 822 0118 00000000 		.4byte	.LFB0
 823 011c 1C000000 		.4byte	.LFE0-.LFB0
 824 0120 01       		.uleb128 0x1
 825 0121 9C       		.byte	0x9c
 826 0122 39010000 		.4byte	0x139
 827 0126 0A       		.uleb128 0xa
 828 0127 0E000000 		.4byte	.LVL5
 829 012b B9000000 		.4byte	0xb9
 830 012f 0A       		.uleb128 0xa
 831 0130 16000000 		.4byte	.LVL6
 832 0134 CA000000 		.4byte	0xca
 833 0138 00       		.byte	0
 834 0139 08       		.uleb128 0x8
 835 013a F9030000 		.4byte	.LASF19
 836 013e 01       		.byte	0x1
 837 013f E3       		.byte	0xe3
 838 0140 00000000 		.4byte	.LFB3
 839 0144 24000000 		.4byte	.LFE3-.LFB3
 840 0148 01       		.uleb128 0x1
 841 0149 9C       		.byte	0x9c
 842 014a 80010000 		.4byte	0x180
 843 014e 09       		.uleb128 0x9
 844 014f 47010000 		.4byte	.LASF20
 845 0153 01       		.byte	0x1
 846 0154 E5       		.byte	0xe5
 847 0155 6B000000 		.4byte	0x6b
 848 0159 1E000000 		.4byte	.LLST1
 849 015d 0A       		.uleb128 0xa
 850 015e 06000000 		.4byte	.LVL7
 851 0162 25040000 		.4byte	0x425
 852 0166 0A       		.uleb128 0xa
 853 0167 0C000000 		.4byte	.LVL9
 854 016b 48040000 		.4byte	0x448
 855 016f 0B       		.uleb128 0xb
 856 0170 1C000000 		.4byte	.LVL10
 857 0174 37040000 		.4byte	0x437
 858 0178 0C       		.uleb128 0xc
 859 0179 01       		.uleb128 0x1
 860 017a 50       		.byte	0x50
 861 017b 02       		.uleb128 0x2
 862 017c 74       		.byte	0x74
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 45


 863 017d 00       		.sleb128 0
 864 017e 00       		.byte	0
 865 017f 00       		.byte	0
 866 0180 0D       		.uleb128 0xd
 867 0181 7D020000 		.4byte	.LASF27
 868 0185 01       		.byte	0x1
 869 0186 1901     		.2byte	0x119
 870 0188 6B000000 		.4byte	0x6b
 871 018c 00000000 		.4byte	.LFB4
 872 0190 04000000 		.4byte	.LFE4-.LFB4
 873 0194 01       		.uleb128 0x1
 874 0195 9C       		.byte	0x9c
 875 0196 0E       		.uleb128 0xe
 876 0197 73010000 		.4byte	.LASF21
 877 019b 01       		.byte	0x1
 878 019c 3101     		.2byte	0x131
 879 019e 00000000 		.4byte	.LFB5
 880 01a2 02000000 		.4byte	.LFE5-.LFB5
 881 01a6 01       		.uleb128 0x1
 882 01a7 9C       		.byte	0x9c
 883 01a8 BB010000 		.4byte	0x1bb
 884 01ac 0F       		.uleb128 0xf
 885 01ad 23010000 		.4byte	.LASF23
 886 01b1 01       		.byte	0x1
 887 01b2 3101     		.2byte	0x131
 888 01b4 6B000000 		.4byte	0x6b
 889 01b8 01       		.uleb128 0x1
 890 01b9 50       		.byte	0x50
 891 01ba 00       		.byte	0
 892 01bb 0E       		.uleb128 0xe
 893 01bc 32020000 		.4byte	.LASF22
 894 01c0 01       		.byte	0x1
 895 01c1 C803     		.2byte	0x3c8
 896 01c3 00000000 		.4byte	.LFB6
 897 01c7 0C000000 		.4byte	.LFE6-.LFB6
 898 01cb 01       		.uleb128 0x1
 899 01cc 9C       		.byte	0x9c
 900 01cd E0010000 		.4byte	0x1e0
 901 01d1 0F       		.uleb128 0xf
 902 01d2 C2010000 		.4byte	.LASF24
 903 01d6 01       		.byte	0x1
 904 01d7 C803     		.2byte	0x3c8
 905 01d9 6B000000 		.4byte	0x6b
 906 01dd 01       		.uleb128 0x1
 907 01de 50       		.byte	0x50
 908 01df 00       		.byte	0
 909 01e0 0E       		.uleb128 0xe
 910 01e1 9F000000 		.4byte	.LASF25
 911 01e5 01       		.byte	0x1
 912 01e6 EA03     		.2byte	0x3ea
 913 01e8 00000000 		.4byte	.LFB7
 914 01ec 18000000 		.4byte	.LFE7-.LFB7
 915 01f0 01       		.uleb128 0x1
 916 01f1 9C       		.byte	0x9c
 917 01f2 05020000 		.4byte	0x205
 918 01f6 0F       		.uleb128 0xf
 919 01f7 CC020000 		.4byte	.LASF26
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 46


 920 01fb 01       		.byte	0x1
 921 01fc EA03     		.2byte	0x3ea
 922 01fe 6B000000 		.4byte	0x6b
 923 0202 01       		.uleb128 0x1
 924 0203 50       		.byte	0x50
 925 0204 00       		.byte	0
 926 0205 0D       		.uleb128 0xd
 927 0206 AB010000 		.4byte	.LASF28
 928 020a 01       		.byte	0x1
 929 020b 2E04     		.2byte	0x42e
 930 020d 6B000000 		.4byte	0x6b
 931 0211 00000000 		.4byte	.LFB8
 932 0215 0C000000 		.4byte	.LFE8-.LFB8
 933 0219 01       		.uleb128 0x1
 934 021a 9C       		.byte	0x9c
 935 021b 0E       		.uleb128 0xe
 936 021c 92010000 		.4byte	.LASF29
 937 0220 01       		.byte	0x1
 938 0221 5204     		.2byte	0x452
 939 0223 00000000 		.4byte	.LFB9
 940 0227 18000000 		.4byte	.LFE9-.LFB9
 941 022b 01       		.uleb128 0x1
 942 022c 9C       		.byte	0x9c
 943 022d 40020000 		.4byte	0x240
 944 0231 0F       		.uleb128 0xf
 945 0232 CC020000 		.4byte	.LASF26
 946 0236 01       		.byte	0x1
 947 0237 5204     		.2byte	0x452
 948 0239 6B000000 		.4byte	0x6b
 949 023d 01       		.uleb128 0x1
 950 023e 50       		.byte	0x50
 951 023f 00       		.byte	0
 952 0240 0E       		.uleb128 0xe
 953 0241 AA030000 		.4byte	.LASF30
 954 0245 01       		.byte	0x1
 955 0246 AE04     		.2byte	0x4ae
 956 0248 00000000 		.4byte	.LFB10
 957 024c 24000000 		.4byte	.LFE10-.LFB10
 958 0250 01       		.uleb128 0x1
 959 0251 9C       		.byte	0x9c
 960 0252 80020000 		.4byte	0x280
 961 0256 10       		.uleb128 0x10
 962 0257 98000000 		.4byte	.LASF31
 963 025b 01       		.byte	0x1
 964 025c AE04     		.2byte	0x4ae
 965 025e 80020000 		.4byte	0x280
 966 0262 3C000000 		.4byte	.LLST2
 967 0266 11       		.uleb128 0x11
 968 0267 DD010000 		.4byte	.LASF32
 969 026b 01       		.byte	0x1
 970 026c B004     		.2byte	0x4b0
 971 026e 76000000 		.4byte	0x76
 972 0272 68000000 		.4byte	.LLST3
 973 0276 0A       		.uleb128 0xa
 974 0277 1A000000 		.4byte	.LVL19
 975 027b 1B020000 		.4byte	0x21b
 976 027f 00       		.byte	0
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 47


 977 0280 12       		.uleb128 0x12
 978 0281 04       		.byte	0x4
 979 0282 86020000 		.4byte	0x286
 980 0286 13       		.uleb128 0x13
 981 0287 8F000000 		.4byte	0x8f
 982 028b 0E       		.uleb128 0xe
 983 028c AA020000 		.4byte	.LASF33
 984 0290 01       		.byte	0x1
 985 0291 D404     		.2byte	0x4d4
 986 0293 00000000 		.4byte	.LFB11
 987 0297 28000000 		.4byte	.LFE11-.LFB11
 988 029b 01       		.uleb128 0x1
 989 029c 9C       		.byte	0x9c
 990 029d DB020000 		.4byte	0x2db
 991 02a1 10       		.uleb128 0x10
 992 02a2 98000000 		.4byte	.LASF31
 993 02a6 01       		.byte	0x1
 994 02a7 D404     		.2byte	0x4d4
 995 02a9 DB020000 		.4byte	0x2db
 996 02ad 9F000000 		.4byte	.LLST4
 997 02b1 10       		.uleb128 0x10
 998 02b2 3D010000 		.4byte	.LASF34
 999 02b6 01       		.byte	0x1
 1000 02b7 D404     		.2byte	0x4d4
 1001 02b9 6B000000 		.4byte	0x6b
 1002 02bd CB000000 		.4byte	.LLST5
 1003 02c1 11       		.uleb128 0x11
 1004 02c2 DD010000 		.4byte	.LASF32
 1005 02c6 01       		.byte	0x1
 1006 02c7 D704     		.2byte	0x4d7
 1007 02c9 6B000000 		.4byte	0x6b
 1008 02cd EC000000 		.4byte	.LLST6
 1009 02d1 0A       		.uleb128 0xa
 1010 02d2 18000000 		.4byte	.LVL26
 1011 02d6 1B020000 		.4byte	0x21b
 1012 02da 00       		.byte	0
 1013 02db 12       		.uleb128 0x12
 1014 02dc 04       		.byte	0x4
 1015 02dd E1020000 		.4byte	0x2e1
 1016 02e1 13       		.uleb128 0x13
 1017 02e2 6B000000 		.4byte	0x6b
 1018 02e6 0E       		.uleb128 0xe
 1019 02e7 2B010000 		.4byte	.LASF35
 1020 02eb 01       		.byte	0x1
 1021 02ec F904     		.2byte	0x4f9
 1022 02ee 00000000 		.4byte	.LFB12
 1023 02f2 20000000 		.4byte	.LFE12-.LFB12
 1024 02f6 01       		.uleb128 0x1
 1025 02f7 9C       		.byte	0x9c
 1026 02f8 38030000 		.4byte	0x338
 1027 02fc 10       		.uleb128 0x10
 1028 02fd CC020000 		.4byte	.LASF26
 1029 0301 01       		.byte	0x1
 1030 0302 F904     		.2byte	0x4f9
 1031 0304 6B000000 		.4byte	0x6b
 1032 0308 20010000 		.4byte	.LLST7
 1033 030c 0A       		.uleb128 0xa
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 48


 1034 030d 0E000000 		.4byte	.LVL29
 1035 0311 1B020000 		.4byte	0x21b
 1036 0315 14       		.uleb128 0x14
 1037 0316 14000000 		.4byte	.LVL30
 1038 031a 1B020000 		.4byte	0x21b
 1039 031e 28030000 		.4byte	0x328
 1040 0322 0C       		.uleb128 0xc
 1041 0323 01       		.uleb128 0x1
 1042 0324 50       		.byte	0x50
 1043 0325 01       		.uleb128 0x1
 1044 0326 3D       		.byte	0x3d
 1045 0327 00       		.byte	0
 1046 0328 0B       		.uleb128 0xb
 1047 0329 1A000000 		.4byte	.LVL31
 1048 032d 1B020000 		.4byte	0x21b
 1049 0331 0C       		.uleb128 0xc
 1050 0332 01       		.uleb128 0x1
 1051 0333 50       		.byte	0x50
 1052 0334 01       		.uleb128 0x1
 1053 0335 3A       		.byte	0x3a
 1054 0336 00       		.byte	0
 1055 0337 00       		.byte	0
 1056 0338 15       		.uleb128 0x15
 1057 0339 87030000 		.4byte	.LASF50
 1058 033d 01       		.byte	0x1
 1059 033e 1E05     		.2byte	0x51e
 1060 0340 6B000000 		.4byte	0x6b
 1061 0344 00000000 		.4byte	.LFB13
 1062 0348 18000000 		.4byte	.LFE13-.LFB13
 1063 034c 01       		.uleb128 0x1
 1064 034d 9C       		.byte	0x9c
 1065 034e 63030000 		.4byte	0x363
 1066 0352 11       		.uleb128 0x11
 1067 0353 F4030000 		.4byte	.LASF36
 1068 0357 01       		.byte	0x1
 1069 0358 2105     		.2byte	0x521
 1070 035a 6B000000 		.4byte	0x6b
 1071 035e 41010000 		.4byte	.LLST8
 1072 0362 00       		.byte	0
 1073 0363 0E       		.uleb128 0xe
 1074 0364 4F020000 		.4byte	.LASF37
 1075 0368 01       		.byte	0x1
 1076 0369 7405     		.2byte	0x574
 1077 036b 00000000 		.4byte	.LFB14
 1078 036f 20000000 		.4byte	.LFE14-.LFB14
 1079 0373 01       		.uleb128 0x1
 1080 0374 9C       		.byte	0x9c
 1081 0375 9C030000 		.4byte	0x39c
 1082 0379 11       		.uleb128 0x11
 1083 037a 47010000 		.4byte	.LASF20
 1084 037e 01       		.byte	0x1
 1085 037f 7605     		.2byte	0x576
 1086 0381 6B000000 		.4byte	0x6b
 1087 0385 5F010000 		.4byte	.LLST9
 1088 0389 0A       		.uleb128 0xa
 1089 038a 06000000 		.4byte	.LVL35
 1090 038e 25040000 		.4byte	0x425
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 49


 1091 0392 0A       		.uleb128 0xa
 1092 0393 1A000000 		.4byte	.LVL36
 1093 0397 37040000 		.4byte	0x437
 1094 039b 00       		.byte	0
 1095 039c 0E       		.uleb128 0xe
 1096 039d C9010000 		.4byte	.LASF38
 1097 03a1 01       		.byte	0x1
 1098 03a2 CD05     		.2byte	0x5cd
 1099 03a4 00000000 		.4byte	.LFB15
 1100 03a8 60000000 		.4byte	.LFE15-.LFB15
 1101 03ac 01       		.uleb128 0x1
 1102 03ad 9C       		.byte	0x9c
 1103 03ae EF030000 		.4byte	0x3ef
 1104 03b2 10       		.uleb128 0x10
 1105 03b3 E6020000 		.4byte	.LASF39
 1106 03b7 01       		.byte	0x1
 1107 03b8 CD05     		.2byte	0x5cd
 1108 03ba 6B000000 		.4byte	0x6b
 1109 03be 72010000 		.4byte	.LLST10
 1110 03c2 16       		.uleb128 0x16
 1111 03c3 08000000 		.4byte	.LBB2
 1112 03c7 46000000 		.4byte	.LBE2-.LBB2
 1113 03cb 11       		.uleb128 0x11
 1114 03cc 7D000000 		.4byte	.LASF40
 1115 03d0 01       		.byte	0x1
 1116 03d1 D505     		.2byte	0x5d5
 1117 03d3 6B000000 		.4byte	0x6b
 1118 03d7 AC010000 		.4byte	.LLST11
 1119 03db 17       		.uleb128 0x17
 1120 03dc D7020000 		.4byte	.LASF41
 1121 03e0 01       		.byte	0x1
 1122 03e1 FB05     		.2byte	0x5fb
 1123 03e3 6B000000 		.4byte	0x6b
 1124 03e7 05       		.uleb128 0x5
 1125 03e8 03       		.byte	0x3
 1126 03e9 01000000 		.4byte	tx_period.4771
 1127 03ed 00       		.byte	0
 1128 03ee 00       		.byte	0
 1129 03ef 0E       		.uleb128 0xe
 1130 03f0 58010000 		.4byte	.LASF42
 1131 03f4 01       		.byte	0x1
 1132 03f5 4606     		.2byte	0x646
 1133 03f7 00000000 		.4byte	.LFB16
 1134 03fb 02000000 		.4byte	.LFE16-.LFB16
 1135 03ff 01       		.uleb128 0x1
 1136 0400 9C       		.byte	0x9c
 1137 0401 14040000 		.4byte	0x414
 1138 0405 0F       		.uleb128 0xf
 1139 0406 EA000000 		.4byte	.LASF43
 1140 040a 01       		.byte	0x1
 1141 040b 4606     		.2byte	0x646
 1142 040d 6B000000 		.4byte	0x6b
 1143 0411 01       		.uleb128 0x1
 1144 0412 50       		.byte	0x50
 1145 0413 00       		.byte	0
 1146 0414 18       		.uleb128 0x18
 1147 0415 EE010000 		.4byte	.LASF51
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 50


 1148 0419 01       		.byte	0x1
 1149 041a 1C       		.byte	0x1c
 1150 041b 6B000000 		.4byte	0x6b
 1151 041f 05       		.uleb128 0x5
 1152 0420 03       		.byte	0x3
 1153 0421 00000000 		.4byte	TelemUART_initVar
 1154 0425 19       		.uleb128 0x19
 1155 0426 00020000 		.4byte	.LASF52
 1156 042a 04       		.byte	0x4
 1157 042b 82       		.byte	0x82
 1158 042c 6B000000 		.4byte	0x6b
 1159 0430 1A       		.uleb128 0x1a
 1160 0431 CF030000 		.4byte	.LASF44
 1161 0435 03       		.byte	0x3
 1162 0436 23       		.byte	0x23
 1163 0437 1B       		.uleb128 0x1b
 1164 0438 67020000 		.4byte	.LASF53
 1165 043c 04       		.byte	0x4
 1166 043d 83       		.byte	0x83
 1167 043e 48040000 		.4byte	0x448
 1168 0442 1C       		.uleb128 0x1c
 1169 0443 6B000000 		.4byte	0x6b
 1170 0447 00       		.byte	0
 1171 0448 1A       		.uleb128 0x1a
 1172 0449 D2000000 		.4byte	.LASF45
 1173 044d 03       		.byte	0x3
 1174 044e 27       		.byte	0x27
 1175 044f 00       		.byte	0
 1176              		.section	.debug_abbrev,"",%progbits
 1177              	.Ldebug_abbrev0:
 1178 0000 01       		.uleb128 0x1
 1179 0001 11       		.uleb128 0x11
 1180 0002 01       		.byte	0x1
 1181 0003 25       		.uleb128 0x25
 1182 0004 0E       		.uleb128 0xe
 1183 0005 13       		.uleb128 0x13
 1184 0006 0B       		.uleb128 0xb
 1185 0007 03       		.uleb128 0x3
 1186 0008 0E       		.uleb128 0xe
 1187 0009 1B       		.uleb128 0x1b
 1188 000a 0E       		.uleb128 0xe
 1189 000b 55       		.uleb128 0x55
 1190 000c 17       		.uleb128 0x17
 1191 000d 11       		.uleb128 0x11
 1192 000e 01       		.uleb128 0x1
 1193 000f 10       		.uleb128 0x10
 1194 0010 17       		.uleb128 0x17
 1195 0011 00       		.byte	0
 1196 0012 00       		.byte	0
 1197 0013 02       		.uleb128 0x2
 1198 0014 24       		.uleb128 0x24
 1199 0015 00       		.byte	0
 1200 0016 0B       		.uleb128 0xb
 1201 0017 0B       		.uleb128 0xb
 1202 0018 3E       		.uleb128 0x3e
 1203 0019 0B       		.uleb128 0xb
 1204 001a 03       		.uleb128 0x3
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 51


 1205 001b 0E       		.uleb128 0xe
 1206 001c 00       		.byte	0
 1207 001d 00       		.byte	0
 1208 001e 03       		.uleb128 0x3
 1209 001f 24       		.uleb128 0x24
 1210 0020 00       		.byte	0
 1211 0021 0B       		.uleb128 0xb
 1212 0022 0B       		.uleb128 0xb
 1213 0023 3E       		.uleb128 0x3e
 1214 0024 0B       		.uleb128 0xb
 1215 0025 03       		.uleb128 0x3
 1216 0026 08       		.uleb128 0x8
 1217 0027 00       		.byte	0
 1218 0028 00       		.byte	0
 1219 0029 04       		.uleb128 0x4
 1220 002a 16       		.uleb128 0x16
 1221 002b 00       		.byte	0
 1222 002c 03       		.uleb128 0x3
 1223 002d 0E       		.uleb128 0xe
 1224 002e 3A       		.uleb128 0x3a
 1225 002f 0B       		.uleb128 0xb
 1226 0030 3B       		.uleb128 0x3b
 1227 0031 0B       		.uleb128 0xb
 1228 0032 49       		.uleb128 0x49
 1229 0033 13       		.uleb128 0x13
 1230 0034 00       		.byte	0
 1231 0035 00       		.byte	0
 1232 0036 05       		.uleb128 0x5
 1233 0037 16       		.uleb128 0x16
 1234 0038 00       		.byte	0
 1235 0039 03       		.uleb128 0x3
 1236 003a 0E       		.uleb128 0xe
 1237 003b 3A       		.uleb128 0x3a
 1238 003c 0B       		.uleb128 0xb
 1239 003d 3B       		.uleb128 0x3b
 1240 003e 05       		.uleb128 0x5
 1241 003f 49       		.uleb128 0x49
 1242 0040 13       		.uleb128 0x13
 1243 0041 00       		.byte	0
 1244 0042 00       		.byte	0
 1245 0043 06       		.uleb128 0x6
 1246 0044 35       		.uleb128 0x35
 1247 0045 00       		.byte	0
 1248 0046 49       		.uleb128 0x49
 1249 0047 13       		.uleb128 0x13
 1250 0048 00       		.byte	0
 1251 0049 00       		.byte	0
 1252 004a 07       		.uleb128 0x7
 1253 004b 2E       		.uleb128 0x2e
 1254 004c 00       		.byte	0
 1255 004d 3F       		.uleb128 0x3f
 1256 004e 19       		.uleb128 0x19
 1257 004f 03       		.uleb128 0x3
 1258 0050 0E       		.uleb128 0xe
 1259 0051 3A       		.uleb128 0x3a
 1260 0052 0B       		.uleb128 0xb
 1261 0053 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 52


 1262 0054 0B       		.uleb128 0xb
 1263 0055 27       		.uleb128 0x27
 1264 0056 19       		.uleb128 0x19
 1265 0057 11       		.uleb128 0x11
 1266 0058 01       		.uleb128 0x1
 1267 0059 12       		.uleb128 0x12
 1268 005a 06       		.uleb128 0x6
 1269 005b 40       		.uleb128 0x40
 1270 005c 18       		.uleb128 0x18
 1271 005d 9742     		.uleb128 0x2117
 1272 005f 19       		.uleb128 0x19
 1273 0060 00       		.byte	0
 1274 0061 00       		.byte	0
 1275 0062 08       		.uleb128 0x8
 1276 0063 2E       		.uleb128 0x2e
 1277 0064 01       		.byte	0x1
 1278 0065 3F       		.uleb128 0x3f
 1279 0066 19       		.uleb128 0x19
 1280 0067 03       		.uleb128 0x3
 1281 0068 0E       		.uleb128 0xe
 1282 0069 3A       		.uleb128 0x3a
 1283 006a 0B       		.uleb128 0xb
 1284 006b 3B       		.uleb128 0x3b
 1285 006c 0B       		.uleb128 0xb
 1286 006d 27       		.uleb128 0x27
 1287 006e 19       		.uleb128 0x19
 1288 006f 11       		.uleb128 0x11
 1289 0070 01       		.uleb128 0x1
 1290 0071 12       		.uleb128 0x12
 1291 0072 06       		.uleb128 0x6
 1292 0073 40       		.uleb128 0x40
 1293 0074 18       		.uleb128 0x18
 1294 0075 9742     		.uleb128 0x2117
 1295 0077 19       		.uleb128 0x19
 1296 0078 01       		.uleb128 0x1
 1297 0079 13       		.uleb128 0x13
 1298 007a 00       		.byte	0
 1299 007b 00       		.byte	0
 1300 007c 09       		.uleb128 0x9
 1301 007d 34       		.uleb128 0x34
 1302 007e 00       		.byte	0
 1303 007f 03       		.uleb128 0x3
 1304 0080 0E       		.uleb128 0xe
 1305 0081 3A       		.uleb128 0x3a
 1306 0082 0B       		.uleb128 0xb
 1307 0083 3B       		.uleb128 0x3b
 1308 0084 0B       		.uleb128 0xb
 1309 0085 49       		.uleb128 0x49
 1310 0086 13       		.uleb128 0x13
 1311 0087 02       		.uleb128 0x2
 1312 0088 17       		.uleb128 0x17
 1313 0089 00       		.byte	0
 1314 008a 00       		.byte	0
 1315 008b 0A       		.uleb128 0xa
 1316 008c 898201   		.uleb128 0x4109
 1317 008f 00       		.byte	0
 1318 0090 11       		.uleb128 0x11
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 53


 1319 0091 01       		.uleb128 0x1
 1320 0092 31       		.uleb128 0x31
 1321 0093 13       		.uleb128 0x13
 1322 0094 00       		.byte	0
 1323 0095 00       		.byte	0
 1324 0096 0B       		.uleb128 0xb
 1325 0097 898201   		.uleb128 0x4109
 1326 009a 01       		.byte	0x1
 1327 009b 11       		.uleb128 0x11
 1328 009c 01       		.uleb128 0x1
 1329 009d 31       		.uleb128 0x31
 1330 009e 13       		.uleb128 0x13
 1331 009f 00       		.byte	0
 1332 00a0 00       		.byte	0
 1333 00a1 0C       		.uleb128 0xc
 1334 00a2 8A8201   		.uleb128 0x410a
 1335 00a5 00       		.byte	0
 1336 00a6 02       		.uleb128 0x2
 1337 00a7 18       		.uleb128 0x18
 1338 00a8 9142     		.uleb128 0x2111
 1339 00aa 18       		.uleb128 0x18
 1340 00ab 00       		.byte	0
 1341 00ac 00       		.byte	0
 1342 00ad 0D       		.uleb128 0xd
 1343 00ae 2E       		.uleb128 0x2e
 1344 00af 00       		.byte	0
 1345 00b0 3F       		.uleb128 0x3f
 1346 00b1 19       		.uleb128 0x19
 1347 00b2 03       		.uleb128 0x3
 1348 00b3 0E       		.uleb128 0xe
 1349 00b4 3A       		.uleb128 0x3a
 1350 00b5 0B       		.uleb128 0xb
 1351 00b6 3B       		.uleb128 0x3b
 1352 00b7 05       		.uleb128 0x5
 1353 00b8 27       		.uleb128 0x27
 1354 00b9 19       		.uleb128 0x19
 1355 00ba 49       		.uleb128 0x49
 1356 00bb 13       		.uleb128 0x13
 1357 00bc 11       		.uleb128 0x11
 1358 00bd 01       		.uleb128 0x1
 1359 00be 12       		.uleb128 0x12
 1360 00bf 06       		.uleb128 0x6
 1361 00c0 40       		.uleb128 0x40
 1362 00c1 18       		.uleb128 0x18
 1363 00c2 9742     		.uleb128 0x2117
 1364 00c4 19       		.uleb128 0x19
 1365 00c5 00       		.byte	0
 1366 00c6 00       		.byte	0
 1367 00c7 0E       		.uleb128 0xe
 1368 00c8 2E       		.uleb128 0x2e
 1369 00c9 01       		.byte	0x1
 1370 00ca 3F       		.uleb128 0x3f
 1371 00cb 19       		.uleb128 0x19
 1372 00cc 03       		.uleb128 0x3
 1373 00cd 0E       		.uleb128 0xe
 1374 00ce 3A       		.uleb128 0x3a
 1375 00cf 0B       		.uleb128 0xb
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 54


 1376 00d0 3B       		.uleb128 0x3b
 1377 00d1 05       		.uleb128 0x5
 1378 00d2 27       		.uleb128 0x27
 1379 00d3 19       		.uleb128 0x19
 1380 00d4 11       		.uleb128 0x11
 1381 00d5 01       		.uleb128 0x1
 1382 00d6 12       		.uleb128 0x12
 1383 00d7 06       		.uleb128 0x6
 1384 00d8 40       		.uleb128 0x40
 1385 00d9 18       		.uleb128 0x18
 1386 00da 9742     		.uleb128 0x2117
 1387 00dc 19       		.uleb128 0x19
 1388 00dd 01       		.uleb128 0x1
 1389 00de 13       		.uleb128 0x13
 1390 00df 00       		.byte	0
 1391 00e0 00       		.byte	0
 1392 00e1 0F       		.uleb128 0xf
 1393 00e2 05       		.uleb128 0x5
 1394 00e3 00       		.byte	0
 1395 00e4 03       		.uleb128 0x3
 1396 00e5 0E       		.uleb128 0xe
 1397 00e6 3A       		.uleb128 0x3a
 1398 00e7 0B       		.uleb128 0xb
 1399 00e8 3B       		.uleb128 0x3b
 1400 00e9 05       		.uleb128 0x5
 1401 00ea 49       		.uleb128 0x49
 1402 00eb 13       		.uleb128 0x13
 1403 00ec 02       		.uleb128 0x2
 1404 00ed 18       		.uleb128 0x18
 1405 00ee 00       		.byte	0
 1406 00ef 00       		.byte	0
 1407 00f0 10       		.uleb128 0x10
 1408 00f1 05       		.uleb128 0x5
 1409 00f2 00       		.byte	0
 1410 00f3 03       		.uleb128 0x3
 1411 00f4 0E       		.uleb128 0xe
 1412 00f5 3A       		.uleb128 0x3a
 1413 00f6 0B       		.uleb128 0xb
 1414 00f7 3B       		.uleb128 0x3b
 1415 00f8 05       		.uleb128 0x5
 1416 00f9 49       		.uleb128 0x49
 1417 00fa 13       		.uleb128 0x13
 1418 00fb 02       		.uleb128 0x2
 1419 00fc 17       		.uleb128 0x17
 1420 00fd 00       		.byte	0
 1421 00fe 00       		.byte	0
 1422 00ff 11       		.uleb128 0x11
 1423 0100 34       		.uleb128 0x34
 1424 0101 00       		.byte	0
 1425 0102 03       		.uleb128 0x3
 1426 0103 0E       		.uleb128 0xe
 1427 0104 3A       		.uleb128 0x3a
 1428 0105 0B       		.uleb128 0xb
 1429 0106 3B       		.uleb128 0x3b
 1430 0107 05       		.uleb128 0x5
 1431 0108 49       		.uleb128 0x49
 1432 0109 13       		.uleb128 0x13
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 55


 1433 010a 02       		.uleb128 0x2
 1434 010b 17       		.uleb128 0x17
 1435 010c 00       		.byte	0
 1436 010d 00       		.byte	0
 1437 010e 12       		.uleb128 0x12
 1438 010f 0F       		.uleb128 0xf
 1439 0110 00       		.byte	0
 1440 0111 0B       		.uleb128 0xb
 1441 0112 0B       		.uleb128 0xb
 1442 0113 49       		.uleb128 0x49
 1443 0114 13       		.uleb128 0x13
 1444 0115 00       		.byte	0
 1445 0116 00       		.byte	0
 1446 0117 13       		.uleb128 0x13
 1447 0118 26       		.uleb128 0x26
 1448 0119 00       		.byte	0
 1449 011a 49       		.uleb128 0x49
 1450 011b 13       		.uleb128 0x13
 1451 011c 00       		.byte	0
 1452 011d 00       		.byte	0
 1453 011e 14       		.uleb128 0x14
 1454 011f 898201   		.uleb128 0x4109
 1455 0122 01       		.byte	0x1
 1456 0123 11       		.uleb128 0x11
 1457 0124 01       		.uleb128 0x1
 1458 0125 31       		.uleb128 0x31
 1459 0126 13       		.uleb128 0x13
 1460 0127 01       		.uleb128 0x1
 1461 0128 13       		.uleb128 0x13
 1462 0129 00       		.byte	0
 1463 012a 00       		.byte	0
 1464 012b 15       		.uleb128 0x15
 1465 012c 2E       		.uleb128 0x2e
 1466 012d 01       		.byte	0x1
 1467 012e 3F       		.uleb128 0x3f
 1468 012f 19       		.uleb128 0x19
 1469 0130 03       		.uleb128 0x3
 1470 0131 0E       		.uleb128 0xe
 1471 0132 3A       		.uleb128 0x3a
 1472 0133 0B       		.uleb128 0xb
 1473 0134 3B       		.uleb128 0x3b
 1474 0135 05       		.uleb128 0x5
 1475 0136 27       		.uleb128 0x27
 1476 0137 19       		.uleb128 0x19
 1477 0138 49       		.uleb128 0x49
 1478 0139 13       		.uleb128 0x13
 1479 013a 11       		.uleb128 0x11
 1480 013b 01       		.uleb128 0x1
 1481 013c 12       		.uleb128 0x12
 1482 013d 06       		.uleb128 0x6
 1483 013e 40       		.uleb128 0x40
 1484 013f 18       		.uleb128 0x18
 1485 0140 9742     		.uleb128 0x2117
 1486 0142 19       		.uleb128 0x19
 1487 0143 01       		.uleb128 0x1
 1488 0144 13       		.uleb128 0x13
 1489 0145 00       		.byte	0
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 56


 1490 0146 00       		.byte	0
 1491 0147 16       		.uleb128 0x16
 1492 0148 0B       		.uleb128 0xb
 1493 0149 01       		.byte	0x1
 1494 014a 11       		.uleb128 0x11
 1495 014b 01       		.uleb128 0x1
 1496 014c 12       		.uleb128 0x12
 1497 014d 06       		.uleb128 0x6
 1498 014e 00       		.byte	0
 1499 014f 00       		.byte	0
 1500 0150 17       		.uleb128 0x17
 1501 0151 34       		.uleb128 0x34
 1502 0152 00       		.byte	0
 1503 0153 03       		.uleb128 0x3
 1504 0154 0E       		.uleb128 0xe
 1505 0155 3A       		.uleb128 0x3a
 1506 0156 0B       		.uleb128 0xb
 1507 0157 3B       		.uleb128 0x3b
 1508 0158 05       		.uleb128 0x5
 1509 0159 49       		.uleb128 0x49
 1510 015a 13       		.uleb128 0x13
 1511 015b 02       		.uleb128 0x2
 1512 015c 18       		.uleb128 0x18
 1513 015d 00       		.byte	0
 1514 015e 00       		.byte	0
 1515 015f 18       		.uleb128 0x18
 1516 0160 34       		.uleb128 0x34
 1517 0161 00       		.byte	0
 1518 0162 03       		.uleb128 0x3
 1519 0163 0E       		.uleb128 0xe
 1520 0164 3A       		.uleb128 0x3a
 1521 0165 0B       		.uleb128 0xb
 1522 0166 3B       		.uleb128 0x3b
 1523 0167 0B       		.uleb128 0xb
 1524 0168 49       		.uleb128 0x49
 1525 0169 13       		.uleb128 0x13
 1526 016a 3F       		.uleb128 0x3f
 1527 016b 19       		.uleb128 0x19
 1528 016c 02       		.uleb128 0x2
 1529 016d 18       		.uleb128 0x18
 1530 016e 00       		.byte	0
 1531 016f 00       		.byte	0
 1532 0170 19       		.uleb128 0x19
 1533 0171 2E       		.uleb128 0x2e
 1534 0172 00       		.byte	0
 1535 0173 3F       		.uleb128 0x3f
 1536 0174 19       		.uleb128 0x19
 1537 0175 03       		.uleb128 0x3
 1538 0176 0E       		.uleb128 0xe
 1539 0177 3A       		.uleb128 0x3a
 1540 0178 0B       		.uleb128 0xb
 1541 0179 3B       		.uleb128 0x3b
 1542 017a 0B       		.uleb128 0xb
 1543 017b 27       		.uleb128 0x27
 1544 017c 19       		.uleb128 0x19
 1545 017d 49       		.uleb128 0x49
 1546 017e 13       		.uleb128 0x13
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 57


 1547 017f 3C       		.uleb128 0x3c
 1548 0180 19       		.uleb128 0x19
 1549 0181 00       		.byte	0
 1550 0182 00       		.byte	0
 1551 0183 1A       		.uleb128 0x1a
 1552 0184 2E       		.uleb128 0x2e
 1553 0185 00       		.byte	0
 1554 0186 3F       		.uleb128 0x3f
 1555 0187 19       		.uleb128 0x19
 1556 0188 03       		.uleb128 0x3
 1557 0189 0E       		.uleb128 0xe
 1558 018a 3A       		.uleb128 0x3a
 1559 018b 0B       		.uleb128 0xb
 1560 018c 3B       		.uleb128 0x3b
 1561 018d 0B       		.uleb128 0xb
 1562 018e 27       		.uleb128 0x27
 1563 018f 19       		.uleb128 0x19
 1564 0190 3C       		.uleb128 0x3c
 1565 0191 19       		.uleb128 0x19
 1566 0192 00       		.byte	0
 1567 0193 00       		.byte	0
 1568 0194 1B       		.uleb128 0x1b
 1569 0195 2E       		.uleb128 0x2e
 1570 0196 01       		.byte	0x1
 1571 0197 3F       		.uleb128 0x3f
 1572 0198 19       		.uleb128 0x19
 1573 0199 03       		.uleb128 0x3
 1574 019a 0E       		.uleb128 0xe
 1575 019b 3A       		.uleb128 0x3a
 1576 019c 0B       		.uleb128 0xb
 1577 019d 3B       		.uleb128 0x3b
 1578 019e 0B       		.uleb128 0xb
 1579 019f 27       		.uleb128 0x27
 1580 01a0 19       		.uleb128 0x19
 1581 01a1 3C       		.uleb128 0x3c
 1582 01a2 19       		.uleb128 0x19
 1583 01a3 01       		.uleb128 0x1
 1584 01a4 13       		.uleb128 0x13
 1585 01a5 00       		.byte	0
 1586 01a6 00       		.byte	0
 1587 01a7 1C       		.uleb128 0x1c
 1588 01a8 05       		.uleb128 0x5
 1589 01a9 00       		.byte	0
 1590 01aa 49       		.uleb128 0x49
 1591 01ab 13       		.uleb128 0x13
 1592 01ac 00       		.byte	0
 1593 01ad 00       		.byte	0
 1594 01ae 00       		.byte	0
 1595              		.section	.debug_loc,"",%progbits
 1596              	.Ldebug_loc0:
 1597              	.LLST0:
 1598 0000 0E000000 		.4byte	.LVL1
 1599 0004 15000000 		.4byte	.LVL2-1
 1600 0008 0100     		.2byte	0x1
 1601 000a 50       		.byte	0x50
 1602 000b 15000000 		.4byte	.LVL2-1
 1603 000f 1C000000 		.4byte	.LVL4
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 58


 1604 0013 0100     		.2byte	0x1
 1605 0015 54       		.byte	0x54
 1606 0016 00000000 		.4byte	0
 1607 001a 00000000 		.4byte	0
 1608              	.LLST1:
 1609 001e 08000000 		.4byte	.LVL8
 1610 0022 0B000000 		.4byte	.LVL9-1
 1611 0026 0100     		.2byte	0x1
 1612 0028 50       		.byte	0x50
 1613 0029 0B000000 		.4byte	.LVL9-1
 1614 002d 1C000000 		.4byte	.LVL11
 1615 0031 0100     		.2byte	0x1
 1616 0033 54       		.byte	0x54
 1617 0034 00000000 		.4byte	0
 1618 0038 00000000 		.4byte	0
 1619              	.LLST2:
 1620 003c 00000000 		.4byte	.LVL16
 1621 0040 0E000000 		.4byte	.LVL17
 1622 0044 0100     		.2byte	0x1
 1623 0046 50       		.byte	0x50
 1624 0047 0E000000 		.4byte	.LVL17
 1625 004b 1E000000 		.4byte	.LVL22
 1626 004f 0100     		.2byte	0x1
 1627 0051 55       		.byte	0x55
 1628 0052 1E000000 		.4byte	.LVL22
 1629 0056 24000000 		.4byte	.LFE10
 1630 005a 0400     		.2byte	0x4
 1631 005c F3       		.byte	0xf3
 1632 005d 01       		.uleb128 0x1
 1633 005e 50       		.byte	0x50
 1634 005f 9F       		.byte	0x9f
 1635 0060 00000000 		.4byte	0
 1636 0064 00000000 		.4byte	0
 1637              	.LLST3:
 1638 0068 00000000 		.4byte	.LVL16
 1639 006c 0E000000 		.4byte	.LVL17
 1640 0070 0200     		.2byte	0x2
 1641 0072 30       		.byte	0x30
 1642 0073 9F       		.byte	0x9f
 1643 0074 0E000000 		.4byte	.LVL17
 1644 0078 16000000 		.4byte	.LVL18
 1645 007c 0100     		.2byte	0x1
 1646 007e 54       		.byte	0x54
 1647 007f 16000000 		.4byte	.LVL18
 1648 0083 1C000000 		.4byte	.LVL20
 1649 0087 0300     		.2byte	0x3
 1650 0089 74       		.byte	0x74
 1651 008a 7F       		.sleb128 -1
 1652 008b 9F       		.byte	0x9f
 1653 008c 1C000000 		.4byte	.LVL20
 1654 0090 1E000000 		.4byte	.LVL21
 1655 0094 0100     		.2byte	0x1
 1656 0096 54       		.byte	0x54
 1657 0097 00000000 		.4byte	0
 1658 009b 00000000 		.4byte	0
 1659              	.LLST4:
 1660 009f 00000000 		.4byte	.LVL23
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 59


 1661 00a3 10000000 		.4byte	.LVL24
 1662 00a7 0100     		.2byte	0x1
 1663 00a9 50       		.byte	0x50
 1664 00aa 10000000 		.4byte	.LVL24
 1665 00ae 20000000 		.4byte	.LVL27
 1666 00b2 0100     		.2byte	0x1
 1667 00b4 55       		.byte	0x55
 1668 00b5 20000000 		.4byte	.LVL27
 1669 00b9 28000000 		.4byte	.LFE11
 1670 00bd 0400     		.2byte	0x4
 1671 00bf F3       		.byte	0xf3
 1672 00c0 01       		.uleb128 0x1
 1673 00c1 50       		.byte	0x50
 1674 00c2 9F       		.byte	0x9f
 1675 00c3 00000000 		.4byte	0
 1676 00c7 00000000 		.4byte	0
 1677              	.LLST5:
 1678 00cb 00000000 		.4byte	.LVL23
 1679 00cf 10000000 		.4byte	.LVL24
 1680 00d3 0100     		.2byte	0x1
 1681 00d5 51       		.byte	0x51
 1682 00d6 10000000 		.4byte	.LVL24
 1683 00da 28000000 		.4byte	.LFE11
 1684 00de 0400     		.2byte	0x4
 1685 00e0 F3       		.byte	0xf3
 1686 00e1 01       		.uleb128 0x1
 1687 00e2 51       		.byte	0x51
 1688 00e3 9F       		.byte	0x9f
 1689 00e4 00000000 		.4byte	0
 1690 00e8 00000000 		.4byte	0
 1691              	.LLST6:
 1692 00ec 00000000 		.4byte	.LVL23
 1693 00f0 10000000 		.4byte	.LVL24
 1694 00f4 0200     		.2byte	0x2
 1695 00f6 30       		.byte	0x30
 1696 00f7 9F       		.byte	0x9f
 1697 00f8 10000000 		.4byte	.LVL24
 1698 00fc 14000000 		.4byte	.LVL25
 1699 0100 0600     		.2byte	0x6
 1700 0102 74       		.byte	0x74
 1701 0103 00       		.sleb128 0
 1702 0104 75       		.byte	0x75
 1703 0105 00       		.sleb128 0
 1704 0106 1C       		.byte	0x1c
 1705 0107 9F       		.byte	0x9f
 1706 0108 14000000 		.4byte	.LVL25
 1707 010c 18000000 		.4byte	.LVL26
 1708 0110 0600     		.2byte	0x6
 1709 0112 74       		.byte	0x74
 1710 0113 7F       		.sleb128 -1
 1711 0114 75       		.byte	0x75
 1712 0115 00       		.sleb128 0
 1713 0116 1C       		.byte	0x1c
 1714 0117 9F       		.byte	0x9f
 1715 0118 00000000 		.4byte	0
 1716 011c 00000000 		.4byte	0
 1717              	.LLST7:
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 60


 1718 0120 00000000 		.4byte	.LVL28
 1719 0124 0D000000 		.4byte	.LVL29-1
 1720 0128 0100     		.2byte	0x1
 1721 012a 50       		.byte	0x50
 1722 012b 0D000000 		.4byte	.LVL29-1
 1723 012f 20000000 		.4byte	.LFE12
 1724 0133 0400     		.2byte	0x4
 1725 0135 F3       		.byte	0xf3
 1726 0136 01       		.uleb128 0x1
 1727 0137 50       		.byte	0x50
 1728 0138 9F       		.byte	0x9f
 1729 0139 00000000 		.4byte	0
 1730 013d 00000000 		.4byte	0
 1731              	.LLST8:
 1732 0141 08000000 		.4byte	.LVL32
 1733 0145 0E000000 		.4byte	.LVL33
 1734 0149 0100     		.2byte	0x1
 1735 014b 53       		.byte	0x53
 1736 014c 12000000 		.4byte	.LVL34
 1737 0150 18000000 		.4byte	.LFE13
 1738 0154 0100     		.2byte	0x1
 1739 0156 50       		.byte	0x50
 1740 0157 00000000 		.4byte	0
 1741 015b 00000000 		.4byte	0
 1742              	.LLST9:
 1743 015f 06000000 		.4byte	.LVL35
 1744 0163 19000000 		.4byte	.LVL36-1
 1745 0167 0100     		.2byte	0x1
 1746 0169 50       		.byte	0x50
 1747 016a 00000000 		.4byte	0
 1748 016e 00000000 		.4byte	0
 1749              	.LLST10:
 1750 0172 00000000 		.4byte	.LVL37
 1751 0176 34000000 		.4byte	.LVL40
 1752 017a 0100     		.2byte	0x1
 1753 017c 50       		.byte	0x50
 1754 017d 34000000 		.4byte	.LVL40
 1755 0181 40000000 		.4byte	.LVL41
 1756 0185 0400     		.2byte	0x4
 1757 0187 F3       		.byte	0xf3
 1758 0188 01       		.uleb128 0x1
 1759 0189 50       		.byte	0x50
 1760 018a 9F       		.byte	0x9f
 1761 018b 40000000 		.4byte	.LVL41
 1762 018f 4E000000 		.4byte	.LVL43
 1763 0193 0100     		.2byte	0x1
 1764 0195 50       		.byte	0x50
 1765 0196 4E000000 		.4byte	.LVL43
 1766 019a 60000000 		.4byte	.LFE15
 1767 019e 0400     		.2byte	0x4
 1768 01a0 F3       		.byte	0xf3
 1769 01a1 01       		.uleb128 0x1
 1770 01a2 50       		.byte	0x50
 1771 01a3 9F       		.byte	0x9f
 1772 01a4 00000000 		.4byte	0
 1773 01a8 00000000 		.4byte	0
 1774              	.LLST11:
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 61


 1775 01ac 24000000 		.4byte	.LVL38
 1776 01b0 2C000000 		.4byte	.LVL39
 1777 01b4 0100     		.2byte	0x1
 1778 01b6 51       		.byte	0x51
 1779 01b7 48000000 		.4byte	.LVL42
 1780 01bb 4E000000 		.4byte	.LVL43
 1781 01bf 0100     		.2byte	0x1
 1782 01c1 52       		.byte	0x52
 1783 01c2 00000000 		.4byte	0
 1784 01c6 00000000 		.4byte	0
 1785              		.section	.debug_aranges,"",%progbits
 1786 0000 9C000000 		.4byte	0x9c
 1787 0004 0200     		.2byte	0x2
 1788 0006 00000000 		.4byte	.Ldebug_info0
 1789 000a 04       		.byte	0x4
 1790 000b 00       		.byte	0
 1791 000c 0000     		.2byte	0
 1792 000e 0000     		.2byte	0
 1793 0010 00000000 		.4byte	.LFB1
 1794 0014 20000000 		.4byte	.LFE1-.LFB1
 1795 0018 00000000 		.4byte	.LFB2
 1796 001c 24000000 		.4byte	.LFE2-.LFB2
 1797 0020 00000000 		.4byte	.LFB0
 1798 0024 1C000000 		.4byte	.LFE0-.LFB0
 1799 0028 00000000 		.4byte	.LFB3
 1800 002c 24000000 		.4byte	.LFE3-.LFB3
 1801 0030 00000000 		.4byte	.LFB4
 1802 0034 04000000 		.4byte	.LFE4-.LFB4
 1803 0038 00000000 		.4byte	.LFB5
 1804 003c 02000000 		.4byte	.LFE5-.LFB5
 1805 0040 00000000 		.4byte	.LFB6
 1806 0044 0C000000 		.4byte	.LFE6-.LFB6
 1807 0048 00000000 		.4byte	.LFB7
 1808 004c 18000000 		.4byte	.LFE7-.LFB7
 1809 0050 00000000 		.4byte	.LFB8
 1810 0054 0C000000 		.4byte	.LFE8-.LFB8
 1811 0058 00000000 		.4byte	.LFB9
 1812 005c 18000000 		.4byte	.LFE9-.LFB9
 1813 0060 00000000 		.4byte	.LFB10
 1814 0064 24000000 		.4byte	.LFE10-.LFB10
 1815 0068 00000000 		.4byte	.LFB11
 1816 006c 28000000 		.4byte	.LFE11-.LFB11
 1817 0070 00000000 		.4byte	.LFB12
 1818 0074 20000000 		.4byte	.LFE12-.LFB12
 1819 0078 00000000 		.4byte	.LFB13
 1820 007c 18000000 		.4byte	.LFE13-.LFB13
 1821 0080 00000000 		.4byte	.LFB14
 1822 0084 20000000 		.4byte	.LFE14-.LFB14
 1823 0088 00000000 		.4byte	.LFB15
 1824 008c 60000000 		.4byte	.LFE15-.LFB15
 1825 0090 00000000 		.4byte	.LFB16
 1826 0094 02000000 		.4byte	.LFE16-.LFB16
 1827 0098 00000000 		.4byte	0
 1828 009c 00000000 		.4byte	0
 1829              		.section	.debug_ranges,"",%progbits
 1830              	.Ldebug_ranges0:
 1831 0000 00000000 		.4byte	.LFB1
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 62


 1832 0004 20000000 		.4byte	.LFE1
 1833 0008 00000000 		.4byte	.LFB2
 1834 000c 24000000 		.4byte	.LFE2
 1835 0010 00000000 		.4byte	.LFB0
 1836 0014 1C000000 		.4byte	.LFE0
 1837 0018 00000000 		.4byte	.LFB3
 1838 001c 24000000 		.4byte	.LFE3
 1839 0020 00000000 		.4byte	.LFB4
 1840 0024 04000000 		.4byte	.LFE4
 1841 0028 00000000 		.4byte	.LFB5
 1842 002c 02000000 		.4byte	.LFE5
 1843 0030 00000000 		.4byte	.LFB6
 1844 0034 0C000000 		.4byte	.LFE6
 1845 0038 00000000 		.4byte	.LFB7
 1846 003c 18000000 		.4byte	.LFE7
 1847 0040 00000000 		.4byte	.LFB8
 1848 0044 0C000000 		.4byte	.LFE8
 1849 0048 00000000 		.4byte	.LFB9
 1850 004c 18000000 		.4byte	.LFE9
 1851 0050 00000000 		.4byte	.LFB10
 1852 0054 24000000 		.4byte	.LFE10
 1853 0058 00000000 		.4byte	.LFB11
 1854 005c 28000000 		.4byte	.LFE11
 1855 0060 00000000 		.4byte	.LFB12
 1856 0064 20000000 		.4byte	.LFE12
 1857 0068 00000000 		.4byte	.LFB13
 1858 006c 18000000 		.4byte	.LFE13
 1859 0070 00000000 		.4byte	.LFB14
 1860 0074 20000000 		.4byte	.LFE14
 1861 0078 00000000 		.4byte	.LFB15
 1862 007c 60000000 		.4byte	.LFE15
 1863 0080 00000000 		.4byte	.LFB16
 1864 0084 02000000 		.4byte	.LFE16
 1865 0088 00000000 		.4byte	0
 1866 008c 00000000 		.4byte	0
 1867              		.section	.debug_line,"",%progbits
 1868              	.Ldebug_line0:
 1869 0000 2E020000 		.section	.debug_str,"MS",%progbits,1
 1869      02006B00 
 1869      00000201 
 1869      FB0E0D00 
 1869      01010101 
 1870              	.LASF6:
 1871 0000 6C6F6E67 		.ascii	"long long int\000"
 1871      206C6F6E 
 1871      6720696E 
 1871      7400
 1872              	.LASF47:
 1873 000e 2E5C4765 		.ascii	".\\Generated_Source\\PSoC4\\TelemUART.c\000"
 1873      6E657261 
 1873      7465645F 
 1873      536F7572 
 1873      63655C50 
 1874              	.LASF48:
 1875 0033 453A5C44 		.ascii	"E:\\Dokumente\\GitHub\\T-50_Project\\Software\\T-50"
 1875      6F6B756D 
 1875      656E7465 
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 63


 1875      5C476974 
 1875      4875625C 
 1876 0061 5F50726F 		.ascii	"_Project\\T-50_Project.cydsn\000"
 1876      6A656374 
 1876      5C542D35 
 1876      305F5072 
 1876      6F6A6563 
 1877              	.LASF40:
 1878 007d 746D7053 		.ascii	"tmpStat\000"
 1878      74617400 
 1879              	.LASF3:
 1880 0085 73686F72 		.ascii	"short unsigned int\000"
 1880      7420756E 
 1880      7369676E 
 1880      65642069 
 1880      6E7400
 1881              	.LASF31:
 1882 0098 73747269 		.ascii	"string\000"
 1882      6E6700
 1883              	.LASF25:
 1884 009f 54656C65 		.ascii	"TelemUART_WriteTxData\000"
 1884      6D554152 
 1884      545F5772 
 1884      69746554 
 1884      78446174 
 1885              	.LASF11:
 1886 00b5 666C6F61 		.ascii	"float\000"
 1886      7400
 1887              	.LASF7:
 1888 00bb 6C6F6E67 		.ascii	"long long unsigned int\000"
 1888      206C6F6E 
 1888      6720756E 
 1888      7369676E 
 1888      65642069 
 1889              	.LASF45:
 1890 00d2 54656C65 		.ascii	"TelemUART_IntClock_Stop\000"
 1890      6D554152 
 1890      545F496E 
 1890      74436C6F 
 1890      636B5F53 
 1891              	.LASF43:
 1892 00ea 61646472 		.ascii	"addressMode\000"
 1892      6573734D 
 1892      6F646500 
 1893              	.LASF15:
 1894 00f6 72656738 		.ascii	"reg8\000"
 1894      00
 1895              	.LASF18:
 1896 00fb 54656C65 		.ascii	"TelemUART_Start\000"
 1896      6D554152 
 1896      545F5374 
 1896      61727400 
 1897              	.LASF5:
 1898 010b 6C6F6E67 		.ascii	"long unsigned int\000"
 1898      20756E73 
 1898      69676E65 
 1898      6420696E 
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 64


 1898      7400
 1899              	.LASF9:
 1900 011d 75696E74 		.ascii	"uint8\000"
 1900      3800
 1901              	.LASF23:
 1902 0123 636F6E74 		.ascii	"control\000"
 1902      726F6C00 
 1903              	.LASF35:
 1904 012b 54656C65 		.ascii	"TelemUART_PutCRLF\000"
 1904      6D554152 
 1904      545F5075 
 1904      7443524C 
 1904      4600
 1905              	.LASF34:
 1906 013d 62797465 		.ascii	"byteCount\000"
 1906      436F756E 
 1906      7400
 1907              	.LASF20:
 1908 0147 656E6162 		.ascii	"enableInterrupts\000"
 1908      6C65496E 
 1908      74657272 
 1908      75707473 
 1908      00
 1909              	.LASF42:
 1910 0158 54656C65 		.ascii	"TelemUART_SetTxAddressMode\000"
 1910      6D554152 
 1910      545F5365 
 1910      74547841 
 1910      64647265 
 1911              	.LASF21:
 1912 0173 54656C65 		.ascii	"TelemUART_WriteControlRegister\000"
 1912      6D554152 
 1912      545F5772 
 1912      69746543 
 1912      6F6E7472 
 1913              	.LASF29:
 1914 0192 54656C65 		.ascii	"TelemUART_PutChar\000"
 1914      6D554152 
 1914      545F5075 
 1914      74436861 
 1914      7200
 1915              	.LASF12:
 1916 01a4 646F7562 		.ascii	"double\000"
 1916      6C6500
 1917              	.LASF28:
 1918 01ab 54656C65 		.ascii	"TelemUART_ReadTxStatus\000"
 1918      6D554152 
 1918      545F5265 
 1918      61645478 
 1918      53746174 
 1919              	.LASF24:
 1920 01c2 696E7453 		.ascii	"intSrc\000"
 1920      726300
 1921              	.LASF38:
 1922 01c9 54656C65 		.ascii	"TelemUART_SendBreak\000"
 1922      6D554152 
 1922      545F5365 
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 65


 1922      6E644272 
 1922      65616B00 
 1923              	.LASF32:
 1924 01dd 6275665F 		.ascii	"buf_index\000"
 1924      696E6465 
 1924      7800
 1925              	.LASF10:
 1926 01e7 75696E74 		.ascii	"uint16\000"
 1926      313600
 1927              	.LASF51:
 1928 01ee 54656C65 		.ascii	"TelemUART_initVar\000"
 1928      6D554152 
 1928      545F696E 
 1928      69745661 
 1928      7200
 1929              	.LASF52:
 1930 0200 4379456E 		.ascii	"CyEnterCriticalSection\000"
 1930      74657243 
 1930      72697469 
 1930      63616C53 
 1930      65637469 
 1931              	.LASF1:
 1932 0217 756E7369 		.ascii	"unsigned char\000"
 1932      676E6564 
 1932      20636861 
 1932      7200
 1933              	.LASF8:
 1934 0225 756E7369 		.ascii	"unsigned int\000"
 1934      676E6564 
 1934      20696E74 
 1934      00
 1935              	.LASF22:
 1936 0232 54656C65 		.ascii	"TelemUART_SetTxInterruptMode\000"
 1936      6D554152 
 1936      545F5365 
 1936      74547849 
 1936      6E746572 
 1937              	.LASF37:
 1938 024f 54656C65 		.ascii	"TelemUART_ClearTxBuffer\000"
 1938      6D554152 
 1938      545F436C 
 1938      65617254 
 1938      78427566 
 1939              	.LASF53:
 1940 0267 43794578 		.ascii	"CyExitCriticalSection\000"
 1940      69744372 
 1940      69746963 
 1940      616C5365 
 1940      6374696F 
 1941              	.LASF27:
 1942 027d 54656C65 		.ascii	"TelemUART_ReadControlRegister\000"
 1942      6D554152 
 1942      545F5265 
 1942      6164436F 
 1942      6E74726F 
 1943              	.LASF49:
 1944 029b 54656C65 		.ascii	"TelemUART_Init\000"
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 66


 1944      6D554152 
 1944      545F496E 
 1944      697400
 1945              	.LASF33:
 1946 02aa 54656C65 		.ascii	"TelemUART_PutArray\000"
 1946      6D554152 
 1946      545F5075 
 1946      74417272 
 1946      617900
 1947              	.LASF16:
 1948 02bd 73697A65 		.ascii	"sizetype\000"
 1948      74797065 
 1948      00
 1949              	.LASF13:
 1950 02c6 63686172 		.ascii	"char8\000"
 1950      3800
 1951              	.LASF26:
 1952 02cc 74784461 		.ascii	"txDataByte\000"
 1952      74614279 
 1952      746500
 1953              	.LASF41:
 1954 02d7 74785F70 		.ascii	"tx_period\000"
 1954      6572696F 
 1954      6400
 1955              	.LASF14:
 1956 02e1 63686172 		.ascii	"char\000"
 1956      00
 1957              	.LASF39:
 1958 02e6 7265744D 		.ascii	"retMode\000"
 1958      6F646500 
 1959              	.LASF2:
 1960 02ee 73686F72 		.ascii	"short int\000"
 1960      7420696E 
 1960      7400
 1961              	.LASF46:
 1962 02f8 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 1962      4320342E 
 1962      382E3420 
 1962      32303134 
 1962      30353236 
 1963 032b 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 1963      20726576 
 1963      6973696F 
 1963      6E203231 
 1963      31333538 
 1964 035e 73202D66 		.ascii	"s -ffunction-sections -finline-functions\000"
 1964      66756E63 
 1964      74696F6E 
 1964      2D736563 
 1964      74696F6E 
 1965              	.LASF50:
 1966 0387 54656C65 		.ascii	"TelemUART_GetTxBufferSize\000"
 1966      6D554152 
 1966      545F4765 
 1966      74547842 
 1966      75666665 
 1967              	.LASF4:
ARM GAS  C:\Users\Sven\AppData\Local\Temp\ccmMl8r6.s 			page 67


 1968 03a1 6C6F6E67 		.ascii	"long int\000"
 1968      20696E74 
 1968      00
 1969              	.LASF30:
 1970 03aa 54656C65 		.ascii	"TelemUART_PutString\000"
 1970      6D554152 
 1970      545F5075 
 1970      74537472 
 1970      696E6700 
 1971              	.LASF17:
 1972 03be 54656C65 		.ascii	"TelemUART_Enable\000"
 1972      6D554152 
 1972      545F456E 
 1972      61626C65 
 1972      00
 1973              	.LASF44:
 1974 03cf 54656C65 		.ascii	"TelemUART_IntClock_Start\000"
 1974      6D554152 
 1974      545F496E 
 1974      74436C6F 
 1974      636B5F53 
 1975              	.LASF0:
 1976 03e8 7369676E 		.ascii	"signed char\000"
 1976      65642063 
 1976      68617200 
 1977              	.LASF36:
 1978 03f4 73697A65 		.ascii	"size\000"
 1978      00
 1979              	.LASF19:
 1980 03f9 54656C65 		.ascii	"TelemUART_Stop\000"
 1980      6D554152 
 1980      545F5374 
 1980      6F7000
 1981              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
